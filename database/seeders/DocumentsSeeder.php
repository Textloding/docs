<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class DocumentsSeeder extends Seeder
{
    public function run()
    {
        DB::table('documents')->insert([
            ['id' => 1, 'name' => "Dcatadmin", 'slug' => "dcat-admin", 'description' => "只需很少的代码即可快速构建出一个功能完善的高颜值后台系统，内置丰富的后台常用组件，开箱即用，基于Laravel admin实现。", 'cover_image' => "images/dcatadmin.png", 'has_chapters' => 1, 'auto_numbering' => 1, 'is_public' => 1, 'requires_password' => 0, 'password' => null, 'created_at' => "2024-06-26 09:44:51", 'updated_at' => "2024-06-26 09:47:03"]
        ]);
        DB::table('versions')->insert([
            ['id' => 1, 'document_id' => 1, 'version_number' => "1.x", 'is_public' => 1, 'created_at' => "2024-06-26 09:45:06", 'updated_at' => "2024-06-26 09:45:06"],
            ['id' => 2, 'document_id' => 1, 'version_number' => "2.x", 'is_public' => 1, 'created_at' => "2024-06-26 09:45:15", 'updated_at' => "2024-06-26 09:45:15"]
        ]);
        DB::table('chapters')->insert([
            ['id' => 1, 'document_id' => 1, 'version_id' => 2, 'title' => "入门", 'order' => 1, 'created_at' => "2024-06-26 09:45:40", 'updated_at' => "2024-06-26 09:46:52"],
            ['id' => 2, 'document_id' => 1, 'version_id' => 2, 'title' => "数据表格", 'order' => 2, 'created_at' => "2024-06-26 09:45:55", 'updated_at' => "2024-06-26 09:46:57"],
            ['id' => 3, 'document_id' => 1, 'version_id' => 2, 'title' => "数据表单", 'order' => 3, 'created_at' => "2024-06-26 09:48:11", 'updated_at' => "2024-06-26 09:48:11"],
            ['id' => 4, 'document_id' => 1, 'version_id' => 2, 'title' => "数据详情", 'order' => 4, 'created_at' => "2024-06-26 09:48:24", 'updated_at' => "2024-06-26 09:48:24"],
            ['id' => 5, 'document_id' => 1, 'version_id' => 2, 'title' => "模型树", 'order' => 5, 'created_at' => "2024-06-26 09:48:36", 'updated_at' => "2024-06-26 09:48:36"],
            ['id' => 6, 'document_id' => 1, 'version_id' => 2, 'title' => "数据仓库", 'order' => 6, 'created_at' => "2024-06-26 09:48:46", 'updated_at' => "2024-06-26 09:48:46"],
            ['id' => 7, 'document_id' => 1, 'version_id' => 2, 'title' => "动作", 'order' => 7, 'created_at' => "2024-06-26 09:49:06", 'updated_at' => "2024-06-26 09:49:06"],
            ['id' => 8, 'document_id' => 1, 'version_id' => 2, 'title' => "多语言", 'order' => 8, 'created_at' => "2024-06-26 09:49:15", 'updated_at' => "2024-06-26 09:49:15"],
            ['id' => 9, 'document_id' => 1, 'version_id' => 2, 'title' => "开发扩展", 'order' => 9, 'created_at' => "2024-06-26 09:49:30", 'updated_at' => "2024-06-26 09:49:30"],
            ['id' => 10, 'document_id' => 1, 'version_id' => 2, 'title' => "页面组件", 'order' => 10, 'created_at' => "2024-06-26 09:49:47", 'updated_at' => "2024-06-26 09:49:47"],
            ['id' => 11, 'document_id' => 1, 'version_id' => 2, 'title' => "区块", 'order' => 11, 'created_at' => "2024-06-26 09:49:55", 'updated_at' => "2024-06-26 09:49:55"],
            ['id' => 12, 'document_id' => 1, 'version_id' => 2, 'title' => "动作以及表单响应", 'order' => 12, 'created_at' => "2024-06-26 09:50:15", 'updated_at' => "2024-06-26 09:50:15"],
            ['id' => 13, 'document_id' => 1, 'version_id' => 2, 'title' => "权限控制", 'order' => 13, 'created_at' => "2024-06-26 09:50:23", 'updated_at' => "2024-06-26 09:50:23"],
            ['id' => 14, 'document_id' => 1, 'version_id' => 2, 'title' => "菜单", 'order' => 14, 'created_at' => "2024-06-26 09:50:39", 'updated_at' => "2024-06-26 09:50:39"],
            ['id' => 15, 'document_id' => 1, 'version_id' => 2, 'title' => "帮助函数", 'order' => 15, 'created_at' => "2024-06-26 09:50:50", 'updated_at' => "2024-06-26 09:50:50"],
            ['id' => 16, 'document_id' => 1, 'version_id' => 2, 'title' => "开发工具", 'order' => 16, 'created_at' => "2024-06-26 09:51:04", 'updated_at' => "2024-06-26 09:51:04"],
            ['id' => 17, 'document_id' => 1, 'version_id' => 2, 'title' => "自定义登陆认证", 'order' => 17, 'created_at' => "2024-06-26 09:51:12", 'updated_at' => "2024-06-26 09:51:12"],
            ['id' => 18, 'document_id' => 1, 'version_id' => 2, 'title' => "自定义头部导航", 'order' => 18, 'created_at' => "2024-06-26 09:51:20", 'updated_at' => "2024-06-26 09:51:20"],
            ['id' => 19, 'document_id' => 1, 'version_id' => 2, 'title' => "更新日志", 'order' => 19, 'created_at' => "2024-06-26 09:51:28", 'updated_at' => "2024-06-26 09:51:28"]
        ]);
        DB::table('articles')->insert([
            ['id' => 1, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "简介", 'content' => "# Dcat Admin\r\n\r\n> 首发 - https://learnku.com/articles/42582\r\n\r\n`Dcat Admin`是一个基于[laravel-admin](https://www.laravel-admin.org/)二次开发而成的后台系统构建工具，只需很少的代码即可快速构建出一个功能完善的高颜值后台系统。支持页面一键生成CURD代码，内置丰富的后台常用组件，开箱即用，让开发者告别冗杂的HTML代码，对后端开发者非常友好。\r\n\r\n- [官方网站](http://www.dcatadmin.com)\r\n- [English documentions](http://www.dcatadmin.com/docs/en-2.x/quick-start.html)\r\n- [Demo / 在线演示](http://103.39.211.179:8080/admin)\r\n- [Demo源码](https://github.com/jqhph/dcat-admin-demo)\r\n- [Demo源码 (码云)](https://gitee.com/jqhph/dcat-admin-demo)\r\n- [扩展](#)\r\n\r\n### 截图\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d29d435f115791e85faeb6f1e6c5e928667b74f2a689e.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/a360a9ba99d6b0f52a168c5407f73e0d667b751831e31.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f4b4da6a3cffe61dab20fc8b19b851ad667b75200916f.jpg)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/075849cd99383b977b499a49e8335eb6667b75432516b.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/15a4ec70fdad53b18d4c9db253ed56e4667b7549c153d.jpg)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/692a4569604a14cae7316aa66e91fb5e667b7550b1d5f.jpg)\r\n\r\n### 技术栈\r\n\r\n- [Laravel](https://laravel.com/)\r\n- [AdminLTE3](https://github.com/ColorlibHQ/AdminLTE)\r\n- [Bootstrap4](https://getbootstrap.net/)\r\n- jQuery3\r\n- Pjax\r\n\r\n### 特性\r\n\r\n- 简洁优雅、灵活可扩展的API\r\n- 用户管理\r\n- RBAC权限管理，支持无限极权限节点\r\n- 菜单管理\r\n- 使用pjax构建无刷新页面，支持**按需加载**静态资源，可以无限扩展组件而不影响整体性能\r\n- 松耦合的页面构建与数据操作设计，可轻松切换数据源\r\n- 自定义页面\r\n- 自定义主题配色\r\n- 多主题切换功能，内置多种主题色\r\n- 可轻松构建无菜单栏的独立页面（如可用于构建弹窗选择器等功能）\r\n- 插件功能\r\n- 可视化代码生成器，可根据数据表一键生成增删改查页面\r\n- 数据表格构建工具，内置丰富的表格常用功能（如组合表头、数据导出、搜索、快捷创建、批量操作等）\r\n- 树状表格功能构建工具，支持分页和点击加载\r\n- 数据表单构建工具，内置丰富的表单类型，支持表单异步提交\r\n- 分步表单构建工具\r\n- 弹窗表单构建工具\r\n- 数据详情页构建工具\r\n- 无限层级树状页面构建工具，支持用拖拽的方式实现数据的层级、排序等操作\r\n- 内置丰富的常用页面组件（如图表、数据统计卡片、下拉菜单、Tab卡片、提示工具等）\r\n- `Section`功能（类似`Wordpress`的`Filter`和`blade`模板的`section`标签）\r\n- 异步文件上传表单，支持分块多线程上传\r\n- 多应用(多后台)\r\n- 插件市场，只需在管理页面轻轻点击鼠标即可完成插件的安装、更新和卸载等操作(`暂未实现`)\r\n\r\n### 新版本预告\r\n\r\n`Dcat Admin`计划在`2.0`版本上线插件市场功能，将对整个扩展功能进行重构，以提升用户体验。\r\n新的扩展系统将可以让用户只需在管理页面点点鼠标即可完成插件的`安装`、`更新`和`卸载`等操作。\r\n并且会上线插件付费功能，以激励开发者开发高质量的插件。\r\n\r\n如果有任何建议，欢迎提`issue`或者私信我，`Dcat Admin`团队将会致力于构建一个于开发者和用户都有利的生态，感谢大家的支持！\r\n\r\n### 与Laravel Admin的异同\r\n\r\n`Dcat Admin`是基于`Laravel Admin`二次开发而成的后台构建工具，整体风格与`Laravel Admin`一脉相承，只是在功能细节上做了大量的调整。\r\n\r\n调整：\r\n- 采用[AdminLTE3](https://github.com/ColorlibHQ/AdminLTE)(`bootstrap4`+`jQuery3`)构建前端页面\r\n- 使用`PJAX`构建无刷新页面，并且支持前端资源按需加载，开发者无需再担心安装组件过多会影响页面加载速度\r\n- 采用松耦合的页面构建与数据操作设计，构建页面不再需要关心数据操作接口的具体实现\r\n- 调整了表单提交方式，改为`ajax`提交\r\n- 调整了代码生成器，支持根据已有数据表一键生成增删改查页面\r\n- 调整了多语言翻译功能，使用更简单\r\n- 调整了权限功能，支持分层级以及排序\r\n- 调整了扩展系统，支持页面管理\r\n- ...\r\n\r\n新增：\r\n- 新增多主题切换功能\r\n- 新增表单弹窗功能，仅需增加数行代码就可以构建一个非Iframe表单弹窗\r\n- 新增快速构建无菜单栏页面功能\r\n- 新增弹窗选择器表单，可以在弹窗中选择表格数据\r\n- 新增AJAX提交表单，以及表单前端验证功能\r\n- 新增文件异步上传组件，支持分块上传、批量上传、上传进度条等\r\n- 新增表格过滤器右侧滑动面板布局\r\n- 新增表格字段值过滤功能\r\n- 新增分步表单\r\n- 新增`section`功能（与`wordpress`的`add_filter`功能类似）\r\n- 新增树形表格功能，可分页显示大批量的层级结构数据\r\n- 新增双表头表格功能，仅需增加数行代码即可构建出双表头表格\r\n- 新增了多种实用的页面组件，如图表、下拉菜单、markdown、checkbox等等\r\n- 新增`Tree`表单\r\n- 新增通过数组添加菜单的功能，支持绑定权限和角色\r\n- 新增通过数组添加菜单功能\r\n- 新增菜单缓存功能\r\n- ...\r\n\r\n### 交流\r\n\r\n**QQ群** \r\n一群 704661955 (已满)\r\n二群 615467299\r\n\r\n**扩展开发者QQ群** 679738409 (有意开发扩展的同学可以加这个群交流，开发完成之后可以上报给我，我会把扩展包收录到官网，可以让更多开发者看到。)\r\n\r\n### 加入我们\r\n\r\n如果您对这个项目感兴趣，非常欢迎加入项目开发团队，参与这个项目的功能维护与开发。欢迎任何形式的贡献（包括但不限于以下）：\r\n\r\n* 贡献代码\r\n* 完善文档\r\n* 撰写教程\r\n* 完善注释\r\n* ...", 'order' => 1, 'created_at' => "2024-06-26 09:57:23", 'updated_at' => "2024-06-26 09:57:23", 'slug' => "brief-introduction"],
            ['id' => 2, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "安装", 'content' => "# 安装\r\n\r\n<a name=\"env\"></a>\r\n## 环境\r\n+ PHP >= `7.1`\r\n+ Laravel `5.5.0` ~ `9.*`\r\n+ Fileinfo PHP Extension\r\n\r\n<a name=\"start\"></a>\r\n## 开始安装\r\n\r\n首先需要安装`laravel`框架，如已安装可以跳过此步骤。如果您是第一次使用`laravel`，请务必先阅读文档 https://learnku.com/docs/laravel/9.x/installation/12200 ！\r\n```bash\r\ncomposer create-project --prefer-dist laravel/laravel 项目名称 9.*\r\n# 或\r\ncomposer create-project --prefer-dist laravel/laravel 项目名称\r\n```\r\n\r\n安装完`laravel`之后需要修改`.env`文件，设置数据库连接设置正确\r\n\r\n```dotenv\r\nDB_CONNECTION=mysql\r\nDB_HOST=127.0.0.1\r\nDB_PORT=3306\r\nDB_DATABASE=dcat-admin\r\nDB_USERNAME=root\r\nDB_PASSWORD=\r\n```\r\n\r\n安装`dcat-admin`\r\n\r\n\r\n```shell\r\ncd {项目名称}\r\n\r\ncomposer require dcat/laravel-admin:\"2.*\" -vvv\r\n```\r\n> 如果上一步出现报错，则更改`composer.json`的参数`minimum-stability`的值为`dev`。\r\n\r\n然后运行下面的命令来发布资源：\r\n\r\n```\r\nphp artisan admin:publish\r\n```\r\n\r\n在该命令会生成配置文件`config/admin.php`，可以在里面修改安装的地址、数据库连接、以及表名，建议都是用默认配置不修改。\r\n\r\n然后运行下面的命令完成安装：\r\n\r\n> {tip} 执行这一步命令可能会报以下错误`Specified key was too long ... 767 bytes`，如果出现这个报错，请在`app/Providers/AppServiceProvider.php`文件的`boot`方法中加上代码`\\Schema::defaultStringLength(191);`，然后删除掉数据库中的所有数据表，再重新运行一遍`php artisan admin:install`命令即可。\r\n\r\n```\r\nphp artisan admin:install\r\n```\r\n\r\n上述步骤操作完成之后就可以配置`web`服务了，**注意需要把`web`目录指向`public`目录**！如果用的是`nginx`，还需要在配置中加上伪静态配置\r\n```dotenv\r\nlocation / {\r\n\ttry_files \$uri \$uri/ /index.php?\$query_string;\r\n}\r\n```\r\n\r\n启动服务后，在浏览器打开 `http://localhost/admin`，使用用户名 `admin` 和密码 `admin`登陆。\r\n\r\n\r\n\r\n<a name=\"files\"></a>\r\n## 生成的文件\r\n\r\n安装完成之后,会在项目目录中生成以下的文件:\r\n\r\n<a name=\"config\"></a>\r\n### 配置文件\r\n\r\n安装完成之后，`dcat-admin`所有的配置都在`config/admin.php`文件中。\r\n\r\n<a name=\"admin\"></a>\r\n### 后台项目文件\r\n安装完成之后，后台的安装目录为`app/Admin`，之后大部分的后台开发编码工作都是在这个目录下进行。\r\n\r\n```\r\napp/Admin\r\n├── Controllers\r\n│   ├── AuthController.php\r\n│   └── HomeController.php\r\n├── Metrics\r\n│   └── Examples\r\n│       ├── NewDevices.php\r\n│       ├── NewUsers.php\r\n│       ├── ProductOrders.php\r\n│       ├── Sessions.php\r\n│       ├── Tickets.php\r\n│       └── TotalUsers.php\r\n├── bootstrap.php\r\n└── routes.php\r\n```\r\n\r\n1. `app/Admin/routes.php`文件用来配置后台路由。\r\n2. `app/Admin/bootstrap.php` 是`dcat-admin`的启动文件, 使用方法请参考文件里面的注释.\r\n3. `app/Admin/Controllers`目录用来存放后台控制器文件，该目录下的`HomeController.php`文件是后台首页的显示控制器，`AuthController.php`为后台管理员登录鉴权控制器。\r\n4. `app/Admin/Metrics/Examples`里面存放的是`数据统计卡片(Metric Card)`的示例代码.\r\n\r\n<a name=\"assets\"></a>\r\n### 静态文件\r\n\r\n后台所需的前端静态文件在`/public/vendor/dcat-admin`目录下。\r\n\r\n<a name=\"migrations\"></a>\r\n### 数据表迁移文件\r\n对应的数据表迁移文件在`/database/migrations`目录下。\r\n\r\n<a name=\"lang\"></a>\r\n### 语言包\r\n语言包文件在`/resources/lang`目录下。", 'order' => 2, 'created_at' => "2024-06-26 09:58:07", 'updated_at' => "2024-06-26 09:58:07", 'slug' => "install"],
            ['id' => 3, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "1.x升级指南", 'content' => "# v1.x版本升级指南\r\n\r\n\r\n### 前言\r\n\r\n本章节内容只包含 `1.x` 版本中 `API` 改动的部分，不包含新增特性或对用户使用无影响的改动说明， `2.0` 的具体版本变化说明请参考 [2.0有哪些变化？](https://learnku.com/articles/50781?#reply164307)\r\n\r\n**预计升级时间：60 分钟**\r\n\r\n\r\n### 1.创建新分支，备份配置文件\r\n\r\n创建一个新的分支，然后备份配置文件 `config/admin.php` 命名为 `config/admin.bak.php`，方便后续对比配置变动。\r\n\r\n### 2.更新composer依赖\r\n\r\n先卸载 `1.x` 版本\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\n```\r\n\r\n再安装\r\n```\r\ncomposer require dcat/laravel-admin:\"2.*\"\r\n```\r\n如果这一步出现报错，则更改`composer.json`的参数`minimum-stability`的值为`dev`，\r\n\r\n安装成功后\r\n\r\n1. 删除 `public/vendors` 目录\r\n2. 重新发布资源 `php artisan admin:publish --force`\r\n3. 根据上面备份后的配置文件，把修改过的参数写到新的配置文件 `config/admin.php` 中，这里需要注意的是`1.x`的默认主题色是`indigo`（已被废弃），在新版本中已经替换成`default`了\r\n4. 调整语言包，新版本中语言包目录由 `zh-CN` 变成了 `zh_CN`，需要把自定义的翻译文件移动到新目录，并且 `菜单标题` 的翻译也独立出来到 `menus.php` 中了\r\n5. 运行数据库迁移命令命令 `php artisan migrate` ，新版本中新增了两个表`admin_settings` 以及 `admin_extensions`\r\n\r\n### 3.全局更改命名空间\r\n\r\n1. 全局搜索命名空间 `Dcat\\Admin\\Controllers` 并替换为 `Dcat\\Admin\\Http\\Controllers`\r\n2. 全局搜索命名空间 `Dcat\\Admin\\Auth` 并替换为 `Dcat\\Admin\\Http\\Auth`\r\n\r\n\r\n### 4.表格部分变动\r\n\r\n1.字段隐藏功能调整，旧版本 `responsive` 方法已废弃，在新版本中开启字段隐藏功能方法如下\r\n\r\n```php\r\n// 开启字段选择器功能\r\n\$grid->showColumnSelector();\r\n\r\n// 设置默认隐藏字段\r\n\$grid->hideColumns(['field1', ...]);\r\n```\r\n\r\n2.表格 `collection`、`fetching` 等方法已被移除，在新版本中可以通过下面的事件代替\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\nuse Illuminate\\Support\\Collection;\r\n\r\n// 使用 Grid\\Events\\Fetched 事件代替 collection\r\n\$grid->listen(Grid\\Events\\Fetched::class, function (\$grid, Collection \$rows) {\r\n    \$rows->transform(function (\$row) {\r\n        // 更改行数据\r\n        \$row['name'] = \$row['first_name'].' '.\$row['last_name'];\r\n        \r\n        return \$row;\r\n    });\r\n});\r\n\r\n// 使用 Grid\\Events\\Fetching 事件代替 fetching\r\n\$grid->listen(Grid\\Events\\Fetching::class, function (\$grid) {\r\n    \r\n});\r\n```\r\n\r\n3.表格行相关闭包中允许使用模型\r\n\r\n```php\r\n\$grid->column('avatar')->display(function ({\r\n    // 可直接访问模型相关方法\r\n    return \$this->getAvatar();\r\n});\r\n```\r\n\r\n\r\n4.设置路由前缀方法由 `resource` 调整为 `setResource` \r\n```php\r\n\$grid->setResource('auth/users');\r\n```\r\n\r\n5.树形表格 `tree` 方法即将被废弃，将会移动到扩展中心\r\n\r\n\r\n### 5.表单部分变动\r\n\r\n1.调整表单处理响应方法，旧版本中的`success`、`error`、`redirect` 以及 `location` 方法已被移除，\r\n在 `2.0` 中我们让表单的响应方法和 `action` 的响应方法统一了起来，详细用法请参考文档 [表单响应](https://learnku.com/docs/dcat-admin/2.x/action-and-form-response/9690)，示例\r\n\r\n```php\r\n\$form->saving(function (Form \$form) {\r\n    return \$form\r\n        ->response()\r\n        ->success('保存成功')\r\n        ->script('console.log(\"执行JS代码\")')\r\n        ->redirect('auth/users');\r\n});\r\n```\r\n\r\n如果是在[工具表单](https://learnku.com/docs/dcat-admin/2.x/tools-form/8125)中，用法如下\r\n```php\r\npublic function handle(array \$input)\r\n{\r\n    ...\r\n\r\n    return \$this\r\n        ->response()\r\n        ->alert()\r\n        ->success('成功')\r\n        ->detail('详细内容');\r\n}\r\n```\r\n\r\n2.调整表单 `block` 布局功能，并废弃 `setDefaultBlockWidth` 方法，详细用法请参考文档 [表单block布局](https://learnku.com/docs/dcat-admin/2.x/table-layout/8822)，示例\r\n\r\n```php\r\n\$form->block(8, function (Form\\BlockForm \$form) {\r\n    \$form->title('基本设置');\r\n    \$form->showFooter();\r\n    \$form->width(9, 2);\r\n\r\n    \$form->column(6, function (Form\\BlockForm \$form) {\r\n        \$form->display('id');\r\n        \$form->text('name');\r\n        \$form->email('email');\r\n        \$form->image('avatar');\r\n        \$form->password('password');\r\n    });\r\n\r\n    \$form->column(6, function (Form\\BlockForm \$form) {\r\n        \$form->text('username');\r\n        \$form->email('mobile');\r\n        \$form->textarea('description');\r\n    });\r\n});\r\n\$form->block(4, function (Form\\BlockForm \$form) {\r\n    \$form->title('分块2');\r\n\r\n    \$form->text('nickname');\r\n    \$form->number('age');\r\n    \$form->radio('status')->options(['1' => '默认', 2 => '冻结'])->default(1);\r\n\r\n    \$form->next(function (Form\\BlockForm \$form) {\r\n        \$form->title('分块3');\r\n\r\n        \$form->date('birthday');\r\n        \$form->date('created_at');\r\n    });\r\n});\r\n```\r\n\r\n\r\n3.废弃表单直接提交，只保留 `ajax` 提交的方式，并重命名 `disableAjaxSubmit` 方法为 `ajax`\r\n\r\n```php\r\n\$form->ajax(false);\r\n```\r\n\r\n4.废弃分步表单，新版本请使用[分步表单扩展](https://github.com/dcat-admin/form-step)代替\r\n\r\n6.`map`以及`listbox`、`slider`也即将废弃，并移动扩展中心\r\n\r\n7.表单字段扩展功能变动，具体请参考文档[表单字段扩展](https://learnku.com/docs/dcat-admin/2.x/field-management/8108)章节\r\n\r\n\r\n\r\n### 6.数据仓库部分变动\r\n\r\n1.数据仓库的接口命名做了简化处理，新的 interface 如下\r\n\r\n```php\r\ninterface Repository\r\n{\r\n    /**\r\n     * 获取主键名称.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getKeyName();\r\n\r\n    /**\r\n     * 获取创建时间字段.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCreatedAtColumn();\r\n\r\n    /**\r\n     * 获取更新时间字段.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getUpdatedAtColumn();\r\n\r\n    /**\r\n     * 是否使用软删除.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isSoftDeletes();\r\n\r\n    /**\r\n     * 获取Grid表格数据.\r\n     *\r\n     * @param Grid\\Model \$model\r\n     *\r\n     * @return \\Illuminate\\Contracts\\Pagination\\LengthAwarePaginator|Collection|array\r\n     */\r\n    public function get(Grid\\Model \$model);\r\n\r\n    /**\r\n     * 获取编辑页面数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function edit(Form \$form);\r\n\r\n    /**\r\n     * 获取详情页面数据.\r\n     *\r\n     * @param Show \$show\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function detail(Show \$show);\r\n\r\n    /**\r\n     * 新增记录.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function store(Form \$form);\r\n\r\n    /**\r\n     * 查询更新前的行数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function updating(Form \$form);\r\n\r\n    /**\r\n     * 更新数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return bool\r\n     */\r\n    public function update(Form \$form);\r\n\r\n    /**\r\n     * 删除数据.\r\n     *\r\n     * @param Form  \$form\r\n     * @param array \$deletingData\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function delete(Form \$form, array \$deletingData);\r\n\r\n    /**\r\n     * 查询删除前的行数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function deleting(Form \$form);\r\n}\r\n```\r\n\r\n\r\n2.`EloquentRepository::eloquent()` 重命名为 `EloquentRepository::model()`\r\n\r\n### 7.Section变动\r\n\r\n在新版本中 `AdminSection` 已被移除，请使用 `Dcat\\Admin\\Admin::SECTION` 常量代替\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nadmin_inject_default_section(Admin::SECTION['HEAD'], function () {\r\n    return ...;\r\n});\r\n```\r\n\r\n\r\n### 8.扩展\r\n\r\n扩展相关变动请参考文档[扩展](https://learnku.com/docs/dcat-admin/2.x/extended-basic-usage/9691)\r\n\r\n### 9.登录逻辑\r\n1.登录模板，如果你在旧项目中自定义过登录模板，则需要调整登录模板中的`JS`代码\r\n```js\r\nDcat.ready(function () {\r\n    // ajax表单提交\r\n    \$('#login-form').form({\r\n        validate: true,\r\n    });\r\n});\r\n```\r\n\r\n2.登录逻辑，如果重写过登录逻辑，则最后登录成功的响应方法需要使用 `sendLoginResponse`\r\n\r\n### 10.其他变动\r\n\r\n1.资源注册\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n// 注册资源路径别名\r\nAdmin::asset()->alias('test', 'assets/test');\r\n\r\nAdmin::asset()->alias('名称', [ \r\n    'js' => [\r\n        // @test 会判定为别名\r\n        '@test/test.js',\r\n    ],\r\n    'css' => [\r\n        '@test/test.css',\r\n    ],\r\n]);\r\n\r\n\r\n// 加载资源\r\nAdmin::asset()->require('@名称');\r\n// 仅加载 js\r\nAdmin::js('@名称');\r\n// 仅加载 css\r\nAdmin::css('@名称');\r\n```", 'order' => 3, 'created_at' => "2024-06-26 10:00:15", 'updated_at' => "2024-06-26 10:00:15", 'slug' => "1-x-upgrade-guide"],
            ['id' => 4, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "版本升级", 'content' => "# 版本升级须知\r\n\r\n### 说明\r\n\r\n`Dcat Admin`的版本发行将会参考主流`web框架`的发行策略，尽量降低版本升级带来的影响，小版本和补丁**决不**包含非兼容性更改；同时我们也将会提供更新日志，详细说明新版本的改动以及可能造成的影响。\r\n\r\n\r\n\r\n\r\n### 升级命令\r\n升级命令\r\n```bash\r\ncomposer update dcat/laravel-admin\r\n```\r\n\r\n升级成功之后需要运行 `admin:update` 命令进行重新发布语言包、配置文件、前端静态资源等文件，然后**清理浏览器缓存**\r\n\r\n```bash\r\n# 发布 语言包、配置文件、前端静态资源、数据迁移文件等\r\nphp artisan admin:update\r\n```\r\n\r\n运行 `admin:update`，相当于运行\r\n\r\n```\r\nphp artisan admin:publish --assets --migrations --lang --force\r\nphp artisan migrate\r\n``` \r\n\r\n#### 发布文件命令\r\n\r\n> 运行 `admin:update` 后一般不需要运行 `admin:publish` 命令\r\n\r\n```bash\r\nphp artisan admin:publish --force\r\n```\r\n\r\n只更新语言包\r\n```bash\r\nphp artisan admin:publish --force --lang\r\n```\r\n\r\n只更新配置文件\r\n```bash\r\nphp artisan admin:publish --force --config\r\n```\r\n\r\n只更新前端静态资源\r\n```bash\r\nphp artisan admin:publish --force --assets\r\n```\r\n\r\n只更新数据库迁徙文件(这个一般不需要更新)\r\n```bash\r\nphp artisan admin:publish --force --migrations\r\n```", 'order' => 4, 'created_at' => "2024-06-26 10:01:44", 'updated_at' => "2024-06-26 10:01:44", 'slug' => "version-upgrade"],
            ['id' => 5, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "快速开始", 'content' => "# 快速开始\r\n\r\n在日常开发中，我们可以用代码生成器一键生成增删改查页面代码，非常的方便快捷。\r\n\r\n下面将会给大家介绍代码生成器的使用方法，以及一个增删改查页面的基本构成。通过学习下面的内容将可以帮助大家快速理解这个系统的基本使用方法。\r\n\r\n## 代码生成器\r\n\r\n### 创建数据表\r\n\r\n安装完`Laravel`之后会内置一个`users`表的`migration`文件(如果不了解`migration`文件作用，请参考文档[数据库迁移](https://learnku.com/docs/laravel/7.x/migrations/7496))，文件路径为`database/migrations/2014_10_12_000000_create_users_table.php`。\r\n\r\n然后我们运行以下命令，在`MySQL`中创建这个数据表\r\n\r\n```php\r\nphp artisan migrate\r\n```\r\n\r\n运行完之后可以看到数据库中已经多了一个`users`表，结构如下\r\n\r\n```sql\r\nCREATE TABLE `users` (\r\n `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL, \r\n `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL, \r\n `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL, \r\n `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', \r\n `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', \r\n PRIMARY KEY (`id`), \r\n UNIQUE KEY `users_email_unique` (`email`)\r\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\r\n```\r\n\r\n### 一键生成增删改查页面\r\n\r\n> 如果你的开发环境不是`windows`，请注意要给项目目录设置读写权限，否则可能出现无法生成代码的情况。\r\n\r\n**1.**首先打开地址`http://你的域名/admin/helpers/scaffold`，进入代码生成器页面；\r\n\r\n**2.**由于前面已经创建好了数据表，所以这里我们可以直接通过页面左上角的第二个下拉选框选择`users`表，选择之后会自动填充字段信息，效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/17a0324d3afd048216a66624ae9efcb6667b76eb23d0f.png)\r\n\r\n**3.**修改模型名称为`App\\User`（Laravel 8 以下），或者 `App\\Models\\User`（Laravel 8 及其以上）\r\n\r\n**4.**由于`migration`文件、数据表、以及模型文件(使用内置的`App\\User`即可)都已经有了，所以此处我们可以把这三个选项给去掉\r\n\r\n**5.**填写字段翻译\r\n\r\n最后呈现效果如下\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/4dc5e692c20f1f1c3e6877849426bed7667b7703ce1aa.png)\r\n\r\n最后点击创建按钮即可，创建的文件如下\r\n\r\n```\r\napp/Admin\r\n├── Controllers\r\n│   └── UserController.php  # 控制器\r\n└── Repositories            # 数据仓库\r\n│   └── User.php\r\nresouces/lang/{当前语言}\r\n└── user.php                # 语言包\r\n```\r\n\r\n### 添加路由配置\r\n\r\n打开路由配置文件`app/Admin/routes.php`，往里面添加一行：\r\n```\r\n\$router->resource('users', 'UserController');\r\n```\r\n\r\n到此，就可以打开浏览器输入地址`http://你的域名/admin/users`访问刚刚创建完的页面了\r\n\r\n### 添加左侧菜单\r\n\r\n打开`http://你的域名/admin/auth/menu`，添加对应的menu, 然后就能在后台管理页面的左侧边栏看到用户管理页面的链接入口了。\r\n\r\n> 其中`uri`填写不包含路由前缀的的路径部分，比如完整路径是`http://你的域名/admin/demo/users`, 那么就填`demo/users`，如果要添加外部链接，只要填写完整的url即可，比如`http://dcat-admin.org/`.\r\n\r\n### 菜单翻译\r\n\r\n在您的语言文件的`menu_titles`索引中追加菜单标题。\r\n例如“工作单位”标题：\r\n\r\n在`resources/lang/{当前语言}/menu.php`中\r\n```php\r\n...\r\n// 用_小写并用_替换空格\r\n'titles' => [\r\n     'work_units' => 'Unidades de trabajo'\r\n],\r\n```\r\n\r\n### 完成\r\n这样一个简单的`CURD`功能就构建完成了，剩下的工作就是深度构建数据表格和表单了，打开 `app/Admin/Contollers/UserController.php`,找到`form()`和`grid()`方法，然添加构建代码。\r\n更多详细使用请查看[数据表格](https://learnku.com/docs/dcat-admin/1.x/basic-use/8089)和[数据表单](https://learnku.com/docs/dcat-admin/1.x/basic-use/8105)。\r\n\r\n## 增删改查功能简易说明\r\n\r\n为了便于大家理解增删改查功能的基本用法，下面将给大家简单介绍前面使用生成器生成的代码。\r\n\r\n### 控制器\r\n\r\n`Dcat Admin`的增删改查页面代码是非常简洁和易懂的，对开发者非常的友好，只需极少的代码即可构建出一个功能完善的后台系统，并且非常简单灵活和易于扩展。\r\n\r\n打开`app/Admin/Controllers/UserController.php`可以看到如下代码\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers;\r\n\r\nuse App\\Admin\\Repositories\\User;\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Show;\r\nuse Dcat\\Admin\\Controllers\\AdminController;\r\n\r\nclass UserController extends AdminController\r\n{\r\n    /**\r\n     * Make a grid builder.\r\n     *\r\n     * @return Grid\r\n     */\r\n    protected function grid()\r\n    {\r\n        return Grid::make(new User(), function (Grid \$grid) {\r\n            // 这里的字段会自动使用翻译文件\r\n            \$grid->column('id')->sortable();\r\n            \$grid->column('name');\r\n            \$grid->column('email');\r\n            \$grid->column('email_verified_at');\r\n            \$grid->column('password');\r\n            \$grid->column('remember_token');\r\n            \$grid->column('created_at');\r\n            \$grid->column('updated_at')->sortable();\r\n        \r\n            \$grid->filter(function (Grid\\Filter \$filter) {\r\n                \$filter->equal('id');\r\n        \r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Make a show builder.\r\n     *\r\n     * @param mixed \$id\r\n     *\r\n     * @return Show\r\n     */\r\n    protected function detail(\$id)\r\n    {\r\n        return Show::make(\$id, new User(), function (Show \$show) {\r\n            // 这里的字段会自动使用翻译文件\r\n            \$show->field('id');\r\n            \$show->field('name');\r\n            \$show->field('email');\r\n            \$show->field('email_verified_at');\r\n            \$show->field('password');\r\n            \$show->field('remember_token');\r\n            \$show->field('created_at');\r\n            \$show->field('updated_at');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Make a form builder.\r\n     *\r\n     * @return Form\r\n     */\r\n    protected function form()\r\n    {\r\n        return Form::make(new User(), function (Form \$form) {\r\n            // 这里的字段会自动使用翻译文件\r\n            \$form->display('id');\r\n            \$form->text('name');\r\n            \$form->text('email');\r\n            \$form->text('email_verified_at');\r\n            \$form->text('password');\r\n            \$form->text('remember_token');\r\n        \r\n            \$form->display('created_at');\r\n            \$form->display('updated_at');\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n### 数据仓库\r\n\r\n`Dcat Admin` 构建页面并不直接依赖于`Model`，而是引入了数据仓库作为中间层，让页面的构建不再与数据的读写产生强耦合关系。\r\n\r\n数据仓库是`Dcat Admin`中对数据增删改查操作接口的具体实现，更详细用法请参考[数据仓库](https://learnku.com/docs/dcat-admin/1.x/basic-use/8123)。\r\n\r\n>  如果你的数据来自`MySQL`，那么你也可以直接使用`Model`实例，底层会自动把`Model`转化为数据仓库实例。这里为了便于大家理解其中的概念，所以创建了数据仓库文件。\r\n\r\n我们打开刚刚生成的文件`app/Admin/Repositories/User.php`，可以看到只有如下内容，非常简单\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse App\\User as UserModel;\r\n\r\nclass User extends EloquentRepository\r\n{\r\n     protected \$eloquentClass = UserModel::class;\r\n }\r\n```\r\n\r\n### 语言包\r\n\r\n每个控制器都可以生成自己对应的语言包，并且[数据表格](https://learnku.com/docs/dcat-admin/1.x/basic-use/8089)、[数据表单](https://learnku.com/docs/dcat-admin/1.x/basic-use/8105)和[数据详情](https://learnku.com/docs/dcat-admin/1.x/basic-use/8116)功能都会自动读取里面的翻译。\r\n\r\n下面我们打开`UserController`对应的语言包文件`resouces/lang/{当前语言}/user.php`\r\n\r\n```php\r\n<?php \r\nreturn [\r\n    // labels是自定义标签翻译\r\n    'labels' => [\r\n        // 这个是页面 title 翻译\r\n        'User' => '用户',\r\n\t\t// 默认面包屑翻译，注意这里是跟路由路径相同\r\n\t\t'users' => '用户',\r\n    ],\r\n    // 表字段翻译\r\n    'fields' => [\r\n        'name' => '名称',\r\n        'email' => '邮箱',\r\n        'email_verified_at' => '验证时间',\r\n        'password' => '密码',\r\n        'remember_token' => 'remember_token',\r\n    ],\r\n    'options' => [\r\n    ],\r\n];\r\n```", 'order' => 5, 'created_at' => "2024-06-26 10:05:40", 'updated_at' => "2024-06-26 10:05:40", 'slug' => "quick-start"],
            ['id' => 6, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "开发前必读", 'content' => "# 开发前必读\r\n\r\n## 开发环境请打开debug模式\r\n`Dcat Admin`提供一些开发工具（如代码生成器）需要在 `debug` 模式下才能使用。\r\n建议开发者在开发环境打开`debug`模式，把`.env`配置文件中的参数`APP_DEBUG`值设置为`true`即可。\r\n\r\n\r\n## 按需引入JS脚本\r\n\r\n`Dcat Admin` 使用 `jquery-pjax` 构建无刷新页面（单页应用），并且支持<b>按需加载</b> `JS` 脚本，支持在任意的页面方法（模板文件除外）中引入`JS`脚本，每个页面只需加载当前页面所需要使用到的 `js` 脚本。\r\n\r\n\r\n示例：\r\n\r\n写一个自定义页面，这个页面组件需要引入一些前端静态资源文件\r\n\r\n> {tip} `Dcat Admin`构建的是一个单页应用，加载的`JS`脚本只会执行一次，所以初始化操作不能直接放在`JS`脚本中，应该使用`Admin::script`方法载入。\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Contracts\\Support\\Renderable;\r\nuse Dcat\\Admin\\Admin;\r\n\r\nclass Card implements Renderable\r\n{\r\n\tpublic static \$js = [\r\n\t    // js脚本不能直接包含初始化操作，否则页面刷新后无效\r\n\t\t'xxx/js/card.min.js',\r\n\t];\r\n\tpublic static \$css = [\r\n\t\t'xxx/css/card.min.css',\r\n\t];\r\n\r\n\tpublic function script()\r\n\t{\r\n\t\treturn <<<JS\r\n\t\tconsole.log('所有JS脚本都加载完了');\r\n\t\t// 初始化操作\r\n\t\t\$('xxx').card();\r\nJS;\t\t\r\n\t}\r\n\r\n\tpublic function render()\r\n\t{\r\n\t\t// 在这里可以引入你的js或css文件\r\n\t\tAdmin::js(static::\$js);\r\n\t\tAdmin::css(static::\$css);\r\n\t\t\r\n\t\t// 需要在页面执行的JS代码，例如初始化代码\r\n\t\t// 通过 Admin::script 设置的JS代码会自动在所有JS脚本都加载完毕后执行\r\n\t\tAdmin::script(\$this->script());\r\n\t\t\r\n\t\treturn view('...')->render();\r\n\t}\r\n}\r\n```\r\n\r\n在控制器中使用这个组件\r\n```php\r\nuse Dcat\\Admin\\Layout\\Content;\r\nuse Card;\r\n\r\nclass HomeController\r\n{\r\n\tpublic function index(Content \$content)\r\n\t{\r\n\t\t// 使用上面的Card组件\r\n\t\t// Card组件需要用到的静态文件只会在当前请求加载\r\n\t\t// 其他请求不会加载 \r\n\t\treturn \$content->body(new Card());\r\n\t}\r\n}\r\n```\r\n\r\n\r\n## 在页面中添加JS代码\r\n\r\n由于加入了页面按需加载`JS`脚本的功能，所以在本项目内添加的`JS`代码都必须使用`Dcat.ready`方法监听`JS`脚本加载完毕事件，在此事件内的`JS`代码会在所有`JS`脚本都加载完毕后才执行。\r\n\r\n\r\n使用 `Dcat\\Admin\\Admin::script` 方法添加的代码会自动放在`Dcat.ready`方法内执行。\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass UserController\r\n{\r\n   public function index(Content \$content)\r\n   {\r\n       Admin::script(\r\n           <<<JS\r\n(function () {\r\n    // 如果有定义局部变量的需求，最好放在匿名函数内，防止变量污染\r\n    var name = 'test';\r\n\r\n    console.log('所有JS脚本都加载完毕啦~~', name)\r\n})()    \r\nJS\r\n       );\r\n       \r\n       return \$content->header(...)->body(...);\r\n   }\r\n}\r\n```\r\n\r\n\r\n如果是在模板文件中添加`JS`代码，则需要把代码放在`Dcat.ready`内执行\r\n\r\n```html\r\n<script>\r\n// 用 Dcat.ready() 代替 \$()\r\n// 此方法会在所有 js 脚本加载完成后执行\r\nDcat.ready(function () {\r\n    // 写入你的 js 代码\r\n    console.log('所有 js 脚本加载完毕啦~~');\r\n});\r\n</script>\r\n```\r\n\r\n## 页面内容和布局\r\n\r\n> {tip} 页面内容的布局功能是`Dcat Admin`的基石，掌握了这个功能的用法，可以非常轻松的使用`Dcat Admin`构建页面或扩展功能，请大家一定要认真阅读。\r\n\r\n`Dcat Admin`的布局可参考后台首页的布局文件`app/Admin/Controllers/HomeController.php`的`index()`方法。\r\n\r\n\r\n`Dcat\\Admin\\Layout\\Content`类用来实现内容区的布局。`Content::body(\$content)`方法用来添加页面内容。\r\n\r\n\r\n一个简单的后台页面代码如下：\r\n\r\n```php\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\npublic function index(Content \$content)\r\n{\r\n\t// 选填\r\n\t\$content->header('填写页面头标题');\r\n\t\r\n\t// 选填\r\n\t\$content->description('填写页面描述小标题');\r\n\t\r\n\t// 添加面包屑导航\r\n\t\$content->breadcrumb(\r\n\t\t['text' => '首页', 'url' => '/admin'],\r\n\t\t['text' => '用户管理', 'url' => '/admin/users'],\r\n\t\t['text' => '编辑用户']\r\n\t);\r\n\r\n\t// 填充页面body部分，这里可以填入任何可被渲染的对象\r\n\treturn \$content->body('hello world');\r\n}\r\n\r\n```\r\n\r\n其中 `\$content->body()` 方法是 `\$content->row()` 的别名方法，可以接受任何可字符串化的对象作为参数，可以是字符串、数字、包含了`__toString`方法的对象，实现了`Renderable`、`Htmlable`接口的对象，包括laravel的视图。\r\n\r\n\r\n### 布局\r\n\r\n`dcat-admin`的布局使用bootstrap的栅格系统，每行的长度是12，下面是几个简单的示例：\r\n\r\n添加一行内容:\r\n\r\n```php\r\n\$content->row('hello')\r\n\r\n---------------------------------\r\n|hello                          |\r\n|                               |\r\n|                               |\r\n|                               |\r\n|                               |\r\n|                               |\r\n---------------------------------\r\n\r\n```\r\n\r\n行内添加多列：\r\n\r\n```php\r\n\$content->row(function(Row \$row) {\r\n    \$row->column(4, 'foo');\r\n    \$row->column(4, 'bar');\r\n    \$row->column(4, 'baz');\r\n});\r\n----------------------------------\r\n|foo       |bar       |baz       |\r\n|          |          |          |\r\n|          |          |          |\r\n|          |          |          |\r\n|          |          |          |\r\n|          |          |          |\r\n----------------------------------\r\n\r\n\r\n\$content->row(function(Row \$row) {\r\n    \$row->column(4, 'foo');\r\n    \$row->column(8, 'bar');\r\n});\r\n----------------------------------\r\n|foo       |bar                  |\r\n|          |                     |\r\n|          |                     |\r\n|          |                     |\r\n|          |                     |\r\n|          |                     |\r\n----------------------------------\r\n\r\n```\r\n\r\n列中添加行：\r\n\r\n```php\r\n\$content->row(function (Row \$row) {\r\n\r\n    \$row->column(4, 'xxx');\r\n\r\n    \$row->column(8, function (Column \$column) {\r\n        \$column->row('111');\r\n        \$column->row('222');\r\n        \$column->row('333');\r\n    });\r\n});\r\n----------------------------------\r\n|xxx       |111                  |\r\n|          |---------------------|\r\n|          |222                  |\r\n|          |---------------------|\r\n|          |333                  |\r\n|          |                     |\r\n----------------------------------\r\n\r\n\r\n```\r\n\r\n\r\n列中添加行, 行内再添加列：\r\n\r\n```php\r\n\$content->row(function (Row \$row) {\r\n\r\n    \$row->column(4, 'xxx');\r\n\r\n    \$row->column(8, function (Column \$column) {\r\n        \$column->row('111');\r\n        \$column->row('222');\r\n        \$column->row(function(Row \$row) {\r\n            \$row->column(6, '444');\r\n            \$row->column(6, '555');\r\n        });\r\n    });\r\n});\r\n----------------------------------\r\n|xxx       |111                  |\r\n|          |---------------------|\r\n|          |222                  |\r\n|          |---------------------|\r\n|          |444      |555        |\r\n|          |         |           |\r\n----------------------------------\r\n```\r\n\r\n#### 等宽布局\r\n\r\n当列宽度设置为`0`时会使用等宽布局\r\n\r\n```php\r\nuse Dcat\\Admin\\Layout\\Row;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nreturn Content::make()\r\n\t->body(function (Row \$row) {\r\n\t    \$row->column(0, 'foo');\r\n\t    \$row->column(0, 'bar');\r\n\t    \$row->column(0, 'baz');\r\n\t});\r\n\t\r\n----------------------------------\r\n|foo       |bar       |baz       |\r\n|          |          |          |\r\n|          |          |          |\r\n|          |          |          |\r\n|          |          |          |\r\n|          |          |          |\r\n----------------------------------\r\n```\r\n\r\n#### no-gutters\r\n`.row`上带有`margin-left: -15px;margin-right: -15px;`属性，你可以在`.row`上上定义`.no-gutters`属性，从而消除这个属性，使页面不会额外宽出`30px`，即`<div class=\"row no-gutters\"...`\r\n```php\r\n\$content->row(function (Row \$row) {\r\n\t// 启用 no-gutters\r\n\t\$row->noGutters();\r\n\r\n\t\$row->column(9, function (Column \$column) {\r\n\t\t\$column->row(\$this->card(['col-md-12', 20], '#4DB6AC'));\r\n\t\t\r\n\t\t\$column->row(function (Row \$row) {\r\n\t\t\t// 启用 no-gutters\r\n\t\t\t\$row->noGutters();\r\n\r\n\t\t\t\$row->column(4, \$this->card(['col-md-4', 30], '#80CBC4'));\r\n\t\t\t\$row->column(4, \$this->card(['col-md-4', 30], '#4DB6AC'));\r\n\t\t\t\$row->column(4, function (Column \$column) {\r\n\t\t\t\t\$column->row(function (Row \$row) {\r\n\t\t\t\t\t// 启用 no-gutters\r\n\t\t\t\t\t\$row->noGutters();\r\n\r\n\t\t\t\t\t\$row->column(6, \$this->card(['col-md-6', 30], '#26A69A'));\r\n\t\t\t\t\t\$row->column(6, \$this->card(['col-md-6', 30], '#26A69A'));\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n});\r\n```\r\n\r\n效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/38f74414d169355de9997e59459b333e667b77d19da98.jpg)\r\n\r\n\r\n\r\n\r\n### 构建无菜单栏页面 (full)\r\n\r\n通过以上方法构建的页面默认是带有左边菜单栏和顶部导航栏的，\r\n但有时候我们会需要构建一个没有菜单栏和顶部导航栏的完整页面，如登陆页面，或需要在IFRAME中加载的页面等等。\r\n\r\n\r\n这时候就可以用 `Content::full` 这个方法了，调用了此方法后渲染出来的页面是不带菜单栏和顶部导航栏的，并且还可以使用 `Dcat Admin` 中的所有的功能和组件的，可以显著地提高效率。\r\n\r\n下面将通过登录页的实现来演示此功能的用法\r\n\r\n控制器\r\n```php\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass AuthController extends Controller\r\n{\r\n    public function getLogin(Content \$content)\r\n    {\r\n        if (\$this->guard()->check()) {\r\n            return redirect(\$this->redirectPath());\r\n        }\r\n\t\t// 使用full方法构建登陆页面\r\n        return \$content->full()->body(view(\$this->view));\r\n    }\r\n\t\r\n\t...\r\n}\t\r\n```\r\n\r\n下面是登陆功能的模板内容，因为控制器中使用了`Content::full`方法构建页面，所以不需要在模板中写`head`，也不需要关心引入哪些静态资源，只需写当前页面的HTML即可，并且还可以使用`Dcat Admin`中的所有功能，如下面用到的表单提交功能。\r\n\r\n```html\r\n<style>\r\n    html body {background: #fff;}\r\n</style>\r\n\r\n<link rel=\"stylesheet\" href=\"{{ admin_asset('@admin/css/pages/authentication.css') }}\">\r\n\r\n<section class=\"row flexbox-container\">\r\n\t<!-- 这里是你的登陆页面HTML代码 -->\r\n\t...\r\n</section>\r\n\r\n<script>\r\nDcat.ready(function () {\r\n    // ajax表单提交\r\n    \$('#login-form').form({\r\n        validate: true,\r\n    });\r\n});\r\n</script>\r\n```\r\n\r\n这个登陆页面使用了`ajax`表单提交功能，并且附带了按钮`loading`效果，比原来的登陆功能用户体验更好，大家可以[点这里体验](http://103.39.211.179:8080/admin/auth/login)。\r\n\r\n\r\n### 事件\r\n\r\n系统会在`Dcat\\Admin\\Layout\\Content`类被实例化时和`render()`方法被调用时触发以下两个事件，开发者可以在这两个事件中改变或添加一些行为。\r\n\r\n#### 实例化 (resolving)\r\n通过`Content::resolving`方法设置的回调函数会在`Dcat\\Admin\\Layout\\Content`类被实例化时触发；\r\n\r\n```php\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nContent::resolving(function (Content \$content) {\r\n    \r\n    \$content->view('app.admin.content');\r\n    \r\n});\r\n```\r\n\r\n#### 构建页面 (composing)\r\n通过`Content::composing`方法设置的回调函数会在`Dcat\\Admin\\Layout\\Content::render`方法被调用时触发；\r\n\r\n```php\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nContent::composing(function (Content \$content) {\r\n    \r\n    \$content->view('app.admin.content');\r\n    \r\n});\r\n```\r\n\r\n#### 构建完成 (composed)\r\n通过`Content::composed`方法设置的回调函数会在所有通过`Content::row`或`Content::body`方法设置的内容都构建完毕后触发。\r\n\r\n\r\n```php\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass IndexController\r\n{\r\n\tpublic function index(Content \$content)\r\n\t{\r\n\t\tContent::composed(function (Content \$content) {\r\n            // Grid已执行render方法\r\n            \r\n        });\r\n        \r\n        return \$content->body(function (\$row) {\r\n        \t\$grid = new Grid(...);\r\n        \t\r\n        \t...\r\n        \t\r\n        \t\$row->column(12, \$grid);\r\n        });\r\n\t}\r\n}\r\n```\r\n\r\n<a name=\"admincontroller\"></a>\r\n## AdminController\r\n\r\n通过上面页面布局的相关内容的学习，我们明白了`Dcat Admin`的页面组成构建的方法，那么一个增删改查功能究竟是怎么实现的呢？我们可以看到一个由代码生成器生成的增删改查控制器代码大概如下所示\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\User;\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Show;\r\nuse Dcat\\Admin\\Http\\Controllers\\AdminController;\r\n\r\nclass UserController extends AdminController\r\n{\r\n    // 数据表格\r\n    protected function grid()\r\n    {\r\n        return Grid::make(new User(), function (Grid \$grid) {\r\n            ...\r\n        });\r\n    }\r\n\r\n    // 数据详情\r\n    protected function detail(\$id)\r\n    {\r\n        return Show::make(\$id, new User(), function (Show \$show) {\r\n            ...\r\n        });\r\n    }\r\n\r\n    // 表单\r\n    protected function form()\r\n    {\r\n        return Form::make(new User(), function (Form \$form) {\r\n            ...\r\n        });\r\n    }\r\n}\r\n```\r\n上面的代码主要包含了`grid`、`detail`和`form`，从这些代码中，我们并没有办法改变一个页面的布局，那这个页面究竟是怎么构建的？我们又如何更改页面的布局？我们不妨打开`AdminController`看一看\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Dcat\\Admin\\Controllers;\r\n\r\nuse Dcat\\Admin\\Layout\\Content;\r\nuse Illuminate\\Routing\\Controller;\r\n\r\nclass AdminController extends Controller\r\n{\r\n    // 页面标题\r\n    protected \$title;\r\n\r\n    // 页面描述信息\r\n    protected \$description = [\r\n        //        'index'  => 'Index',\r\n        //        'show'   => 'Show',\r\n        //        'edit'   => 'Edit',\r\n        //        'create' => 'Create',\r\n    ];\r\n\r\n    // 指定语言包名称，默认与当前控制器名称相对应\r\n    protected \$translation;\r\n\r\n    // 返回页面标题\r\n    protected function title()\r\n    {\r\n        return \$this->title ?: admin_trans_label();\r\n    }\r\n\r\n    // 返回描述信息\r\n    protected function description()\r\n    {\r\n        return \$this->description;\r\n    }\r\n\r\n    // 列表页\r\n    public function index(Content \$content)\r\n    {\r\n        return \$content\r\n            ->title(\$this->title())\r\n            ->description(\$this->description()['index'] ?? trans('admin.list'))\r\n            ->body(\$this->grid());\r\n    }\r\n\r\n    // 详情页\r\n    public function show(\$id, Content \$content)\r\n    {\r\n        return \$content\r\n            ->title(\$this->title())\r\n            ->description(\$this->description()['show'] ?? trans('admin.show'))\r\n            ->body(\$this->detail(\$id));\r\n    }\r\n\r\n    // 编辑页\r\n    public function edit(\$id, Content \$content)\r\n    {\r\n        return \$content\r\n            ->title(\$this->title())\r\n            ->description(\$this->description()['edit'] ?? trans('admin.edit'))\r\n            ->body(\$this->form()->edit(\$id));\r\n    }\r\n\r\n    // 新增页\r\n    public function create(Content \$content)\r\n    {\r\n        return \$content\r\n            ->title(\$this->title())\r\n            ->description(\$this->description()['create'] ?? trans('admin.create'))\r\n            ->body(\$this->form());\r\n    }\r\n\r\n    // 修改接口\r\n    public function update(\$id)\r\n    {\r\n        return \$this->form()->update(\$id);\r\n    }\r\n\r\n    // 新增接口\r\n    public function store()\r\n    {\r\n        return \$this->form()->store();\r\n    }\r\n\r\n    // 删除/批量删除接口\r\n    public function destroy(\$id)\r\n    {\r\n        return \$this->form()->destroy(\$id);\r\n    }\r\n}\r\n```\r\n\r\n现在是不是就可以明白整个页面的组成部分了呢？其实系统内很多代码都是见名知意、简单易懂的，很多时候我们只需要通过阅读代码就可以知道用法。\r\n例如我们要更改页面标题，通过阅读这段代码，就可以得知可以通过重写`title`方法或更改翻译文件的方式实现，是不是非常简单？\r\n\r\n下面我们通过实现一个数据表格 + 数据统计卡片的列表页面，来演示一下更改页面布局的实际应用\r\n\r\n```php\r\nuse App\\Admin\\Metrics\\Examples\\NewDevices;\r\nuse App\\Admin\\Metrics\\Examples\\NewUsers;\r\nuse App\\Admin\\Metrics\\Examples\\TotalUsers;\r\nuse Dcat\\Admin\\Layout\\Content;\r\nuse Dcat\\Admin\\Layout\\Row;\r\n\r\npublic function index(Content \$content)\r\n{\r\n    return \$content\r\n        ->title(\$this->title())\r\n        ->description(\$this->description()['index'] ?? trans('admin.list'))\r\n        ->body(function (Row \$row) {\r\n            \$row->column(4, new TotalUsers());\r\n            \$row->column(4, new NewUsers());\r\n            \$row->column(4, new NewDevices());\r\n        })\r\n        ->body(\$this->grid());\r\n}\r\n```\r\n\r\n实现效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/20385a752995bac857316845ed48df58667b77ec12c51.png)\r\n\r\n\r\n<a name=\"bootstrap-styles\"></a>\r\n## Bootstrap4公共样式\r\n\r\n`Dcat Admin`采用`bootstrap4`的栅格系统对页面进行布局，既简单又强大，开始开发前需要对此有所了解，另外`bootsrap4`提供了非常多非常有用的[公共样式](https://getbootstrap.net/docs/utilities/borders/)，对编写页面组件非常有帮助，能显著提高开发效率，建议编写组件前先查阅一遍文档，以下是推荐学习的样式列表：\r\n\r\n- [栅格布局](https://getbootstrap.net/docs/layout/grid/)\r\n- [Display显示属性](https://getbootstrap.net/docs/utilities/display/) 通过我们的显示实用程序，可以快速、有效地切换组件的显示值和更多，包括对一些更常见的值的支持，此样式列表对响应式布局非常有帮助。\r\n- [flex弹性布局](https://getbootstrap.net/docs/utilities/flex/) 引入新的Flex弹性布局，可以实现通过一整套响应灵活的实用程序，快速管理栅格的列、导航、组件等的布局、对齐和大小。通过进一度的定义CSS，还可以实现更复杂的展示样式。\r\n- [颜色(Color)](https://getbootstrap.net/docs/utilities/colors/) 通过颜色传达意义、表达不同的模块，这有一系列的定义方法，包括支持链接、悬停、选中等状态相关的的样式集。\r\n- [Float浮动属性](https://getbootstrap.net/docs/utilities/float/) 使用我们的响应式float浮动通用样式，能在任何设备断点（浏览器尺寸）上切换浮动。                             \r\n- [规格(sizi)](https://getbootstrap.net/docs/utilities/sizing/) 使用系统宽度和高度样式，轻松地定义任何元素的宽或高（相对于其父级）\r\n- [间隔(spacing)](https://getbootstrap.net/docs/utilities/spacing/) 内置了各种的快速缩进、隔离、填充等间距处理工具，响应余量和填充实用程序类来修改元素的外观。\r\n- [文本处理](https://getbootstrap.net/docs/utilities/text/) 用于控制文本的对齐、组合、字重等示例以及使用文档。\r\n- [垂直对齐(vertical align)](https://getbootstrap.net/docs/utilities/vertical-align/) 轻松更改内联、内嵌块、内联表和表格单元格元素的垂直对齐方式。\r\n\r\n\r\n### 内置样式\r\n除了前面提到的[`bootstrap4`公共样式](https://getbootstrap.net/docs/utilities/borders/)，系统还内置了以下常用样式：\r\n\r\n\r\n#### 颜色\r\n请参考[颜色表样式](https://learnku.com/docs/dcat-admin/2.x/theme-and-color/8085#f8e56e)\r\n\r\n#### 阴影\r\n<style>\r\n\t.shadow-item {\r\n\t\twidth:120px;height:100px;line-height:100px;margin:5px 10px;display:inline-block;text-align:center;\r\n\t}\r\n</style>\r\n\r\n<div class=\"shadow-item\" style=\"box-shadow:0 2px 4px 0 rgba(0,0,0,.08);\">\r\n\t<code>.shadow</code>\r\n</div>\r\n<div class=\"shadow-item\" style=\"box-shadow:0 3px 1px -2px rgba(0,0,0,.05), 0 2px 2px 0 rgba(0,0,0,.05), 0 1px 5px 1px rgba(0,0,0,.05);\">\r\n\t<code>.shadow-100</code>\r\n</div>\r\n<div class=\"shadow-item\" style=\"box-shadow:0 3px 1px -2px rgba(0,0,0,.1), 0 2px 2px 0 rgba(0,0,0,.1), 0 1px 5px 1px rgba(0,0,0,.1)\">\r\n\t<code>.shadow-200</code>\r\n</div>", 'order' => 6, 'created_at' => "2024-06-26 10:07:45", 'updated_at' => "2024-06-26 10:07:45", 'slug' => "required-reading-before-development"],
            ['id' => 7, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "主题与颜色", 'content' => "# 主题与颜色\r\n\r\n### 切换主题\r\n\r\n`Dcat Admin`支持主题切换功能，目前内置了三种主题色：`blue`、`blue-light`、`green`，可通过配置参数`admin.layout.color`进行切换。\r\n\r\n\r\n打开配置文件`config/admin.php`\r\n```php\r\n     'layout' => [\r\n         'color' => 'blue',\r\n         \r\n         ...\r\n     ],\r\n     \r\n     ...\r\n```\r\n\r\n部分主题色预览\r\n\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/20385a752995bac857316845ed48df58667b78eab5e6b.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/54ca38f9c7c6b37360ebb6fd870bf58c667b78aa6c4c3.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/373c01a5bf652077f7f318a438274a16667b78b7a0c06.png)\r\n\r\n<a name=\"custom\"></a>\r\n### 自定义主题配色\r\n\r\n>  需要注意的是，如果自定义了主题之后，每次更新新版本，都需要重新编译一次你的自定义主题！！！\r\n\r\n开发者可以通过这个功能随意添加自己想要的主题配色，在使用这个功能之前需要先安装[NodeJs](http://nodejs.cn/)，没安装的同学前往[http://nodejs.cn/](http://nodejs.cn/)下载安装即可。\r\n\r\n安装完`NodeJs`之后可打开命令行运行`npm -v`测试一下是否安装成功。\r\n\r\n```bash\r\nnpm -v\r\n```\r\n\r\n如果正常返回版本号，则说明已安装成功，同时建议使用淘宝镜像\r\n```bash\r\nnpm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n然后运行以下命令编译自定义主题的文件，只需输入主题的名称和主题颜色代码(`十六进制`)即可。\r\n这里我们以生成一个`orange`主题为例\r\n\r\n> 这个命令第一次运行时需要较长时间，请耐心等待。如果运行失败，请尝试给`vendor`目录写权限。\r\n\r\n```bash\r\nphp artisan admin:minify orange --color fbbd08 --publish\r\n```\r\n\r\n上面的命令的意思是生成一个`orange`主题，颜色代码为`#fbbd08`，并且生成之后自动发布静态资源。如果编译成功，命令行会输出以下内容\r\n```bash\r\n...\r\n\r\n DONE  Compiled successfully in 48001ms8:24:28 PM\r\n\r\n\r\n                                              Asset      Size  Chunks\r\n               Chunk Names\r\n               /resources/dist/adminlte/adminlte.js  29.7 KiB       0  [emitted]\r\n               /resources/dist/adminlte/adminlte\r\n           /resources/dist/adminlte/adminlte.js.map  87.8 KiB       0  [emitted]\r\n [dev]         /resources/dist/adminlte/adminlte\r\n               /resources/dist/dcat/extra/action.js   3.7 KiB       1  [emitted]\r\n               /resources/dist/dcat/extra/action\r\n           /resources/dist/dcat/extra/action.js.map  12.9 KiB       1  [emitted]\r\n [dev]         /resources/dist/dcat/extra/action\r\n          /resources/dist/dcat/extra/grid-extend.js  4.87 KiB       2  [emitted]\r\n               /resources/dist/dcat/extra/grid-extend\r\n      /resources/dist/dcat/extra/grid-extend.js.map  21.7 KiB       2  [emitted]\r\n [dev]         /resources/dist/dcat/extra/grid-extend\r\n    /resources/dist/dcat/extra/resource-selector.js   5.8 KiB       3  [emitted]\r\n               /resources/dist/dcat/extra/resource-selector\r\n/resources/dist/dcat/extra/resource-selector.js.map    24 KiB       3  [emitted]\r\n [dev]         /resources/dist/dcat/extra/resource-selector\r\n               /resources/dist/dcat/extra/upload.js  17.2 KiB       4  [emitted]\r\n               /resources/dist/dcat/extra/upload\r\n           /resources/dist/dcat/extra/upload.js.map  66.8 KiB       4  [emitted]\r\n [dev]         /resources/dist/dcat/extra/upload\r\n                /resources/dist/dcat/js/dcat-app.js  88.8 KiB       5  [emitted]\r\n               /resources/dist/dcat/js/dcat-app\r\n            /resources/dist/dcat/js/dcat-app.js.map   164 KiB       5  [emitted]\r\n [dev]         /resources/dist/dcat/js/dcat-app\r\n        resources/dist/adminlte/adminlte-orange.css   656 KiB       0  [emitted]\r\n        [big]  /resources/dist/adminlte/adminlte\r\n        resources/dist/dcat/css/dcat-app-orange.css    43 KiB       0  [emitted]\r\n               /resources/dist/adminlte/adminlte\r\n      resources/dist/dcat/extra/markdown-orange.css  1.72 KiB       0  [emitted]\r\n               /resources/dist/adminlte/adminlte\r\n          resources/dist/dcat/extra/step-orange.css  8.56 KiB       0  [emitted]\r\n               /resources/dist/adminlte/adminlte\r\n        resources/dist/dcat/extra/upload-orange.css  6.42 KiB       0  [emitted]\r\n               /resources/dist/adminlte/adminlte\r\n               \r\n\r\nCopied Directory [\\dcat-admin\\resources\\dist] To [\\public\\vendors\\dcat-admin]\r\nPublishing complete.\r\nCompiled views cleared!\r\n```\r\n\r\n主题文件编译成功之后，还需要在`app/Admin/bootstrap.php`中加入以下代码\r\n\r\n```php\r\nDcat\\Admin\\Color::extend('orange', [\r\n    'primary'        => '#fbbd08',\r\n    'primary-darker' => '#fbbd08',\r\n    'link'           => '#fbbd08',\r\n]);\r\n```\r\n\r\n最后把你的配置参数`admin.layout.color`的值设置为`orange`就行了。\r\n\r\n\r\n<a name=\"darkmode\"></a>\r\n### 深色模式\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/4fea5bd49618faa6a48c73f21ff85600667b790278705.png)\r\n\r\n#### 启用切换按钮\r\n\r\n通过配置参数 `admin.layout.dark_mode_switch` 可以启用或禁用深色模式切换开关。开启后会在页面顶部导航栏中增加一个开关按钮，点击可以切换深色和明亮模式，并且会把状态保存在`localStorage`中。\r\n\r\n```php\r\n     'layout' => [\r\n         'dark_mode_switch' => true,\r\n         \r\n         ...\r\n     ],\r\n     \r\n     ...\r\n```\r\n\r\n效果如下\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/0e82e0e09cfe86006130d0a31fdeff1f667b791b0bc92.gif)\r\n\r\n\r\n#### 默认深色\r\n\r\n打开配置文件`config/admin.php`，写入\r\n```php\r\n     'layout' => [\r\n         'body_class' => 'dark-mode',\r\n         \r\n         ...\r\n     ],\r\n     \r\n     ...\r\n```\r\n\r\n\r\n<a name=\"sidebar\"></a>\r\n### 菜单样式\r\n#### 顶部横向 (Horizontal)\r\n\r\n设置配置参数 `admin.layout.horizontal_menu` 的值为 `true` 开启此功能，效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/3c1808e07cd41673af890cb15d442cbc667b79367b127.png)\r\n\r\n#### sidebar-separate\r\n\r\n通过配置参数 `admin.layout.sidebar_style` 可以配置菜单样式（如果配置文件中不存在这个参数则可以手动添加），支持三个值 `light`、`primary`、`dark`，默认为 `light`\r\n\r\n>  `sidebar_dark`参数即将被废弃！`sidebar_style`参数会覆盖`sidebar_dark`参数，只有当`sidebar_style`不存在时`sidebar_dark`才会生效！！！\r\n\r\n```php\r\n     'layout' => [\r\n     \t // 支持 light、primary、dark\r\n         'sidebar_style' => 'light',\r\n         \r\n         ...\r\n     ],\r\n     \r\n     ...\r\n```\r\n\r\n`light` 效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/710eadef207acd31d8891e4b3207af54667b795952f51.jpeg)\r\n\r\n`primary` 效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f4b4da6a3cffe61dab20fc8b19b851ad667b797c7cfb9.jpg)\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/15a4ec70fdad53b18d4c9db253ed56e4667b7992e8077.jpg)\r\n\r\n### PHP颜色管理\r\n\r\n作为日常开发我们离不开颜色的使用，`Dcat Admin`内置了颜色管理模块，此功能可以很方便的配合主题切换功能，让页面颜色与主题色相适应！\r\n\r\n通过 `Dcat\\Admin\\Admin::color()` 这个服务可以很轻松的获取常用颜色（可参考[颜色表与样式](#颜色表与样式)）。\r\n\r\n#### 获取内置颜色\r\n\r\n通过`Color::get`或魔术方法可以获取颜色代码，当通过`Color::get`获取的颜色不存在时，会返回参数的原始值。\r\n\r\n```php\r\n<?php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n// get 方法获取颜色\r\necho Admin::color()->get('primary'); // 输出 #5c6bc6\r\n\r\n// 通过魔术方法获取颜色\r\necho Admin::color()->primary(); // 输出 #5c6bc6\r\n``` \r\n\r\n#### 颜色淡化\r\n\r\n通过`Color::lighten`方法或魔术方法可以获取淡化后的颜色的16进制颜色代码。\r\n\r\n`Color::lighten`方法接收两个参数：\r\n\r\n- `\$name` `string` 颜色别名\r\n- `\$amt` `int` 颜色偏差值，值越大颜色越`淡`\r\n\r\n```php\r\necho Admin::color()->lighten('primary', 10); // 输出 #6675d0\r\n// 也可以这样使用，注意这里的参数要传负数\r\necho Admin::color()->primary(-10); // 输出 #6675d0\r\n```\r\n\r\n也支持直接传颜色代码\r\n\r\n```php\r\necho Admin::color()->lighten('#5c6bc6', 10); // 输出 #6675d0\r\n```\r\n\r\n#### 颜色深化\r\n\r\n通过`Color::darken`方法或魔术方法可以获取深化后的颜色的16进制颜色代码。\r\n\r\n`Color::darken`方法接收两个参数：\r\n\r\n- `\$name` `string` 颜色别名\r\n- `\$amt` `int` 颜色偏差值，值越大颜色越`深`\r\n\r\n```php\r\necho Admin::color()->darken('primary', 10); // 输出 #5261bc\r\n// 也可以这样使用\r\necho Admin::color()->primary(10); // 输出 #5261bc\r\n```\r\n\r\n也支持直接传颜色代码\r\n\r\n```php\r\necho Admin::color()->darken('#5c6bc6', 10); // 输出 #5261bc\r\n```\r\n\r\n#### 颜色透明化\r\n通过`Color::alpha`方法可以设置颜色的透明度。\r\n\r\n`Color::alpha`方法接收两个参数：\r\n\r\n- `\$name` `string` 颜色别名\r\n- `\$alpha` `float` 透明度，`0 ~ 1`之间的值，值越小透明度越高\r\n\r\n```php\r\necho Admin::color()->alpha('primary', 0.1); // 输出 rgba(92, 107, 198, 0.1)\r\n```\r\n\r\n也支持直接传颜色代码\r\n\r\n```php\r\necho Admin::color()->alpha('5c6bc6', 0.1); // 输出 rgba(92, 107, 198, 0.1)\r\n```\r\n\r\n#### 获取所有内置颜色\r\n\r\n通过`Color::all`方法可以获取所有内置颜色的16进制代码，此方法返回一个数组\r\n\r\n```php\r\n\$allColors = Admin::color()->all();\r\n```\r\n\r\n### JS颜色管理\r\n\r\n`JS`模块中同样也包含颜色管理功能，通过`Dcat.color`对象可以像在PHP代码中一样管理颜色。\r\n\r\n#### 获取内置颜色\r\n\r\n在`JS`代码中可以通过以下三种方式获取颜色代码\r\n```php\r\nAdmin::script(\r\n<<<JS\r\n\t// 方式1\r\n\tvar primary = Dcat.color.primary;\r\n\t\r\n\t// 方式2\r\n\tvar primary = Dcat.color['primary'];\r\n\t\r\n\t// 方式3\r\n\tvar primary = Dcat.color.get('primary');\r\n\t\r\n\tconsole.log(primary);  // 打印 #5c6bc6\r\nJS\r\n);\r\n```\r\n\r\n#### 颜色淡化\r\n\r\n通过`Dcat.color.lighten`方法或魔术方法可以获取淡化后的颜色的16进制颜色代码。\r\n\r\n`color.lighten`方法接收两个参数：\r\n\r\n- `name` `string` 颜色别名\r\n- `amt` `int` 颜色偏差值，值越大颜色越`淡`\r\n\r\n```php\r\nAdmin::script(\r\n    <<<JS\r\n    var primary = Dcat.color.lighten('primary', 10)\r\n    \r\n    console.log(primary); // 输出 #6675d0\r\nJS    \r\n);\r\n```\r\n\r\n也支持直接传颜色代码\r\n\r\n```js\r\nvar primary = Dcat.color.lighten('5c6bc6', 10);\r\nconsole.log(primary); // 输出 #6675d0\r\n```\r\n\r\n#### 颜色深化\r\n\r\n通过`Dcat.color.darken`方法或魔术方法可以获取深化后的颜色的16进制颜色代码。\r\n\r\n`color.darken`方法接收两个参数：\r\n\r\n- `name` `string` 颜色别名\r\n- `amt` `int` 颜色偏差值，值越大颜色越`深`\r\n\r\n```php\r\nAdmin::script(\r\n    <<<JS\r\n    var primary = Dcat.color.darken('primary', 10)\r\n    \r\n    console.log(primary); // 输出 #5261bc\r\nJS    \r\n);\r\n```\r\n\r\n也支持直接传颜色代码\r\n\r\n```php\r\nvar primary = Dcat.color.darken('5c6bc6', 10)\r\n\r\nconsole.log(primary); // 输出 #5261bc\r\n```\r\n\r\n#### 颜色透明化\r\n通过`Dcat.color.alpha`方法可以设置颜色的透明度。\r\n\r\n`color.alpha`方法接收两个参数：\r\n\r\n- `\$name` `string` 颜色别名\r\n- `\$alpha` `float` 透明度，`0 ~ 1`之间的值，值越小透明度越高\r\n\r\n```php\r\nAdmin::script(\r\n    <<<JS \r\n    var primary = Dcat.color.alpha('primary', 0.1) \r\n \r\n    console.log(primary); // 输出 rgba(92, 107, 198, 0.1)\r\nJS    \r\n);\r\n```\r\n\r\n也支持直接传颜色代码\r\n\r\n```php\r\nAdmin::script(\r\n    <<<JS\r\n    var primary = Dcat.color.alpha('5c6bc6', 0.1)\r\n    \r\n    console.log(primary); // 输出 rgba(92, 107, 198, 0.1)\r\nJS    \r\n);\r\n```\r\n\r\n#### 获取所有内置颜色\r\n\r\n通过`Dcat.color.all`方法可以获取所有内置颜色的16进制代码，此方法返回一个键值对对象。\r\n\r\n```js\r\nvar allColors = Dcat.color.all();\r\n```\r\n\r\n<a name=\"颜色表与样式\"></a>\r\n### 颜色表与样式\r\n\r\n`Dcat Admin`前端是采用`bootstrap4`编写的，因此首先要学习[Bootstrap4 颜色(Color)样式](https://getbootstrap.net/docs/utilities/colors/)的使用，这里不再赘述相关内容。\r\n\r\n以下是`Dcat Admin`中常用颜色样式表，其中以`.bg-*` 开头的样式是背景色，以`.text-` 开头的样式是文本颜色\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/aeb28f4e80111656c1c1f1a6c5923e15667b79b05c4a3.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f5fba4a69141e530366f7fb750e4396f667b79bf35858.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/089590d4a1a0e337e4c49ba924e27873667b79cbf0dc7.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/46f6334fcbfc3e5fd0cdd904e36cf2c7667b79dce8b20.png)", 'order' => 7, 'created_at' => "2024-06-26 10:16:18", 'updated_at' => "2024-06-26 10:16:18", 'slug' => "theme-and-color"],
            ['id' => 8, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "静态资源", 'content' => "# 静态资源加载\r\n\r\n`Dcat Admin`支持了`js`脚本按需加载的功能，开发者只需在控制器中或其他任意位置（包括`view`）中引入需要用到的`js`组件即可，而无需在项目初始化时引入所有的`js`组件。\r\n\r\n\r\n### 更改静态资源域名\r\n\r\n打开配置文件`config/admin.php`，找到`assets_server`参数进行更改即可；也可以在`.env`中加上\r\n\r\n```dotenv\r\nADMIN_ASSETS_SERVER=http://xxx.com\r\n```\r\n\r\n### 注册路径别名\r\n\r\n打开`app/Admin/bootstrap.php`，然后加入以下代码\r\n\r\n```php\r\nAdmin::asset()->alias('@my-name1', 'assets/admin1');\r\nAdmin::asset()->alias('@my-name2', 'assets/admin2');\r\n\r\n// 也可以批量注册\r\nAdmin::asset()->alias([\r\n\t'@my-name1' => 'assets/admin1',\r\n\t'@my-name2' => 'assets/admin2',\r\n]);\r\n```\r\n\r\n使用别名\r\n\r\n```php\r\nAdmin::js('@my-name1/index.js');\r\nAdmin::css('@my-name1/index.css');\r\n```\r\n\r\n### 注册组件\r\n\r\n当某个组件的`js`和`css`文件比较多的话，我们可以把这些静态资源文件统一注册成一个组件，这样使用的时候会更方便。打开`app/Admin/bootstrap.php`，然后加入以下代码\r\n\r\n```php\r\nAdmin::asset()->alias('@editor-md', [\r\n\t'js' => [\r\n\t\t// 支持使用路径别名\r\n\t\t'@admin/dcat/plugins/editor-md/lib/raphael.min.js',\r\n\t\t'@admin/dcat/plugins/editor-md/lib/marked.min.js',\r\n\t\t'@admin/dcat/plugins/editor-md/lib/prettify.min.js',\r\n\t\t'@admin/dcat/plugins/editor-md/lib/jquery.flowchart.min.js',\r\n\t\t'@admin/dcat/plugins/editor-md/editormd.min.js',\r\n\t],\r\n\t'css' => [\r\n\t\t'@admin/dcat/plugins/editor-md/css/editormd.preview.min.css',\r\n\t\t'@admin/dcat/extra/markdown.css',\r\n\t],\r\n]);\r\n```\r\n\r\n使用\r\n\r\n```php\r\nAdmin::requireAssets(['@editor-md']);\r\n```\r\n\r\n如果你只需要加载这个组件的`js`或`css`，并不想加载所有文件，那么可以用以下方法\r\n\r\n```php\r\n// 只加载js文件\r\nAdmin::js('@editor-md');\r\n\r\n// 只加载css文件\r\nAdmin::css('@editor-md');\r\n```\r\n\r\n使用动态参数\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n// 注册前端组件别名\r\n// {lang} 为动态参数\r\nAdmin::asset()->alias('@test', [\r\n    'js' => ['/vendor/test/js/{lang}.min.js'],\r\n]);\r\n\r\n// {lang} 会被替换为 zh_CN\r\nAdmin::requireAssets('@test', ['lang' => 'zh_CN']);\r\n// 也可以这样使用\r\nAdmin::requireAssets('@test?lang=zh_CN');\r\n```\r\n\r\n\r\n### 加载js脚本\r\n\r\n`Admin::js`方法可以引入`js`脚本，使用如下：\r\n```php\r\nclass UserController extend Controller\r\n{\r\n    public function index()\r\n    {\r\n        Admin::js('/assets/js/index.js');\r\n        \r\n        Admin::js([\r\n            '/assets/js/index2.js'\r\n        ]);\r\n    }\r\n}\r\n```\r\n\r\n### 加载css脚本\r\n\r\n`Admin::css`方法可以引入`css`脚本，使用如下：\r\n```php\r\nclass UserController extend Controller\r\n{\r\n    public function index()\r\n    {\r\n        Admin::css('/assets/css/index.css');\r\n        \r\n        Admin::css([\r\n            '/assets/css/index2.css'\r\n        ]);\r\n    }\r\n}\r\n```\r\n\r\n### 动态添加js代码\r\n\r\n`Admin::script`方法可以动态添加`js`代码，使用如下：\r\n```php\r\n    public function index()\r\n    {\r\n        Admin::script(\r\n            <<<JS\r\n    console.log('Hello world!');\r\nJS            \r\n        );\r\n    }\r\n```\r\n\r\n### 动态添加css代码\r\n\r\n`Admin::style`方法可以动态添加`css`代码，使用如下：\r\n```php\r\n    public function index()\r\n    {\r\n        Admin::style(\r\n            <<<CSS\r\n    body {\r\n        color: #333;\r\n    }\r\nCSS            \r\n        );\r\n    }\r\n```\r\n\r\n### 在模板中引入静态资源\r\n在模板中手动引入静态资源需要使用`admin_asset`函数：\r\n\r\n```html\r\n// 引入css\r\n<link rel=\"stylesheet\" href=\"{{ admin_asset(\"vendor/dcat-admin/dcat-admin/main.min.css\") }}\">\r\n\r\n// 引入js\r\n<script src=\"{{ admin_asset('vendor/dcat-admin/dcat-admin/main.min.js')}}\"></script>\r\n```\r\n\r\n### 在模板中添加js代码\r\n\r\n要在模板中添加的`js`代码需要放在`Dcat.ready`方法内执行，这样才能保证你的`js`代码在所有`js`脚本加载完成之后执行。\r\n\r\n```html\r\n<script>\r\nDcat.ready(function () {\r\n   console.log('所有js都加载完成了'); \r\n});\r\n</script>\r\n```", 'order' => 8, 'created_at' => "2024-06-26 10:16:50", 'updated_at' => "2024-06-26 10:16:50", 'slug' => "static-resources"],
            ['id' => 9, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "视图与自定义页面", 'content' => "# 视图与自定义页面\r\n\r\n## 视图\r\n\r\n\r\n在`Dcat Admin`中我们可以用`admin_view`函数渲染视图，这个功能借鉴了`vue`的设计思想，可以把`HTML`、`CSS`和`JS`代码写在同一个模板文件中，让代码分层更清晰更简洁易读，如\r\n\r\n```html\r\n<div class=\"my-class\">...</div>\r\n\r\n<style>\r\n\t.my-class {\r\n\t\tcolor: blue;\r\n\t}\r\n</style>\r\n\r\n<script require=\"@test1,@test2\" init=\".my-class\">\r\n\t\$this.css({background: 'red'})\r\n</script>\r\n```\r\n\r\n在`php`中渲染这个视图\r\n```php\r\npublic function index(Content \$content)\r\n{\r\n\treturn \$content->body(admin_view('...'));\r\n}\r\n```\r\n\r\n#### 示例解析 \r\n\r\n上面示例中的代码，其实相当于下面的代码\r\n\r\n```html\r\n<div class=\"my-class\">...</div>\r\n```\r\n\r\n```php\r\npublic function index(Content \$content)\r\n{\r\n\tadmin_require_assets(['@test1', '@test2']);\r\n\t\r\n\tadmin_style('.my-class {\r\n\t\tcolor: blue;\r\n\t}');\r\n\t\r\n\tadmin_script(\r\n\t\t<<<JS\r\nDcat.init('.my-class', function (\\\$this, id) {\r\n\t\\\$this.css({background: 'red'})\r\n});\r\nJS\r\n\t);\r\n\r\n\treturn \$content->body(view('...'));\r\n}\r\n```\r\n\r\n很显然，使用`admin_view`渲染视图会让你的代码更简洁易读，关于`Dcat.init`以及`script`标签中的`init`和`require`属性的用法，请参考文档[静态资源](https://learnku.com/docs/dcat-admin/2.x/static-resources/9720)以及[动态监听元素生成 (init)](https://learnku.com/docs/dcat-admin/2.x/js-component/8087)章节。\r\n\r\n## 自定义页面\r\n\r\n在`Dcat Admin`中构建自定义页面非常简单，可以参考如下两个例子\r\n\r\n\r\n### 示例1\r\n\r\n> {tip} `Dcat Admin`构建的是一个单页应用，加载的`JS`脚本只会执行一次，所以初始化操作不能直接放在`JS`脚本中，应该使用`Admin::script`方法载入。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Pages;\r\n\r\nuse Illuminate\\Contracts\\Support\\Renderable;\r\n\r\nclass MyPage implements Renderable\r\n{\r\n\tpublic function render()\r\n\t{\r\n\t\treturn admin_view('admin.pages.my-page');\r\n\t}\r\n}\r\n```\r\n\r\n视图`admin.pages.my-page`，注意视图代码里面不要包含`<body>`和`<html>`等标签\r\n```html\r\n<div class=\"my-class\">\r\n  <h3>自定义页面演示</h3>\r\n</div>\r\n\r\n<!-- \r\n \t引入页面所需的静态资源，这里会按需加载\r\n\tjs脚本不能直接包含初始化操作，否则页面刷新后无效 \r\n-->\r\n{!! admin_js(['xxx/js/page.min.js']) !!}\r\n{!! admin_css(['xxx/js/page.min.css']) !!}\r\n\r\n<script init=\".my-class\">\r\n    // js代码也可以放在模板里面\r\n    console.log('所有JS脚本都加载完了!!!');\r\n    \r\n    \$this.on('click', function () {\r\n        ...\r\n    });\r\n</script>\r\n```\r\n\r\n使用\r\n\r\n```php\r\npublic function index(Content \$content)\r\n{\r\n    return \$content->body(new MyPage());\r\n}\r\n```\r\n\r\n\r\n### 示例2\r\n\r\n后台的仪表盘页面`/admin`，也可以看做是一个自定义页面，代码实现如下\r\n```php\r\npublic function index(Content \$content)\r\n{\r\n    return \$content\r\n        ->header('Dashboard')\r\n        ->description('Description...')\r\n        ->body(function (Row \$row) {\r\n            \$row->column(6, function (Column \$column) {\r\n                \$column->row(Dashboard::title());\r\n                \$column->row(new Examples\\Tickets());\r\n            });\r\n\r\n            \$row->column(6, function (Column \$column) {\r\n                \$column->row(function (Row \$row) {\r\n                    \$row->column(6, new Examples\\NewUsers());\r\n                    \$row->column(6, new Examples\\NewDevices());\r\n                });\r\n\r\n                \$column->row(new Examples\\Sessions());\r\n                \$column->row(new Examples\\ProductOrders());\r\n            });\r\n        });\r\n}\r\n```", 'order' => 9, 'created_at' => "2024-06-26 10:17:30", 'updated_at' => "2024-06-26 10:17:30", 'slug' => "custom-page"],
            ['id' => 10, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "多应用(多后台)", 'content' => "# 多应用 (多后台)\r\n\r\n\r\n默认安装后使用的是单应用模式，如果你想在同一个`laravel`项目中使用多应用模式，那么可以采用多后台模式，最终项目中的目录结构大概如下\r\n\r\n```\r\napp\r\n ├──Admin\r\n │   ├── Controllers\r\n │   │   ├── ExampleController.php\r\n │   │   └── HomeController.php\r\n │   ├── Metrics\r\n │   │   └── ...\r\n │   ├── bootstrap.php\r\n │   └── routes.php\r\n │\r\n ├──Admin2\r\n │    └── ...\r\n │   \r\n │──Admin3\r\n │    └── ...\r\n ...\r\n```\r\n\r\n### 生成新应用\r\n\r\n运行命令，此命令只接受一个参数：应用名称，注意这里的应用名称请一定要使用**大驼峰风格**命名\r\n\r\n```php\r\nphp artisan admin:app NewAdmin\r\n```\r\n\r\n运行成功后你的项目中会新增一个新的应用目录`app/NewAdmin`，以及新的配置文件`config/new-admin.php`\r\n\r\n```\r\napp\r\n └──Admin\r\n    ├── Controllers\r\n    │   ├── ExampleController.php\r\n    │   └── HomeController.php\r\n    ├── Metrics\r\n    │   └── ...\r\n    ├── bootstrap.php\r\n    └── routes.php\r\nconfig\r\n └──new-admin.php\r\n```\r\n\r\n### 启用\r\n\r\n新应用生成完之后，就可以开始启用这个新应用了，打开配置文件`config/admin.php`，加入以下代码\r\n\r\n```php\r\nreturn [\r\n    ...\r\n    \r\n    'multi_app' => [\r\n        // 与新应用的配置文件名称一致\r\n        // 设置为true启用，false则是停用\r\n        'new-admin' => true,\r\n    ],\r\n\r\n];\r\n```\r\n\r\n然后就可以打开浏览器访问这个新应用了`http://localhost:8000/new-admin`。\r\n\r\n\r\n### 更改路由前缀\r\n\r\n目前只能通过路由前缀区分不同应用，如果你想要更改应用的前缀，可以打开配置文件`new-admin.php`找到`route.prefix`参数进行更改即可\r\n\r\n### 更改菜单\r\n\r\n如果你想要在新应用中展示不同的菜单，可以参考以下方法\r\n\r\n1.首先需要创建新的菜单表以及其关联表\r\n```sql\r\nCREATE TABLE `new_admin_menu` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `parent_id` int(11) NOT NULL DEFAULT '0',\r\n  `order` int(11) NOT NULL DEFAULT '0',\r\n  `title` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `icon` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\r\n  `uri` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n\r\nCREATE TABLE `new_admin_permission_menu` (\r\n  `permission_id` int(11) NOT NULL,\r\n  `menu_id` int(11) NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  UNIQUE KEY `admin_permission_menu_permission_id_menu_id_index` (`permission_id`,`menu_id`) USING BTREE\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n\r\nCREATE TABLE `new_admin_role_permissions` (\r\n  `role_id` int(11) NOT NULL,\r\n  `permission_id` int(11) NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  UNIQUE KEY `admin_role_permissions_role_id_permission_id_index` (`role_id`,`permission_id`) USING BTREE\r\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n\r\n2.创建新的菜单模型\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Dcat\\Admin\\Models\\Menu;\r\n\r\nclass NewMenu extends Menu\r\n{\r\n    protected \$table = 'new_admin_menu';\r\n}\r\n```\r\n\r\n3.打开新应用的配置文件`config/new-admin.php`，然后修改以下参数\r\n```php\r\nreturn [\r\n    ...\r\n\t\r\n\t'database' => [\r\n\r\n\t  ...\r\n\r\n\t  // 写入新的模型和菜单表\r\n\t  'menu_table' => 'new_admin_menu',\r\n\t  'menu_model' => App\\Models\\NewMenu::class,\r\n\r\n      ...\r\n\t  \r\n\t  // 新的中间表\r\n\t  'role_menu_table' => 'new_admin_role_menu',\r\n\t  'permission_menu_table' => 'new_admin_permission_menu',\r\n\t],\r\n];\r\n```\r\n\r\n这样新的应用就可以使用独立的菜单功能了\r\n\r\n### 更改用户和权限\r\n\r\n自定义用户和权限可以参考以上更改菜单的方式。另外如果是自定义用户的话，还需要更改配置文件`config/new-admin.php`中的以下参数\r\n\r\n```php\r\n   ...\r\n\r\n   'auth' => [\r\n        ...\r\n\t\t\r\n         'guard' => 'new-admin', // 必须是一个新的名字\r\n        \r\n\t\t'guards' => [\r\n\t\t\t'new-admin' => [\r\n\t\t\t\t'driver'   => 'session',\r\n\t\t\t\t'provider' => 'new-admin', // 必须是一个新的名字\r\n\t\t\t],\r\n\t\t],\r\n\r\n\t\t'providers' => [\r\n\t\t\t'new-admin' => [ // 必须是一个新的名字\r\n\t\t\t\t'driver' => 'eloquent',\r\n\t\t\t\t// 这里换成新用户表的模型\r\n\t\t\t\t'model'  => App\\Models\\NewAdministrator::class,\r\n\t\t\t],\r\n\t\t],\r\n\r\n        ...\r\n\r\n    ],\r\n```\r\n\r\n\r\n### 使用不同域名区分应用\r\n\r\n默认是通过路由前缀区分应用的，如果想要使用域名区分应用，只需要更改如下配置即可\r\n\r\n```php\r\n    'route' => [\r\n        'domain' => 'dev.dcat.com', // 配置你的域名\r\n\r\n        'prefix' => '', // 路由前缀建议设置为空\r\n\r\n        'namespace' => 'App\\\\Admin\\\\Controllers',\r\n\r\n        'middleware' => ['web', 'admin'],\r\n    ],\r\n```", 'order' => 10, 'created_at' => "2024-06-26 10:18:06", 'updated_at' => "2024-06-26 10:18:06", 'slug' => "multi-application-multi-background"],
            ['id' => 11, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "JS组件", 'content' => "# JS组件\r\n\r\n`Dcat Admin`内置了一些常用的JS功能组件，通过全局变量`Dcat`可以访问到这些功能方法。\r\n\r\n## 监听JS脚本加载完毕事件 (ready)\r\n\r\n通过`Dcat.ready`方法设置的回调函数会在所有的`JS`脚本都加载完毕后执行。\r\n\r\n> 只有在模板文件中写`JS`代码才需要使用`Dcat.ready`，当在`php`代码中使用`Dcat\\Admin\\Admin::script`方法添加`JS`代码时是不需要使用`Dcat.ready`方法的。因为在构建页面的时候系统会自动把代码放在`Dcat.ready`事件内执行。\r\n\r\n```html\r\n<div>...</div>\r\n<script>\r\nDcat.ready(function () {\r\n    // 写你的逻辑\r\n    \r\n    console.log('所有JS脚本都加载完了');\r\n});\r\n</script>\r\n```\r\n\r\n<a name=\"init\"></a>\r\n## 动态监听元素生成 (init)\r\n\r\n通过`Dcat.init`可以监听动态生成的页面元素并设置一个回调，下面来举一个简单的例子来演示用法：\r\n\r\n假如一个元素是`JS`动态生成的，如果我们需要对这个元素绑定一个点击事件的话，那么我们通常需要这么做\r\n\r\n```html\r\n<div class=\"selector\">test</div>\r\n\r\n<script>\r\nDcat.ready(function () {\r\n    // 需要先 off 再 on 否则页面刷新后会造成重复绑定问题\r\n    \$(document).off('click', '.selector').on('click', '.selector', function () {\r\n        ...\r\n    })\r\n});\r\n</script>\r\n```\r\n\r\n上面这种做法一来比较麻烦，需要先`off`再`on`；二来无法对动态生成的元素做一些特殊处理，例如你想在`.selector`生成后改变背景颜色，这个操作就没办法做到。\r\n\r\n在`Dcat Admin`中我们可以使用`Dcat.init`方法来监听元素动态生成，可以很方便的解决上面两个问题\r\n\r\n```html\r\n<div class=\"selector\">test</div>\r\n\r\n<script>\r\nDcat.ready(function () {\r\n    // \$this 是当前元素的jquery dom对象\r\n    // id 是当前元素的id属性，如果当前元素没有id则会自动生成一个随机id\r\n    Dcat.init('.selector', function (\$this, id) {\r\n        // 修改元素的背景色\r\n        \$this.css({background: \"#fff\"});\r\n        \r\n        // 这里不需要 off 再重新 on，因为这个匿名函数只会执行一次\r\n        \$this.on('click', function () {\r\n            ...\r\n        });\r\n    });\r\n});\r\n</script>\r\n```\r\n\r\n`Dcat.init` 接受两个参数\r\n\r\n1. `selector` 需要监听的元素的`css选择器`\r\n2. `callback` 事件回调，当元素生成时触发，且只触发一次\r\n\r\n其中`callback`回调接收两个参数如下\r\n\r\n- `\$this` 是当前元素的jquery dom对象\r\n- `id` 是当前元素的id属性，如果当前元素没有id则会自动生成一个随机id\r\n\r\n\r\n\r\n\r\n## 手动触发JS脚本加载完毕事件\r\n\r\n通过`Dcat.triggerReady`方法可以手动触发`JS`脚本加载完毕事件，这就意味着会自动执行在此之前所有通过`Dcat.ready`方法设置的回调函数。\r\n\r\n> {tip} 这个功能普通开发很少会用到，只有一些比较深度的组件定制会用到，比如[表单弹窗](model-form-modal.md)功能就用到了此方法。\r\n\r\n```js\r\nDcat.triggerReady();\r\n```\r\n\r\n\r\n## Pjax刷新页面\r\n\r\n通过`Dcat.reload`方法可以调用`Pjax.reload`方法实现页面刷新和跳转功能。\r\n\r\n刷新当前页面\r\n```php\r\nAdmin::script(\r\n<<<JS\r\n    // 3秒后刷新当前页面\r\n    setTimeout(function () {\r\n        Dcat.reload();\r\n    }, 3000);\r\nJS\r\n);\r\n```\r\n\r\n跳转页面\r\n```php\r\n\$url = admin_url('auth/users');\r\n\r\nAdmin::script(\r\n<<<JS\r\n    // 3秒后跳转到 admin/auth/users 页面\r\n    setTimeout(function () {\r\n        Dcat.reload('{\$url}');\r\n    }, 3000);\r\nJS\r\n);\r\n```\r\n\r\n## Toastr提示框\r\n\r\n\r\n`Dcat Admin`集成了[Toastr](https://github.com/CodeSeven/toastr)插件，下面是使用方法\r\n\r\n### success\r\n```js\r\nDcat.success('更新成功');\r\n\r\n// 使用标题\r\nDcat.success('更新成功', '我是标题');\r\n\r\n// 传递参数\r\nDcat.success('更新成功', null, {\r\n    timeOut: 5000, // 5秒后自动消失\r\n});\r\n```\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d4ce851f594410faa384806a2ee05c74667b7b047985e.png)\r\n\r\n\r\n### error\r\n```js\r\nDcat.error('服务器出现未知错误');\r\n\r\n// 使用标题\r\nDcat.error('服务器出现未知错误', '我是标题');\r\n\r\n// 传递参数\r\nDcat.error('服务器出现未知错误', null, {\r\n    timeOut: 5000, // 5秒后自动消失\r\n});\r\n```\r\n\r\n### warning\r\n```js\r\nDcat.warning('警告');\r\n\r\n// 使用标题\r\nDcat.warning('警告', '我是标题');\r\n\r\n// 传递参数\r\nDcat.warning('警告', null, {\r\n    timeOut: 5000, // 5秒后自动消失\r\n});\r\n```\r\n\r\n\r\n### info\r\n```js\r\nDcat.info('提示信息');\r\n\r\n// 使用标题\r\nDcat.info('提示信息', '我是标题');\r\n\r\n// 传递参数\r\nDcat.info('提示信息', null, {\r\n    timeOut: 5000, // 5秒后自动消失\r\n});\r\n```\r\n\r\n更多用法请参考[toastr官方文档](https://github.com/CodeSeven/toastr)\r\n\r\n## sweetalert2弹窗\r\n\r\n`Dcat Admin`集成了[sweetalert2](https://github.com/sweetalert2/sweetalert2)插件，下面是使用方法\r\n\r\n### confirm\r\n\r\n通过`Dcat.confirm`方法可以弹出确认弹窗，此方法接收5个参数\r\n\r\n- `title` `string` 确认信息标题\r\n- `message` `string` 确认信息内容，此参数可以不传\r\n- `success` `function` 点击确认按钮触发的回调函数\r\n- `fail` `function` 点击取消按钮触发的回调函数，此参数可以不传\r\n- `options` `object` 配置参数，可参考[sweetalert2官方文档](https://github.com/sweetalert2/sweetalert2)\r\n\r\n```js\r\nDcat.confirm('确认要删除这行数据吗？', null, function () {\r\n    console.log('确认删除');\r\n    \r\n    \$.post(...);\r\n});\r\n```\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/acc673213ec1e31d533428fd4bea2788667b7b256f645.png)\r\n\r\n\r\n\r\n### success\r\n\r\n```js\r\nDcat.swal.success('标题');\r\n\r\nDcat.swal.success('标题', '内容');\r\n\r\nDcat.swal.success('标题', '内容', {\r\n    ...\r\n});\r\n```\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/c5dfa334d693d47702a7bc15b60804bf667b7b42240d3.png)\r\n\r\n\r\n### error\r\n\r\n```js\r\nDcat.swal.error('标题');\r\n\r\nDcat.swal.error('标题', '内容');\r\n\r\nDcat.swal.error('标题', '内容', {\r\n    ...\r\n});\r\n```\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/9f9df62229a72e40910ef0d50201f996667b7b6213165.png)\r\n\r\n\r\n### warning\r\n\r\n```js\r\nDcat.swal.warning('标题');\r\n\r\nDcat.swal.warning('标题', '内容');\r\n\r\nDcat.swal.warning('标题', '内容', {\r\n    ...\r\n});\r\n```\r\n\r\n### info\r\n\r\n```js\r\nDcat.swal.info('标题');\r\n\r\nDcat.swal.info('标题', '内容');\r\n\r\nDcat.swal.info('标题', '内容', {\r\n    ...\r\n});\r\n```\r\n\r\n更多用法请参考[sweetalert2官方文档](https://github.com/sweetalert2/sweetalert2)\r\n\r\n\r\n## layer弹出层\r\n\r\n`Dcat Admin`集成了[layer弹出层](http://layer.layui.com/)，用法请参考官方文档\r\n\r\n```js\r\nlayer.open({\r\n    ...\r\n})\r\n```\r\n\r\n## Loading效果\r\n\r\n`Dcat Admin`集成了三种常见的loading效果，[在线体验点我](http://103.39.211.179:8080/admin/components/loading)\r\n\r\n### 全屏\r\n\r\n通过`Dcat.loading`方法可以设置一个占满全屏幕的遮罩层，并在中间位置显示`loading`图标。\r\n\r\n此方法接收一个`object`类型的参数：\r\n\r\n| 参数     | 类型   | 默认值      |  描述  |\r\n| ---------- | ----- |-------- | ------- |\r\n|  zIndex  | `int` | 999991014 |   设置css的z-index(层重叠顺序)样式 |\r\n|  width |   `string`   | 58px | 设置loading图标宽度 |\r\n|  color |   `string` | #bacad6  | 设置loading图标的颜色 |\r\n|  background |   `string`   | transparent  | 设置遮罩层背景颜色 |\r\n|  style |  `string`    |  | 设置loading图标的css样式 |\r\n\r\n\r\n```js\r\n// 开启loading效果\r\nDcat.loading();\r\n\r\n// 3秒后自动移除loading效果\r\nsetTimeout(function () {\r\n    Dcat.loading(false);\r\n})\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f2206bec07ea9c2930d95fb24d673476667b7b7b7a7d6.png)\r\n\r\n\r\n更改loading图标的颜色\r\n\r\n```js\r\n// 更改颜色\r\nDcat.loading({\r\n    color: Dcat.color.primary,\r\n});\r\n```\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/591f8d23c1d788dae948d4531c8f55b8667b7b91e5c80.png)\r\n\r\n\r\n### 附着于指定元素\r\n\r\n通过`\$.fn.loading`方法可以把loading效果附着于当前元素，此方法同样接收一个`object`类型参数：\r\n\r\n| 参数     | 类型   | 默认值      |  描述  |\r\n| ---------- | ----- |-------- | ------- |\r\n|  zIndex  | `int` | 100 |   设置css的z-index(层重叠顺序)样式 |\r\n|  width |   `string`   | 52px | 设置loading图标宽度 |\r\n|  color |   `string` | #bacad6  | 设置loading图标的颜色 |\r\n|  background |   `string`   | #fff  | 设置遮罩层背景颜色 |\r\n|  style |  `string`    |  | 设置loading图标的css样式 |\r\n\r\n\r\n```js\r\n// 开启loading效果\r\n\$('#card').loading();\r\n\r\n// 关闭loading效果\r\n\$('#card').loading(false);\r\n\r\n// 更改loading图标颜色\r\n\$('#card').loading({\r\n    color: Dcat.color.primary,\r\n});\r\n\r\n// 更改遮罩层颜色\r\n\$('#card').loading({\r\n    background: '#f3f3f3',\r\n});\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/cb1d19adedf90e63655f4a44c6c33886667b7baaeec89.png)\r\n\r\n\r\n\r\n### 按钮\r\n\r\n```js\r\n// 开启loading效果\r\n\$('#submit-button').buttonLoading();\r\n\r\n// 关闭loading效果\r\n\$('#submit-button').buttonLoading(false);\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/443f543132622cc0f8cc45ac8b0f3a04667b7bc641e00.png)\r\n\r\n\r\n### a标签\r\n\r\n点击`a`标签同样支持loading效果\r\n\r\n\r\n```js\r\n// 开启loading效果\r\n\$('a').buttonLoading();\r\n\r\n// 关闭loading效果\r\n\$('a').buttonLoading(false);\r\n```\r\n效果\r\n![]![](http://docs.oneself.icu:10010/storage/markdown/images/3f9c2bfd211d4193162000ab2d1b0e79667b7be20946b.png)\r\n\r\n\r\n\r\n\r\n## Ajax表单提交\r\n\r\n`Dcat Admin`集成了[jquery-form](https://github.com/jquery-form/form)组件用于实现`ajax`提交表单功能。\r\n\r\n通过`Dcat.Form`方法可以当即发起`ajax`提交表单请求，此方法接受一个`object`类型参数：\r\n\r\n| 参数     | 类型   | 默认值      |  描述  |\r\n| ---------- | ----- |-------- | ------- |\r\n|  form  | `string` | `object`  |  表单的 jquery 对象或者css选择器  |\r\n|  validate  | `bool` | `false` | 是否开启表单验证，可参考[表单验证](#validate)  |\r\n|  errorClass  | `string` | has-error | 字段验证出错时添加的样式，一般使用默认值即可  |\r\n|  errorContainerSelector  | `string` | .with-errors | 表单错误信息容器css选择器，一般使用默认值即可  |\r\n|  groupSelector  |  `string` | .form-group,.form-label-group,.form-field | 表单组css选择器，一般使用默认值即可 |\r\n|  errorTemplate  | `string` | |  错误信息模板，使用默认值即可 |\r\n|  autoRedirect  | `bool` | `false` |  保存成功后自动跳转 |\r\n|  autoRemoveError  |`bool`  | true | 当表单值发生变化时自动移除表单错误信息  |\r\n|  before  | `function` |  |  表单提交之前事件，返回`false`可以阻止表单继续提交 |\r\n|  after  | `function` |  |  单提交之后事件(不论成功还是失败都会触发)，返回`false`可以中止后续逻辑 |\r\n|  success  | `function` |  | 成功事件（接口返回状态码为`200`则判断为成功），返回`false`可以中止后续逻辑  |\r\n|   error | `function` |  | 失败事件（接口返回状态码非`200`则判断为失败），返回`false`可以中止后续逻辑  |\r\n\r\n\r\n### 基本用法\r\n\r\n```html\r\n<script>\r\nDcat.ready(function () {\r\n    // ajax表单提交\r\n    \$('#login-form').form({\r\n        validate: true, //开启表单验证\r\n        before: function (fields, form, opt) {\r\n            // fields 为表单内容\r\n            console.log('所有表单字段的值', fields);\r\n            \r\n            if (...) {\r\n                // 返回 false 可以阻止表单继续提交\r\n                return false;\r\n            }\r\n        },\r\n        success: function (response) {\r\n            // data 为接口返回数据\r\n            if (! response.status) {\r\n                Dcat.error(response.data.message);\r\n\r\n                return false;\r\n            }\r\n\r\n            Dcat.success(response.data.message);\r\n\r\n\t\t\tif (data.redirect) {\r\n\t\t\t    Dcat.reload(response.data.value)\r\n\t\t\t}\r\n\r\n            // 中止后续逻辑（默认逻辑）\r\n            return false;\r\n        },\r\n        error: function (response) {\r\n            // 当提交表单失败的时候会有默认的处理方法，通常使用默认的方式处理即可\r\n            var errorData = JSON.parse(response.responseText);\r\n            \r\n            if (errorData) {\r\n                Dcat.error(errorData.message);\r\n            } else {\r\n                console.log('提交出错', response.responseText);\r\n            }\r\n            \r\n            // 终止后续逻辑执行\r\n            return false;\r\n        },\r\n    });\r\n});\r\n</script>\r\n```\r\n\r\n\r\n### 高阶用法\r\n\r\n如果你想要实现更细粒度的控制，可以通过类似下面这种方式自己绑定提交按钮，然后提交表单\r\n\r\n```js\r\nvar \$form = \$('#login-form');\r\n\r\n// 禁用默认提交\r\n\$form.on('submit', function () {\r\n    return false;\r\n});\r\n\r\n// ajax表单提交\r\nfunction submit() {\r\n    Dcat.Form({\r\n        form: \$form,\r\n        success: function (response) {\r\n            if (! response.status) {\r\n                Dcat.error(response.data.message);\r\n\r\n                return false;\r\n            }\r\n\r\n            Dcat.success(response.data.message);\r\n\r\n            location.href = response.data.value;\r\n\r\n            return false;\r\n        },\r\n        error: function () {\r\n            // 非200状态码响应错误\r\n        }\r\n    });\r\n}\r\n\r\n// h5表单验证\r\nfunction validateForm() {\r\n    \$form.validator('validate');\r\n\r\n    // 如果出现错误，则返回false\r\n    if (\$form.find('.has-error').length > 0) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// 绑定登陆按钮点击事件\r\n\$form.find('[type=\"submit\"],.submit').click(function (e) {\r\n    // 表单验证\r\n    if (validateForm() === false) {\r\n        return false;\r\n    }\r\n\r\n    // 提交表单\r\n    submit();\r\n\r\n    return false;\r\n});\r\n```\r\n\r\n\r\n<a name=\"validate\"></a>\r\n### 表单验证\r\n    \r\n`Dcat Admin`集成了[bootstrap-validator](https://github.com/1000hz/bootstrap-validator)组件用于表单前端验证的功能，\r\n[bootstrap-validator](https://github.com/1000hz/bootstrap-validator)是一款支持H5表单验证的验证器，只需把验证规则写在表单元素的属性上即可自动开启验证，非常方便。\r\n\r\n\r\n\r\n#### 添加验证规则\r\n```html\r\n<fieldset class=\"form-label-group form-group position-relative has-icon-left\">\r\n    <input\r\n    \r\n        minlength=\"5\" <!-- 加上验证规则 -->\r\n        maxlength=\"20\" <!-- 加上验证规则 -->\r\n        required  <!-- 加上验证规则 -->\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        name=\"password\"\r\n    >\r\n\r\n    <div class=\"form-control-position\">\r\n        <i class=\"feather icon-lock\"></i>\r\n    </div>\r\n    <label for=\"password\">{{ trans('admin.password') }}</label>\r\n\r\n    <!-- 这个加了 .with-errors 样式的 div 即是表单错误信息显示的位置，非常重要 -->\r\n    <div class=\"help-block with-errors\"></div>\r\n</fieldset>\r\n```\r\n#### 开启表单验证\r\n```js\r\n\$('#xx-form').form({\r\n    validate: true\r\n});\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/8e9bc6dfd86abf5fad0a04e93d62ba75667b7bff8c4bc.png)\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/68201a260714813251f882a10943696a667b7c147a0d9.png)\r\n\r\n<a name=\"extend-validator\"></a>\r\n#### 扩展验证规则\r\n\r\n通过`Dcat.validator.extend`方法可以扩展表单验证规则\r\n\r\n```js\r\nDcat.validator.extend('maxlength', function (\$el) {\r\n    return \$el.val().length > \$el.attr('data-maxlength');\r\n});\r\n```\r\n\r\n使用自定义规则验证表单\r\n\r\n```html\r\n<input \r\n    type=\"input\"\r\n    class=\"form-control\"\r\n    name=\"username\"\r\n    data-maxlength=\"20\" <!-- 使用刚刚自定义的验证规则 -->\r\n    data-maxlength-error=\"已超出输入字符长度限制，请输入20个或以下的字符\" <!-- 定义错误信息 -->\r\n />\r\n```\r\n\r\n#### 内置验证规则\r\n更多内置验证规则请参考[bootstrap-validator官方文档](http://1000hz.github.io/bootstrap-validator/)", 'order' => 11, 'created_at' => "2024-06-26 10:25:30", 'updated_at' => "2024-06-26 10:25:30", 'slug' => "js-component"],
            ['id' => 12, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "常见问题", 'content' => "# 常见问题汇总\r\n\r\n### 前端控制台JS报错？\r\n\r\n如果发现这个问题，绝大部分都是因为静态资源文件有问题引起的（比如升级步骤不正确），请先重新发布资源并**清理浏览器缓存**：\r\n```\r\nphp artisan admin:publish --assets --force\r\n```\r\n如果还是报错，请到此处进行反馈 https://github.com/jqhph/dcat-admin/issues\r\n\r\n### 如何设置语言为简体中文？\r\n\r\n打开配置文件`config/app.php`，设置`locale`参数的值为`zh_CN`。\r\n\r\n### Laravel7时间显示为UTC格式\r\n\r\n这个是`Laravel7`升级后带来的坑，原因请参考[日期序列化](https://learnku.com/docs/laravel/7.x/upgrade/7445#date-serialization)。\r\n\r\n在本项目中解决这个问题很简单，只需在`Model`中引入`Dcat\\Admin\\Traits\\HasDateTimeFormatter`这个`trait`即可。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Dcat\\Admin\\Traits\\HasDateTimeFormatter;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass MyModel extends Model\r\n{\r\n     use HasDateTimeFormatter;\r\n}\r\n```\r\n\r\n### 表单保存时报错`Array to string conversion`\r\n\r\n出现这个问题是因为表单提交的值最后转换成了`array`类型，而`MySQL`是不支持直接存储`array`类型数据的，在`dcat-admin`中可以用以下方式对数据格式进行转换\r\n\r\n```php\r\n\$form->multipleSelect('user_id')->saving(function (\$v) {\r\n // 转为 , 隔开的字符串\r\n return implode(',', \$v);});\r\n```\r\n\r\n当然，也可以通过`model`的**修改器**去转化字段的值，这方面内容可以参考`laravel`文档，这里就不再赘述。\r\n\r\n> 更优雅的转化值方法，可参考 [Dcat Admin 教程 - 如何优雅地更改表单值的数据类型？](https://learnku.com/articles/44386)\r\n\r\n### 如何从laravel-admin迁移到dcat-admin？\r\n[Dcat Admin 教程 - 如何从 Laravel admin 迁移到 dcat admin？](https://learnku.com/articles/44235)\r\n\r\n### 重写登陆页面和登陆逻辑\r\n\r\n方式一，重写登陆控制器方法：\r\n\r\n默认的登陆控制器用的是`App\\Admin\\AuthController`这个类，可以通过配置参数`admin.auth.controller`进行修改\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers;\r\n\r\nuse Dcat\\Admin\\Controllers\\AuthController as BaseAuthController;\r\n\r\nclass AuthController extends BaseAuthController\r\n{\r\n    // 自定义登陆view模板\r\n    protected \$view = 'admin.login';\r\n\t\r\n\t// 重写登陆页面逻辑\r\n\tpublic function getLogin(Content \$content)\r\n    {\r\n        ...\r\n    }\r\n\r\n    ...\r\n}\r\n\r\n```\r\n\r\n\r\n方式二，覆写路由：\r\n\r\n在路由文件`app/Admin/routes.php`中，覆盖掉登陆页面和登陆逻辑的路由，即可实现自定义的功能\r\n\r\n```php\r\nRoute::group([\r\n    'prefix'        => config('admin.prefix'),\r\n    'namespace'     => Admin::controllerNamespace(),\r\n    'middleware'    => ['web', 'admin'],\r\n], function (Router \$router) {\r\n\r\n    \$router->get('auth/login', 'AuthController@getLogin');\r\n    \$router->post('auth/login', 'AuthController@postLogin');\r\n    \r\n});\r\n```\r\n\r\n在自定义的路由器AuthController中的`getLogin`、`postLogin`方法里分别实现自己的登陆页面和登陆逻辑。\r\n\r\n\r\n\r\n### 更新新版本后出现异常\r\n\r\n如果遇到更新之后,部分组件不能正常使用,那有可能是`dcat-admin`自带的静态资源有更新了,需要运行命令`php artisan admin:publish --force`来重新发布前端资源，发布之后不要忘记清理浏览器缓存.\r\n\r\n### 文件上传失败或无法访问？\r\n\r\n如果你发现无法上传文件，那么通常有几下几点原因：\r\n\r\n1. `Laravel`文件上传配置不正确，请参考文档[图片/文件上传](https://learnku.com/docs/dcat-admin/1.x/picture-file-upload/8106)。如果你不了解`laravel`文件上传功能，请阅读文档[Laravel - 文件存储](https://learnku.com/docs/laravel/7.x/filesystem/7485)\r\n2. 文件过大，需要调整`php.ini`的`upload_max_filesize`参数\r\n3. 文件上传目录没有写权限\r\n4. `php`没有安装或没有开启`fileinfo`扩展\r\n5. 检查`php.ini`的`upload_tim_dir`参数设置是否正常\r\n6. 检查是否升级新版本没有重新发布资源或没有清理浏览器缓存\r\n\r\n如果文件上传成功了，却无法正常访问，那么可能是`.env`配置文件中的`APP_URL`参数没有设置正确。\r\n\r\n### 关于前端资源加载问题\r\n\r\n`Dcat Admin`是支持前端资源按需加载的，在需要用到某个组件的时候再引入前端资源即可，开发者无需担心安装组件过多影响页面加载速度。\r\n\r\n只有那种需要在全局页面引入的资源，才需要在`app/Admin/bootstrap.php`或`ServiceProvider::boot`方法中引入：\r\n\r\n```php\r\nAdmin::css('path/to/your/css');\r\nAdmin::js('path/to/your/js');\r\n```\r\n\r\n### 谷歌字体加载过慢？\r\n\r\n如果出现谷歌字体加载过慢的情况下，可以把谷歌字体下载到你自己的服务器，然后在`app/Admin/bootstrap.php`中加入以下代码，让系统从你自己的服务器中加载字体\r\n\r\n```php\r\nAdmin::asset()->alias(\r\n    '@nunito', \r\n     ['css' => asset('你的服务器字体路径/nunito.css?family=Nunito:200,200i,300,300i,400,400i,600,600i,800,800i,900,900i')]\r\n);\r\n```\r\n\r\n如果你完全不想使用这两种字体，可以加入以下代码\r\n```php\r\nAdmin::asset()->alias('@nunito', []);\r\n```\r\n\r\n### 为何配置了角色和权限，依然提示无权访问？\r\n\r\n这个原因可能是由于权限的`URL`路径配置错误导致的，正确的包含增删改查功能的`URL`配置应该是`auth/users*`这样的，如果配置成了`auth/users/*`，那么就会提示无权访问。\r\n\r\n> {tip} 另外标签表单填写自定义URL有两种方法：一种是选中后按`删除键`进行更改；另一种是填写后按`空格键` + `回车键`。\r\n\r\n### 为何没有权限的菜单不会自动隐藏？\r\n\r\n权限与菜单是相互独立的，并且默认是可见的。当设置了权限之后，系统并没有办法可以判断用户是否可以访问某个菜单，所以需要给菜单绑定对应的**权限**或者**角色**，绑定之后系统就可以识别用户是否可访问这个菜单。\r\n\r\n### 项目使用HTTPS之后无法登陆\r\n需要把配置文件的`admin.https`参数的值设置为`true`\r\n\r\n### \$.get(xxx) 没有反应\r\n\r\n`Dcat Admin`使用的是`jQuery3.x`，`\$.get`方法在`jQuery3.x`中已经被废弃，请使用`\$.ajax`代替\r\n\r\n### 前后台session发生冲突\r\n\r\n从`2.0`的版本之后 `admin.session` 中间件不再默认启用，如果您的应用同时有前台和后台，则需要开启 `admin.session` 中间件，否则会造成前后台 `session` 冲突问题。\r\n\r\n把配置参数 `admin.route.enable_session_middleware` 的值设置为 `true` 即可开启\r\n```php\r\n    'route' => [\r\n        'domain' => env('ADMIN_ROUTE_DOMAIN'),\r\n\r\n        'prefix' => env('ADMIN_ROUTE_PREFIX', 'admin'),\r\n\r\n        'namespace' => 'App\\\\Admin\\\\Controllers',\r\n\r\n        'middleware' => ['web', 'admin'],\r\n        \r\n        // 开启 admin.session 中间件\r\n        'enable_session_middleware' => true,\r\n    ],\r\n```\r\n\r\n### 数据表字段设置 Not null 后保存表单时报错\r\n\r\n如果数据表字段设置为`not null`，当表单提交的数据是空时，会保存字段值为`null`到数据库，这时就会报错。我们可以通过以下方法解决这个问题\r\n\r\n```php\r\n\$form->text(...)->saving(function (\$v) {\r\n    // 把字段值类型强转为 string，如果是数值强转为int\r\n    return (string) \$v;\r\n});\r\n```\r\n\r\n### 图片防盗链\r\n图片请求默认会去掉 `referer` 字段，如果有防盗链要求，可以在配置文件(`config/admin.php`)中设置：\r\n\r\n```\r\n \"disable_no_referrer_meta\" => true\r\n ```\r\n \r\n ### 适配 Laravel-S \r\n\r\n自从 Laravel-S 3.7.18 发行版开始，支持使用 DcatAdmin 。\r\n\r\n1，`composer require hhxsv5/laravel-s`。\r\n\r\n2，执行 `php artisan laravels publish` 发布资源。\r\n\r\n3，修改 `config/laravels.php` ，添加以下服务注册和清理器：\r\n```\r\n'register_providers' => [\r\n \\Dcat\\Admin\\AdminServiceProvider::class,\r\n],\r\n\r\n'cleaners' => [\r\n  ...\r\n  Hhxsv5\\LaravelS\\Illuminate\\Cleaners\\DcatAdminCleaner::class,\r\n \r\n],\r\n```\r\n\r\n4，执行 `php bin/laravels start` 即可使用 swoole 。\r\n \r\n\r\n### 为何不开发成前后端分离项目？\r\n\r\n最近有很多同学问我为什么不采用前后端分离技术方案，我在这个帖子里回答的非常详细，有相关疑问的同学请[点击此处查看帖子](https://github.com/jqhph/dcat-admin/issues/27)，这里不再赘述。", 'order' => 12, 'created_at' => "2024-06-26 10:26:02", 'updated_at' => "2024-06-26 10:26:02", 'slug' => "common-problem"],
            ['id' => 13, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 1, 'title' => "Laravel Octane", 'content' => "# Laravel Octane\r\n\r\n[Laravel Octane](https://github.com/laravel/octane) 是一个基于 `Swoole/RoadRunner` 驱动的可以提升 `Laravel` 框架性能的项目，安装后可以大幅提升`Laravel`项目的性能。\r\n\r\n`Dcat Admin`从`v2.0.23-beta`版本起兼容了`Laravel Octane`环境，只需在配置文件`config/octane.php`中加入如下配置即可：\r\n\r\n```php\r\n\r\n    'listeners' => [\r\n        ...,\r\n\r\n        RequestReceived::class => [\r\n            ...Octane::prepareApplicationForNextOperation(),\r\n            ...Octane::prepareApplicationForNextRequest(),\r\n            \r\n            // 开启对 Dcat Admin 的支持\r\n            Dcat\\Admin\\Octane\\Listeners\\FlushAdminState::class,\r\n        ],\r\n        \r\n        ...\r\n    ],    \r\n```\r\n\r\n> [Laravel Octane](https://github.com/laravel/octane)目前仍处于`beta`版本阶段，关于[Laravel Octane](https://github.com/laravel/octane)的安装与更多介绍请前往文档 https://github.com/laravel/octane 查看。", 'order' => 13, 'created_at' => "2024-06-26 10:26:50", 'updated_at' => "2024-06-26 10:26:50", 'slug' => "laravel-octane"],
            ['id' => 14, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "基本使用", 'content' => "# 表格基本使用\r\n\r\n\r\n## 简单示例\r\n`Dcat\\Admin\\Grid`类用于生成基于数据模型的表格，先来个例子，数据库中有`movies`表\r\n\r\n```sql\r\nCREATE TABLE `movies` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `director` int(10) unsigned NOT NULL,\r\n  `describe` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `rate` tinyint unsigned NOT NULL,\r\n  `released` enum(0, 1),\r\n  `release_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\n```\r\n\r\n对应的数据模型为`App\\Models\\Movie`，对应的数据仓库为`App\\Admin\\Repositories\\Movie`，数据仓库代码如下：\r\n\r\n> {tip} 如果你的数据来自`MySQL`，则`数据仓库`不是必须的，你也可以直接使用`Model`。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse App\\Models\\Movie as MovieModel;\r\n\r\nclass Movie extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = MovieModel::class;\r\n    \r\n    /**\r\n     * 设置表格查询的字段，默认查询所有字段\r\n     * \r\n     * @return array\r\n     */\r\n    public function getGridColumns(){\r\n        return ['id', 'title', 'director', 'rate', ...];\r\n    }\r\n}\r\n```\r\n\r\n下面的代码可以生成表`movies`的数据表格：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers;\r\n\r\nuse App\\Admin\\Repositories\\Movie;\r\nuse Dcat\\Admin\\Grid;\r\nuse \\Dcat\\Admin\\Http\\Controllers\\AdminController;\r\n\r\nclass MovieController extends AdminController\r\n{\r\n    protected function grid()\r\n    {\r\n        return Grid::make(new Movie(), function (Grid \$grid) {\r\n            // 第一列显示id字段，并将这一列设置为可排序列\r\n            \$grid->column('id', 'ID')->sortable();\r\n            \r\n            // 第二列显示title字段，由于title字段名和Grid对象的title方法冲突，所以用Grid的column()方法代替\r\n            \$grid->column('title');\r\n            \r\n            // 第三列显示director字段，通过display(\$callback)方法设置这一列的显示内容为users表中对应的用户名\r\n            \$grid->column('director')->display(function(\$userId) {\r\n                return User::find(\$userId)->name;\r\n            });\r\n            \r\n            // 第四列显示为describe字段\r\n            \$grid->column('describe');\r\n            \r\n            // 第五列显示为rate字段\r\n            \$grid->column('rate');\r\n            \r\n            // 第六列显示released字段，通过display(\$callback)方法来格式化显示输出\r\n            \$grid->column('released', '上映?')->display(function (\$released) {\r\n                return \$released ? '是' : '否';\r\n            });\r\n            \r\n            // 下面为三个时间字段的列显示\r\n            \$grid->column('release_at');\r\n            \$grid->column('created_at');\r\n            \$grid->column('updated_at');\r\n            \r\n            // filter(\$callback)方法用来设置表格的简单搜索框\r\n            \$grid->filter(function (\$filter) {\r\n                // 设置created_at字段的范围查询\r\n                \$filter->between('created_at', 'Created Time')->datetime();\r\n            });\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n## 表格显示模式\r\n\r\n### table_collapse\r\n\r\n在这个版本开始，默认的表格布局将会采用 `table_collapse` 模式，效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f1d28e2258d5db70557f6840cd40dac8667b7da370239.png)  \r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d29d435f115791e85faeb6f1e6c5e928667b7dae5c00e.png)\r\n\r\n如果想要切换回旧版本的表格布局样式，可以在 `app/Admin/bootstrap.php`中加上\r\n\r\n```php\r\nGrid::resolving(function (Grid \$grid) {\r\n    \$grid->tableCollapse(false);\r\n});\r\n```\r\n\r\n### 边框模式\r\n\r\n通过`withBorder`方式可以让表格显示边框\r\n\r\n```php\r\n\$grid->withBorder();\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/9ff1c81120f163154a16dc0e9732446a667b7dbe3d250.png)\r\n\r\n\r\n\r\n禁用边框模式\r\n```php\r\n\$grid->withBorder(false);\r\n```\r\n\r\n## 基本使用方法\r\n\r\n### 添加列 (column)\r\n\r\n```php\r\n// 添加单列\r\n\$grid->column('username', '用户名');\r\n\r\n// 添加多列\r\n\$grid->columns('email', 'username' ...);\r\n```\r\n\r\n### 修改查询条件 (where)\r\n```php\r\n\$grid->model()->where('id', '>', 100);\r\n\r\n\$grid->model()->orderBy('id', 'desc');\r\n\r\n// 回收站数据\r\n\$grid->model()->onlyTrashed();\r\n\r\n...\r\n```\r\n\r\n同时也可以使用以下方式\r\n\r\n```php\r\nprotected function grid()\r\n{\r\n    return Grid::make(Model::with('...')->where(...), function (Grid \$grid) {\r\n        ...\r\n    });\r\n}\r\n```\r\n\r\n其它查询方法可以参考`eloquent`的查询方法.\r\n\r\n#### 设置默认排序\r\n\r\n```php\r\n\$grid->model()->orderBy('id', 'desc');\r\n```\r\n\r\n这个功能也支持关联关系表字段排序，注意这里仅支持`一对一`以及`一对多`关联关系\r\n\r\n```php\r\n\$grid->model()->orderBy('profile.age');\r\n```\r\n\r\n### 修改显示输出 (display)\r\n\r\n\r\n```php\r\n\$grid->column('text')->display(function(\$text) {\r\n    return str_limit(\$text, 30, '...');\r\n});\r\n\r\n// 允许混合使用多个“display”方法\r\n\$grid->column('name')->display(function (\$name) {\r\n     return \"<b>\$name</b>\";\r\n })->display(function (\$name) {\r\n    return \"<span class='label'>\$name</span>\";\r\n});\r\n\r\n\$grid->column('email')->display(function (\$email) {\r\n    return \"mailto:\$email\";\r\n});\r\n\r\n// 可以直接写字符串\r\n\$grid->column('username')->display('...');\r\n\r\n// 添加不存在的字段\r\n\$grid->column('column_not_in_table')->display(function () {\r\n    return 'blablabla....'.\$this->id;\r\n});\r\n```\r\n\r\n### 显示序号 (number)\r\n\r\n通过`number`方法可以在表格中添加一列从`1`开始计算的行序号列\r\n\r\n```php\r\n\$grid->number();\r\n```\r\n\r\n### 设置名称 (setName)\r\n\r\n当页面存在多个`Grid`表格时，需要给表格设置不同的名称，否则部分功能可能会出现冲突的情况\r\n\r\n```php\r\n\$grid->setName('name1');\r\n```\r\n\r\n### 获取当前行数据 (row)\r\n\r\n`display()`方法接收的匿名函数绑定了当前行的数据对象，可以在里面调用当前行的其它字段数据\r\n\r\n```php\r\n\$grid->column('first_name');\r\n\$grid->column('last_name');\r\n\r\n// 不存的字段列\r\n\$grid->column('full_name')->display(function () {\r\n    return \$this->first_name.' '.\$this->last_name;\r\n});\r\n```\r\n\r\n\r\n<a name=\"outline\"></a>\r\n### 设置工具栏按钮样式\r\n\r\n工具栏按钮默认显示`outline`模式，效果如下\r\n\r\n\r\n用法\r\n```php\r\n\$grid->toolsWithOutline();\r\n\r\n// 禁止\r\n\$grid->toolsWithOutline(false);\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/dca8cf0ab722a1456c5015563a8db402667b7dd84a1c2.png)\r\n\r\n禁用`outline`后的效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d2b554789840306ab0e3444fc2b09547667b7df160ef3.png)\r\n\r\n\r\n如果你希望某个按钮不使用`outline`模式，可以在按钮的`class`属性中加上`disable-outline`\r\n```php\r\n\$grid->tools('<a class=\"btn btn-primary disable-outline\">测试按钮</a>');\r\n```\r\n\r\n### 设置创建按钮 (createButton)\r\n\r\n此功能默认开启\r\n```php\r\n// 禁用\r\n\$grid->disableCreateButton();\r\n// 显示\r\n\$grid->showCreateButton();\r\n```\r\n\r\n#### 开启弹窗创建表单\r\n\r\n此功能默认不开启\r\n\r\n```php\r\n\$grid->enableDialogCreate();\r\n\r\n// 设置弹窗宽高，默认值为 '700px', '670px'\r\n\$grid->setDialogFormDimensions('50%', '50%');\r\n```\r\n\r\n#### 传递参数到按钮的URL\r\n\r\n```php\r\n\$grid->model()->setConstraints([\r\n    'key1' => 'v1',\r\n\t'key2' => 'v2',\r\n\t...\r\n]);\r\n```\r\n\r\n### 修改创建以及更新按钮的路由 (setResource)\r\n\r\n设置修改创建以及更新按钮的路由前缀\r\n\r\n```php\r\n\$grid->setResource('auth/users');\r\n```\r\n\r\n\r\n### 设置查询过滤器 (filter)\r\n\r\n此功能默认开启\r\n\r\n```php\r\n// 禁用\r\n\$grid->disableFilter();\r\n// 显示\r\n\$grid->showFilter();\r\n\r\n// 禁用过滤器按钮\r\n\$grid->disableFilterButton();\r\n// 显示过滤器按钮\r\n\$grid->showFilterButton();\r\n```\r\n\r\n\r\n### 行选择器 (rowSelector)\r\n```php\r\n// 禁用\r\n\$grid->disableRowSelector();\r\n// 显示\r\n\$grid->showRowSelector();\r\n```\r\n\r\n#### 设置选择中行的标题字段\r\n设置选中后需要显示的字段，如不设置，默认取 `name`、 `title`、 `username`中的一个。\r\n```php\r\n\$grid->column('full_name');\r\n\$grid->column('age');\r\n\r\n...\r\n\r\n\$grid->rowSelector()->titleColumn('full_name');\r\n```\r\n\r\n#### 设置选择中行的ID字段\r\n设置选中后需要保存的字段，默认为 数据表主键(id) 字段\r\n```php\r\n\$grid->column('new_id');\r\n\r\n...\r\n\r\n\$grid->rowSelector()->idColumn('new_id');\r\n```\r\n\r\n#### 设置checkbox选择框颜色\r\n默认 `primary`，支持：`default`、 `primary`、 `success`、 `info`、 `danger`、 `purple`、 `inverse`。\r\n```php\r\n\$grid->rowSelector()->style('success');\r\n```\r\n\r\n#### 点击当前行任意位置选中\r\n此功能默认不开启。\r\n```php\r\n\$grid->rowSelector()->click();\r\n```\r\n\r\n#### 设置选中行的背景颜色\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$grid->rowSelector()->background(Admin::color()->dark20());\r\n```\r\n\r\n### 设置默认选中行\r\n```php\r\n\$grid->rowSelector()->check(function (\$row) {\r\n    return \$row->state === 1; // 默认选中state为1的行\r\n});\r\n```\r\n\r\n### 设置禁止选中行 (disable)\r\n\r\n```php\r\n\$grid->rowSelector()->disable(function (\$row) {\r\n    return \$row->state === 0; // state为0的行不可选中\r\n});\r\n```\r\n\r\n### 设置行操作按钮 (actions)\r\n```php\r\n// 禁用\r\n\$grid->disableActions();\r\n// 显示\r\n\$grid->showActions();\r\n\r\n// 禁用详情按钮\r\n\$grid->disableViewButton();\r\n// 显示详情按钮\r\n\$grid->showViewButton();\r\n\r\n// 禁用编辑按钮\r\n\$grid->disableEditButton();\r\n// 显示编辑按钮\r\n\$grid->showEditButton();\r\n\r\n// 禁用快捷编辑按钮\r\n\$grid->disableQuickEditButton();\r\n// 显示快捷编辑按钮\r\n\$grid->showQuickEditButton();\r\n\r\n// 设置弹窗宽高，默认值为 '700px', '670px'\r\n\$grid->setDialogFormDimensions('50%', '50%');\r\n\r\n\r\n// 禁用删除按钮\r\n\$grid->disableDeleteButton();\r\n// 显示删除按钮\r\n\$grid->showDeleteButton();\r\n\r\n```\r\n\r\n### 设置批量操作按钮 (batchActions)\r\n```php\r\n// 禁用\r\n\$grid->disableBatchActions();\r\n// 显示\r\n\$grid->showBatchActions();\r\n\r\n// 禁用批量删除按钮\r\n\$grid->disableBatchDelete();\r\n// 显示批量删除按钮\r\n\$grid->showBatchDelete();\r\n```\r\n### 批量操作设置下拉菜单分割线 (divider )\r\n```php\r\n// 方式1\r\n\$grid->batchActions(function (\$batch) {\r\n    \$batch->add(...);\r\n\r\n    // 显示分割线\r\n    \$batch->divider();\r\n\r\n    ...\r\n});\r\n\r\n// 方式2\r\nuse Dcat\\Admin\\Grid\\Tools\\ActionDivider;\r\n\r\n\$grid->batchActions([\r\n    new Action1(),\r\n    ...\r\n    new ActionDivider(),\r\n    ...\r\n]);\r\n```\r\n### 设置工具栏 (toolbar)\r\n```php\r\n// 禁用\r\n\$grid->disableToolbar();\r\n// 显示\r\n\$grid->showToolbar();\r\n```\r\n\r\n### 设置刷新按钮 (refresh)\r\n```php\r\n// 禁用\r\n\$grid->disableRefreshButton();\r\n// 显示\r\n\$grid->showRefreshButton();\r\n```\r\n\r\n### 设置分页功能 (paginate)\r\n```php\r\n// 禁用\r\n\$grid->disablePagination();\r\n// 显示\r\n\$grid->showPagination();\r\n```\r\n\r\n#### 简化分页 (simplePaginate)\r\n\r\n启用 `simplePaginate` 功能后会使用`Laravel`的[simplePaginate](https://laravel.com/docs/8.x/pagination#simple-pagination)功能进行分页，当数据量较大时可以大幅提升页面的响应速度，但需要注意的是，使用此功能后将不会查询数据表的**总行数**。\r\n\r\n```php\r\n// 启用\r\n\$grid->simplePaginate();\r\n\r\n// 禁用\r\n\$grid->simplePaginate(false);\r\n```\r\n\r\n#### 设置每页显示行数\r\n\r\n```php\r\n// 默认为每页20条\r\n\$grid->paginate(15);\r\n```\r\n\r\n#### 设置分页选择器选项 (perPages)\r\n```php\r\n\$grid->perPages([10, 20, 30, 40, 50]);\r\n\r\n// 禁用分页选择器\r\n\$grid->disablePerPages();\r\n```\r\n\r\n### 设置表格样式 (addTableClass)\r\n\r\n\r\n通过`addTableClass`可以给表格的`table`添加`css`样式\r\n\r\n```php\r\n\$grid->addTableClass(['class1', 'class2']);\r\n```\r\n\r\n### 设置表格文字居中 (table-text-center)\r\n\r\n```php\r\n\$grid->addTableClass(['table-text-center']);\r\n```\r\n\r\n\r\n### 显示横向滚动条 (scrollbarX)\r\n\r\n显示表格横向滚动条，默认不显示\r\n\r\n```php\r\n// 启用\r\n\$grid->scrollbarX();\r\n\r\n// 禁用\r\n\$grid->scrollbarX(false);\r\n```\r\n\r\n\r\n### 设置表格外层容器\r\n```php\r\n // 更改表格外层容器\r\n\$grid->wrap(function (Renderable \$view) {\r\n    \$tab = Tab::make();\r\n    \r\n    \$tab->add('示例', \$view);\r\n    \$tab->add('代码', \$this->code(), true);\r\n\r\n    return \$tab;\r\n});\r\n```\r\n\r\n## 关联模型\r\n\r\n参考[表格关联关系](https://learnku.com/docs/dcat-admin/2.x/association/8821)", 'order' => 1, 'created_at' => "2024-06-26 10:33:52", 'updated_at' => "2024-06-26 10:33:52", 'slug' => "basic-use"],
            ['id' => 15, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "列的使用和扩展", 'content' => "# 列的基本使用\r\n\r\n### 设置列为可排序 (sortable)\r\n```php\r\n\$grid->column('id')->sortable();\r\n```\r\n\r\n表格字段支持关联关系表字段以及`json`字段的排序\r\n\r\n> 注意，排序功能仅支持`hasOne`以及`belongsTo`两种类型的字段排序，并且不支持多层级嵌套！\r\n\r\n```php\r\n// 关联关系表字段排序\r\n\$grid->column('profile.age')->sortable();\r\n\r\n// 指定需要排序的字段名称\r\n\$grid->column('my_age')->sortable('profile.age');\r\n\r\n// json字段排序\r\n\$grid->column('options.price')->sortable('options->price');\r\n// 关联关系表的 json 字段排序\r\n\$grid->column('profile.options.price')->sortable('profile.options->price');\r\n```\r\n\r\n支持`MySql`的```order by cast(`{field}` as {type})```用法\r\n\r\n```php\r\n\$grid->column('profile.age')->sortable(null, 'SIGNED');\r\n\r\n\$grid->column('profile.options.price')->sortable('profile.options->price', 'SIGNED');\r\n```\r\n\r\n#### 设置默认排序\r\n\r\n```php\r\n\$grid->model()->orderBy('id', 'desc');\r\n```\r\n\r\n这个功能也支持关联关系表字段排序，注意这里仅支持`hasOne`以及`belongsTo`关联关系\r\n\r\n```php\r\n\$grid->model()->orderBy('profile.age');\r\n```\r\n\r\n### 设置列的宽度 (width)\r\n设置列的宽度，当字段内容过长时可以使用这个方法限制列宽度\r\n```php\r\n// px\r\n\$grid->column('long_text')->width('300px');\r\n// 百分比\r\n\$grid->column('long_text')->width('15%');\r\n```\r\n\r\n### 固定列 (fixColumns)\r\n\r\n\r\n通过 `fixColumns` 方法可以给表格设置固定列，第一个参数表示固定从头开始的前三列，第二个参数表示固定从后往前数的两列，（第二个参数可不传，默认为-1）\r\n\r\n```php\r\n\$grid->fixColumns(2, -2);\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/26a1ef9ec82f49f04cdf24d0506c9173667b7e6ed08a5.gif)\r\n  \r\n  \r\n### 获取行序号 (index)\r\n\r\n序号从 `0` 开始计算\r\n\r\n```php\r\n// 在 display 回调中使用\r\n\$grid->column('序号')->display(function () {\r\n    return \$this->_index + 1;\r\n});\r\n\r\n\r\n// 在行操作 action 中使用\r\n\$grid->actions(function (\$actions) {\r\n    \$index = \$this->_index;\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n### 设置td标签HTML属性 (setAttributes)\r\n\r\n```php\r\n\$grid->column('email')->setAttributes(['name' => '...'])\r\n```\r\n\r\n\r\n### 设置表格头HTML属性 (setHeaderAttributes)\r\n设标题的`html`属性\r\n```php\r\n// 修改颜色\r\n\$grid->column('name')->setHeaderAttributes(['style' => 'color:#5b69bc']);\r\n```\r\n\r\n### 设置列选择器 (字段显示或隐藏 showColumnSelector)\r\n\r\n此功能默认不启用\r\n\r\n```php\r\n// 开启字段选择器功能\r\n\$grid->showColumnSelector();\r\n\r\n// 设置默认隐藏字段\r\n\$grid->hideColumns(['field1', ...]);\r\n``` \r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/af68e6c3c26aa701c9ecc23bdea17040667b7e7d57656.png)\r\n\r\n<a name=\"column-selector-store\"></a>\r\n#### 存储驱动 (持久化)\r\n\r\n在配置文件`config/admin.php`可以配置存储列选择器状态的方式，支持的存储方式如下\r\n\r\n- `Dcat\\Admin\\Grid\\ColumnSelector\\SessionStore` 列选择器状态数据保存在`session`中，仅在登陆状态中有效\r\n- `Dcat\\Admin\\Grid\\ColumnSelector\\CacheStore`  列选择器状态数据保存在[Laravel Cache](https://laravel.com/docs/8.x/cache#driver-prerequisites)缓存系统中，最长可保存`300`天，并可以通过`admin.grid.column_selector.store_params.driver`可以配置缓存驱动，默认为`file`\r\n\r\n```php\r\n    'grid' => [\r\n\r\n        ...\r\n\r\n        'column_selector' => [\r\n            'store' => Dcat\\Admin\\Grid\\ColumnSelector\\SessionStore::class,\r\n            'store_params' => [\r\n                'driver' => 'file',\r\n            ],\r\n        ],\r\n    ],\r\n```\r\n\r\n\r\n### 设置列提示信息 (help)\r\n`Grid\\Column::help`参数：\r\n - \$help `string` 提示内容\r\n - \$style `string` 提示窗背景颜色，支持`green`、 `blue`、`red`、`purple`\r\n - \$placement `string` 提示窗位置，支持`top`、`left`、`right`、`bottom`\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/33f8f96ce46254ffb7139dc9b55cb2c4667b7e8a8c3d8.png)\r\n\r\n\r\n```php\r\n\$grid->column('id')->help('提示信息');\r\n```\r\n\r\n### 设置列搜索 (filter)\r\n\r\n通过`Grid\\Column::filter`方法可以给列设置一个过滤器，可以很方便的根据这一列进行数据表格过滤操作，具体使用方法请参考[列过滤器](https://learnku.com/docs/dcat-admin/2.x/column-filter/8098)。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/a4fac766ce94bfd02f0a350d8ec86b7e667b7ea1ea897.png)\r\n\r\n\r\n\r\n\r\n### 扩展列功能\r\n\r\n通过`Grid\\Column::macro`方法可以扩展列方法。\r\n\r\n在 `app/Admin/bootstrap.php` 中添加以下代码\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n// \$value 是当前字段的值\r\n// \$p1、\$p2 是自定义参数\r\nGrid\\Column::macro('myHeader', function (\$value, \$p1, \$p2 = null) {\r\n    // MyHeader 需要实现 Illuminate\\Contracts\\Support\\Renderable 接口\r\n    // 当然这里也可以直接传字符串\r\n    return \$this->addHeader(new MyHeader(\$this, \$p1, \$p2));\r\n});\r\n```\r\n\r\n`MyHeader` 类\r\n```php\r\nuse Dcat\\Admin\\Grid\\Column;\r\nuse Illuminate\\Contracts\\Support\\Renderable;\r\n\r\nclass MyHeader implements Renderable\r\n{\r\n    public function __construct(Column \$column, \$p1, \$p2)\r\n    {\r\n        ...\r\n    }\r\n    \r\n    public function render()\r\n    {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$grid->column('user')->myHeader(\$p1, \$p2);\r\n\r\n\$grid->column('first_name')->myHeader(\$p1);\r\n```", 'order' => 2, 'created_at' => "2024-06-26 10:36:21", 'updated_at' => "2024-06-26 10:36:21", 'slug' => "use-and-extension-of-columns"],
            ['id' => 16, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "列的显示和扩展", 'content' => "# 列的显示和扩展\r\n\r\n\r\n数据表格内置了很多对于列的操作方法，可以通过这些方法很灵活的操作列数据。\r\n\r\n\r\n\r\n## 根据条件显示不同的组件\r\n有些情况我们需要根据某个条件去判断是否使用列的某个显示功能：\r\n> 需要注意的是，`Grid\\Column::if`只对列的显示相关功能有效，其他方法如表头的相关操作都不能使用此方法！\r\n\r\n```php\r\n\$grid->column('config')\r\n    ->if(function (\$column) {\r\n        // 获取当前行其他字段值\r\n        \$username = \$this->username;\r\n        \r\n    \t// \$column->getValue() 是当前字段的值\r\n\t\t// 返回 \"真\" 或 \"假\"，\"真\" 则执行 \"if\" 后面的代码\r\n        return \$column->getValue() === true;\r\n    })\r\n    ->display(\$view)\r\n    ->copyable()\r\n    ->else()\r\n    ->display('');\r\n```\r\n上面写法等同于\r\n```php\r\n\$grid->column('config')\r\n    ->if(function (\$column) {\r\n        return \$column->getValue();\r\n    })\r\n    ->then(function (Grid\\Column \$column) {\r\n        \$column->display(\$view)->copyable();\r\n    })\r\n    ->else(function (Grid\\Column \$column) {\r\n        \$column->display('');\r\n    });\r\n```\r\n\r\n支持多个`if`\r\n```php\r\n\$grid->column('config')\r\n    ->if(...)\r\n    ->then(...)\r\n    ->else(...)\r\n    \r\n    ->if(...)\r\n    ->then(...)\r\n    ->else(...);\r\n```\r\n\r\n终结条件判断`end`\r\n```php\r\n\$grid->column('status')\r\n    ->if(...) // 条件1\r\n    ->display(...)\r\n    ->display(...)\r\n    \r\n    ->if(...) // 条件2\r\n    ->display(...)\r\n    ->display(...)\r\n    \r\n    ->end() // 终结前面的条件判断\r\n    ->display(...); // 所有条件都能生效\r\n```\r\n\r\n\r\n## 列显示\r\n\r\n`model-grid`内置了若干方法来帮助你扩展列功能\r\n\r\n### display\r\n\r\n`Dcat\\Admin\\Grid\\Column`对象内置了`display()`方法来通过传入的回调函数来处理当前列的值，\r\n```php\r\n\$grid->column('title')->display(function (\$title) {\r\n\r\n    return \"<span style='color:blue'>\$title</span>\";\r\n    \r\n});\r\n```\r\n在传入的匿名函数中可以通过任何方式对数据进行处理，另外匿名函数绑定了当前列的数据作为父对象，可以在函数中调用当前行的数据：\r\n```php\r\n\$grid->column('first_name');\r\n\r\n\$grid->column('last_name');\r\n\r\n// 不存在的`full_name`字段\r\n\$grid->column('full_name')->display(function () {\r\n    return \$this->first_name . ' ' . \$this->last_name;\r\n});\r\n```\r\n\r\n### 设置列的HTML属性\r\n设列的`html`属性\r\n```php\r\n\$grid->column('name')->setAttributes(['style' => 'font-size:14px']);\r\n```\r\n\r\n### 列视图\r\n`view`方法可以引入一个视图文件。\r\n```php\r\n\$grid->column('content')->view('admin.fields.content');\r\n```\r\n\r\n默认会传入视图的三个变量：\r\n - `\$model` 当前行数据\r\n - `\$name` 字段名称\r\n - `\$value` 为当前列的值\r\n \r\n模板代码如下：\r\n```blade\r\n<label>名称：{{ \$name }}</label>\r\n<label>值：{{ \$value }}</label>\r\n<label>其他字段：{{ \$model->title }}</label>\r\n```\r\n\r\n\r\n\r\n### 图片\r\n\r\n```php\r\n\$grid->column('picture')->image();\r\n\r\n//设置服务器和宽高\r\n\$grid->column('picture')->image('http://xxx.com', 100, 100);\r\n\r\n// 显示多图\r\n\$grid->column('pictures')->display(function (\$pictures) {\r\n    \r\n    return json_decode(\$pictures, true);\r\n    \r\n})->image('http://xxx.com', 100, 100);\r\n```\r\n\r\n### 显示label标签\r\n\r\n支持`Dcat\\Admin\\Color`类中内置的所有颜色\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$grid->column('name')->label();\r\n\r\n// 设置颜色，直接传别名\r\n\$grid->column('name')->label('danger');\r\n\r\n// 也可以这样使用\r\n\$grid->column('name')->label(Admin::color()->danger());\r\n\r\n// 也可以直接传颜色代码\r\n\$grid->column('name')->label('#222');\r\n```\r\n\r\n给不同的值设置不同的颜色\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$grid->column('state')->using([1 => '未处理', 2 => '已处理', ...])->label([\r\n    'default' => 'primary', // 设置默认颜色，不设置则默认为 default\r\n    \r\n\t1 => 'primary',\r\n\t2 => 'danger',\r\n\t3 => 'success',\r\n\t4 => Admin::color()->info(),\r\n]);\r\n```\r\n\r\n### 显示badge标签\r\n\r\n支持`Dcat\\Admin\\Color`类中内置的所有颜色\r\n\r\n```php\r\n\$grid->column('name')->badge();\r\n\r\n// 设置颜色，直接传别名\r\n\$grid->column('name')->badge('danger');\r\n\r\n// 也可以这样使用\r\n\$grid->column('name')->badge(Admin::color()->danger());\r\n\r\n// 也可以直接传颜色代码\r\n\$grid->column('name')->badge('#222');\r\n```\r\n\r\n给不同的值设置不同的颜色\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$grid->state->using([1 => '未处理', 2 => '已处理', ...])->badge([\r\n    'default' => 'primary', // 设置默认颜色，不设置则默认为 default\t\r\n    \r\n    1 => 'primary',\r\n\t2 => 'danger',\r\n\t3 => 'success',\r\n\t4 => Admin::color()->info(),\r\n]);\r\n```\r\n\r\n<a name=\"bool\"></a>\r\n### 布尔值显示 (bool)\r\n\r\n\r\n将这一列转为`bool`值之后显示为`✓`和`✗`。\r\n\r\n```php\r\n\$grid->column('approved')->bool();\r\n```\r\n\r\n你也可以按照这一列的值指定显示，比如字段的值为`Y`和`N`表示`true`和`false`\r\n\r\n```php\r\n\$grid->column('approved')->bool(['Y' => true, 'N' => false]);\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/4fc2757eda2c15de2291ff9ca3fb885b667b7f35c6376.png)\r\n\r\n\r\n\r\n\r\n### 圆点前缀 (dot)\r\n\r\n通过`dot`方法可以在列文字前面加上一个带颜色的圆点\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$grid->column('state')\r\n\t->using([1 => '未处理', 2 => '已处理', ...])\r\n\t->dot(\r\n\t\t[\r\n\t\t\t1 => 'primary',\r\n\t\t\t2 => 'danger',\r\n\t\t\t3 => 'success',\r\n\t\t\t4 => Admin::color()->info(),\r\n\t\t], \r\n\t    'primary' // 第二个参数为默认值\r\n\t);\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/46b70e504cf7a598204ba87faab3e495667b7f49942e0.png)\r\n\r\n\r\n<a name=\"expand\"></a>\r\n### 列展开 (expand)\r\n`expand`方法可以把内容隐藏，点击按钮的时候显示在表格下一行\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Card;\r\n\r\n\$grid->column('content')\r\n    ->display('详情') // 设置按钮名称\r\n    ->expand(function () {\r\n        // 返回显示的详情\r\n        // 这里返回 content 字段内容，并用 Card 包裹起来\r\n        \$card = new Card(null, \$this->content);\r\n    \r\n        return \"<div style='padding:10px 10px 0'>\$card</div>\";\r\n    });\r\n```\r\n也可以通过以下方式设置按钮\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Card;\r\n\r\n\$grid->column('content')->expand(function (Grid\\Displayers\\Expand \$expand) {\r\n    // 设置按钮名称\r\n    \$expand->button('详情');\r\n\r\n    // 返回显示的详情\r\n    // 这里返回 content 字段内容，并用 Card 包裹起来\r\n    \$card = new Card(null, \$this->content);\r\n\r\n    return \"<div style='padding:10px 10px 0'>\$card</div>\";\r\n});\r\n```\r\n\r\n\r\n#### 异步加载\r\n\r\n> 更多用法请参考文档[异步加载](https://learnku.com/docs/dcat-admin/2.x/asynchronous-loading/9327)\r\n\r\n定义渲染类，继承`Dcat\\Admin\\Support\\LazyRenderable`\r\n\r\n```php\r\nuse App\\Models\\Post as PostModel;\r\nuse Dcat\\Admin\\Support\\LazyRenderable;\r\nuse Dcat\\Admin\\Widgets\\Table;\r\n\r\nclass Post extends LazyRenderable\r\n{\r\n    public function render()\r\n    {\r\n        // 获取ID\r\n        \$id = \$this->key;\r\n        \r\n        // 获取其他自定义参数\r\n        \$type = \$this->post_type;\r\n\r\n        \$data = PostModel::where('user_id', \$id)\r\n            ->where('type', \$type)\r\n            ->get(['title', 'body', 'body', 'created_at'])\r\n            ->toArray();\r\n\r\n        \$titles = [\r\n            'User ID',\r\n            'Title',\r\n            'Body',\r\n            'Created At',\r\n        ];\r\n\r\n        return Table::make(\$titles, \$data);\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n```php\r\n\$grid->post->display('View')->expand(Post::make(['post_type' => 1]));\r\n\r\n// 可以在闭包内返回异步加载类的实例\r\n\$grid->post->expand(function () {\r\n    // 允许在闭包内返回异步加载类的实例\r\n\r\n    return Post::make(['title' => \$this->title]);\r\n});\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/c8429c5f1a0cc00b725dbca76477cb86667b7f6c562ca.gif)\r\n\r\n\r\n#### 异步加载工具表单\r\n\r\n定义[工具表单](https://learnku.com/docs/dcat-admin/1.x/tools-form/8125)类如下\r\n\r\n> {tip} 更多用法请参考[异步加载](https://learnku.com/docs/dcat-admin/2.x/asynchronous-loading/9327)\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass UserProfile extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget;\r\n\r\n    public function handle(array \$input)\r\n    {\r\n        // 接收外部传递参数\r\n\t\t\$type = \$this->payload['type'] ?? null;\r\n        \r\n        return \$this->response()->success('保存成功');\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        // 接收外部传递参数\r\n        \$type = \$this->payload['type'] ?? null;\r\n        \r\n        \$this->text('name', trans('admin.name'))->required()->help('用户昵称');\r\n        \$this->image('avatar', trans('admin.avatar'))->autoUpload();\r\n\r\n        \$this->password('old_password', trans('admin.old_password'));\r\n\r\n        \$this->password('password', trans('admin.password'))\r\n            ->minLength(5)\r\n            ->maxLength(20)\r\n            ->customFormat(function (\$v) {\r\n                if (\$v == \$this->password) {\r\n                    return;\r\n                }\r\n\r\n                return \$v;\r\n            })\r\n            ->help('请输入5-20个字符');\r\n        \$this->password('password_confirmation', trans('admin.password_confirmation'))\r\n            ->same('password')\r\n            ->help('请输入确认密码');\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$grid->user->display('View')->expand(UserProfile::make(['type' => 1]));\r\n```\r\n\r\n\r\n<a name=\"modal\"></a>\r\n### 弹出模态框 (modal)\r\n`modal`方法可以把内容隐藏，点击按钮的时候显示在模态框中\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Card;\r\n\r\n\$grid->column('content')\r\n    ->display('查看') // 设置按钮名称\r\n    ->modal(function (\$modal) {\r\n        // 设置弹窗标题\r\n        \$modal->title('标题 '.\$this->username);\r\n\t\t\r\n\t\t// 自定义图标\r\n\t\t\$modal->icon('feather icon-x');\r\n    \r\n        \$card = new Card(null, \$this->content);\r\n    \r\n        return \"<div style='padding:10px 10px 0'>\$card</div>\";\r\n    });\r\n\r\n// 也可以通过这种方式设置弹窗标题\r\n\$grid->column('content')\r\n    ->display('查看') // 设置按钮名称\r\n    ->modal('弹窗标题', ...);\r\n```\r\n\r\n\r\n#### 异步加载\r\n\r\n> 更多用法请参考文档[异步加载](https://learnku.com/docs/dcat-admin/2.x/asynchronous-loading/9327)       \r\n\r\n定义渲染类，继承`Dcat\\Admin\\Support\\LazyRenderable`\r\n\r\n```php\r\nuse App\\Models\\Post as PostModel;\r\nuse Dcat\\Admin\\Support\\LazyRenderable;\r\nuse Dcat\\Admin\\Widgets\\Table;\r\n\r\nclass Post extends LazyRenderable\r\n{\r\n    public function render()\r\n    {\r\n        // 获取ID\r\n        \$id = \$this->key;\r\n        \r\n        // 获取其他自定义参数\r\n        \$type = \$this->post_type;\r\n\r\n        \$data = PostModel::where('user_id', \$id)\r\n            ->where('type', \$type)\r\n            ->get(['title', 'body', 'body', 'created_at'])\r\n            ->toArray();\r\n\r\n        \$titles = [\r\n            'User ID',\r\n            'Title',\r\n            'Body',\r\n            'Created At',\r\n        ];\r\n\r\n        return Table::make(\$titles, \$data);\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n```php\r\n\$grid->post->display('View')->modal('Post', Post::make(['post_type' => 2]));\r\n\r\n// 可以在闭包内返回异步加载类的实例\r\n\$grid->post->modal(function (\$modal) {\r\n    \$modal->title('自定义弹窗标题');\r\n\r\n    // 允许在闭包内返回异步加载类的实例\r\n    return Post::make(['title' => \$this->title]);\r\n});\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/1679b6d2989cd18046904cad5b53c31b667b7fa21eb8f.gif)\r\n\r\n\r\n\r\n#### 异步加载工具表单\r\n\r\n定义[工具表单](https://learnku.com/docs/dcat-admin/2.x/tools-form/8125)类如下\r\n\r\n> 更多用法请参考[异步加载](https://learnku.com/docs/dcat-admin/2.x/asynchronous-loading/9327)\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass UserProfile extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget;\r\n\r\n    public function handle(array \$input)\r\n    {\r\n        // 接收外部传递参数\r\n\t\t\$type = \$this->payload['type'] ?? null;\r\n        \r\n        return \$this->response()->success('保存成功');\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        // 接收外部传递参数\r\n        \$type = \$this->payload['type'] ?? null;\r\n        \r\n        \$this->text('name', trans('admin.name'))->required()->help('用户昵称');\r\n        \$this->image('avatar', trans('admin.avatar'))->autoUpload();\r\n\r\n        \$this->password('old_password', trans('admin.old_password'));\r\n\r\n        \$this->password('password', trans('admin.password'))\r\n            ->minLength(5)\r\n            ->maxLength(20)\r\n            ->customFormat(function (\$v) {\r\n                if (\$v == \$this->password) {\r\n                    return;\r\n                }\r\n\r\n                return \$v;\r\n            })\r\n            ->help('请输入5-20个字符');\r\n        \$this->password('password_confirmation', trans('admin.password_confirmation'))\r\n            ->same('password')\r\n            ->help('请输入确认密码');\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$grid->user->display('View')->modal(UserProfile::make(['type' => 1]));\r\n```\r\n\r\n\r\n### 进度条 (progressBar)\r\n`progressBar`进度条\r\n```php\r\n\$grid->rate->progressBar();\r\n\r\n//设置颜色，默认`primary`,可选`danger`、`warning`、`info`、`primary`、`success`\r\n\$grid->rate->progressBar('success');\r\n\r\n// 设置进度条尺寸和最大值\r\n\$grid->rate->progressBar('success', 'sm', 100);\r\n```\r\n\r\n### showTreeInDialog\r\n`showTreeInDialog`方法可以把一个带有层级关系的数组呈现为树形弹窗，比如权限就可以用此方法展示\r\n```php\r\n// 查出所有的权限数据\r\n\$nodes = (new \$permissionModel)->allNodes();\r\n\r\n// 传入二维数组（未分层级）\r\n\$grid->permissions->showTreeInDialog(\$nodes);\r\n\r\n// 也可以传入闭包\r\n\$grid->permissions->showTreeInDialog(function (Grid\\Displayers\\DialogTree \$tree) use (&\$nodes, \$roleModel) {\r\n    // 设置所有节点\r\n    \$tree->nodes(\$nodes);\r\n    \r\n    // 设置节点数据字段名称，默认\"id\"，\"name\"，\"parent_id\"\r\n    \$tree->setIdColumn('id');\r\n    \$tree->setTitleColumn('title');\r\n    \$tree->setParentColumn('parent_id');\r\n\r\n    // \$this->roles 可以获取当前行的字段值\r\n    foreach (array_column(\$this->roles, 'slug') as \$slug) {\r\n        if (\$roleModel::isAdministrator(\$slug)) {\r\n            // 选中所有节点\r\n            \$tree->checkAll();\r\n        }\r\n    }\r\n});\r\n```\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/405caece48dee843b6c8d8620f311395667b7fd2ef40b.png)\r\n\r\n\r\n### 内容映射 (using)\r\n```php\r\n\$grid->status->using([0 => '未激活', 1 => '正常']);\r\n\r\n// 第二个参数为默认值\r\n\$grid->gender->using([1 => '男', 2 => '女'], '未知');\r\n```\r\n\r\n### 字符串分割为数组\r\n`explode`方法可以把字符串分割为数组。\r\n```php\r\n\$grid->tag->explode()->label();\r\n\r\n// 可以指定分隔符，默认\",\"\r\n\$grid->tag->explode('|')->label();\r\n```\r\n\r\n### prepend\r\n\r\n`prepend` 方法用于给 `string` 或 `array` 类型的值前面插入内容。\r\n\r\n```php\r\n// 当字段值是一个字符串\r\n\$grid->email->prepend('mailto:');\r\n\r\n// 当字段值是一个数组\r\n\$grid->arr->prepend('first item');\r\n```\r\n\r\n`prepend`方法允许传入闭包参数\r\n```php\r\n\$grid->email->prepend(function (\$value, \$original) {\r\n    // \$value 是当前字段值\r\n    // \$original 是当前字段从数据库中查询出来的原始值\r\n    \r\n    // 获取其他字段值\r\n    \$username = \$this->username;\r\n    \r\n    return \"[{\$username}]\";\r\n});\r\n```\r\n\r\n### append\r\n`append` 方法用于给 `string` 或 `array` 类型的值后面插入内容。\r\n\r\n```php\r\n// 当字段值是一个字符串\r\n\$grid->email->append('@gmail.com');\r\n\r\n// 当字段值是一个数组\r\n\$grid->arr->append('last item');\r\n```\r\n\r\n`append`方法允许传入闭包参数\r\n```php\r\n\$grid->email->append(function (\$value, \$original) {\r\n    // \$value 是当前字段值\r\n    // \$original 是当前字段从数据库中查询出来的原始值\r\n    \r\n    // 获取其他字段值\r\n    \$username = \$this->username;\r\n    \r\n    return \"[{\$username}]\";\r\n});\r\n```\r\n\r\n### 字符串或数组截取 (limit)\r\n\r\n```php\r\n// 最多显示50个字符\r\n\$grid->column('content')->limit(50, '...');\r\n\r\n// 如果字段值是数组也支持\r\n\$grid->tags->limit(3);\r\n```\r\n\r\n### 列二维码 (qrcode)\r\n```php\r\n\$grid->website->qrcode(function () {\r\n    return \$this->url;\r\n}, 200, 200);\r\n```\r\n\r\n### 可复制 (copyable)\r\n```php\r\n\$grid->website->copyable();\r\n```\r\n\r\n\r\n### 可排序 (orderable)\r\n\r\n通过`Column::orderable`可以开启字段可排序功能，此功能需要在你的模型类中`use ModelTree`或`use SortableTrait`，并且需要继承`Spatie\\EloquentSortable\\Sortable`接口。\r\n\r\n\r\n#### SortableTrait\r\n\r\n如果你的数据不是层级结构数据，可以直接使用`use SortableTrait`，更多用法可参考[eloquent-sortable](https://github.com/spatie/eloquent-sortable)。\r\n\r\n模型\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Spatie\\EloquentSortable\\Sortable;\r\nuse Spatie\\EloquentSortable\\SortableTrait;\r\n\r\nclass MyModel extends Model implements Sortable\r\n{\r\n    use SortableTrait;\r\n\r\n    protected \$sortable = [\r\n        // 设置排序字段名称\r\n        'order_column_name' => 'order',\r\n        // 是否在创建时自动排序，此参数建议设置为true\r\n        'sort_when_creating' => true,\r\n    ];\r\n}\r\n```\r\n\r\n使用\r\n```php\r\n\$grid->model()->orderBy('order');\r\n\r\n\$grid->order->orderable();\r\n```\r\n\r\n#### ModelTree\r\n\r\n如果你的数据是层级结构数据，可以直接使用`use Model`，下面以权限模型为例来演示用法\r\n\r\n> `ModelTree`实际上也是继承了[eloquent-sortable](https://github.com/spatie/eloquent-sortable)的功能。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Dcat\\Admin\\Models;\r\n\r\nuse Dcat\\Admin\\Traits\\HasDateTimeFormatter;\r\nuse Dcat\\Admin\\Traits\\ModelTree;\r\nuse Spatie\\EloquentSortable\\Sortable;\r\n\r\nclass Permission extends Model implements Sortable\r\n{\r\n    use HasDateTimeFormatter,\r\n        ModelTree {\r\n            ModelTree::boot as treeBoot;\r\n        }\r\n        \r\n    ...    \r\n}        \r\n```\r\n\r\n使用\r\n```php\r\n\$grid->order->orderable();\r\n```\r\n\r\n\r\n\r\n### 链接 (link)\r\n\r\n将字段显示为一个链接。\r\n\r\n```php\r\n// link方法不传参数时，链接的`href`和`text`都是当前列的值\r\n\$grid->column('homepage')->link();\r\n\r\n// 传入闭包\r\n\$grid->column('homepage')->link(function (\$value) {\r\n    return admin_url('users/'.\$value);\r\n});\r\n```\r\n\r\n<a name=\"action\"></a>\r\n### 行操作 (action)\r\n\r\n> 在使用这个方法之前，请先阅读[自定义操作-行操作](https://learnku.com/docs/dcat-admin/2.x/use-and-extension-of-rows/8092)\r\n\r\n这个功能可以将某一列显示为一个**行操作**的按钮，比如下面所示是一个标星和取消标星的列操作，\r\n点击这一列的星标图标之后, 后台会切换字段的状态，页面图标也跟着切换，具体实现代码如下：\r\n\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Grid\\RowAction;\r\n\r\nuse Dcat\\Admin\\Grid\\RowAction;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Star extends RowAction\r\n{\r\n    protected function html()\r\n    {\r\n        \$icon = (\$this->row->{\$this->getColumnName()}) ? 'fa-star' : 'fa-star-o';\r\n\r\n        return <<<HTML\r\n<i class=\"{\$this->getElementClass()} fa {\$icon}\"></i>\r\nHTML;\r\n    }\r\n\r\n    public function handle(Request \$request)\r\n    {\r\n        try {\r\n            \$class = \$request->class;\r\n            \$column = \$request->column;\r\n            \$id = \$this->getKey();\r\n\r\n            \$model = \$class::find(\$id);\r\n            \$model->{\$column} = (int) !\$model->{\$column};\r\n            \$model->save();\r\n\r\n            return \$this->response()->success(\"success\")->refresh();\r\n        } catch (\\Exception \$e) {\r\n            return \$this->response()->error(\$e->getMessage());\r\n        }\r\n    }\r\n\r\n    public function parameters()\r\n    {\r\n        return [\r\n            'class' => \$this->modelClass(),\r\n            'column' => \$this->getColumnName(),\r\n        ];\r\n    }\r\n\r\n    public function getColumnName()\r\n    {\r\n        return \$this->column->getName();\r\n    }\r\n\r\n    public function modelClass()\r\n    {\r\n        return get_class(\$this->parent->model()->repository()->model());\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\nprotected function grid()\r\n{\r\n    \$grid = new Grid(new \$this->model());\r\n\r\n    \$grid->column('star', '-')->action(Star::class);  // here\r\n    \$grid->column('id', 'ID')->sortable()->bold();\r\n    \r\n    return \$grid;\r\n}\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/b2da1dd37fc7e7aa009e5798b6771399667b7ff1f3ae3.png)\r\n\r\n\r\n## 帮助方法\r\n\r\n### 字符串操作\r\n如果当前里的输出数据为字符串，那么可以通过链式方法调用`Illuminate\\Support\\Str`的方法。\r\n\r\n比如有如下一列，显示`title`字段的字符串值:\r\n\r\n```php\r\n\$grid->title();\r\n```\r\n\r\n在`title`列输出的字符串基础上调用`Str::title()`方法\r\n```php\r\n\$grid->title()->title();\r\n```\r\n调用方法之后输出的还是字符串，所以可以继续调用`Illuminate\\Support\\Str`的方法：\r\n```php\r\n\$grid->title()->title()->ucfirst();\r\n\r\n\$grid->title()->title()->ucfirst()->substr(1, 10);\r\n\r\n```\r\n\r\n### 数组操作\r\n如果当前列输出的是数组，可以直接链式调用`Illuminate\\Support\\Collection`方法。\r\n\r\n比如`tags`列是从一对多关系取出来的数组数据：\r\n```php\r\n\$grid->tags();\r\n\r\narray (\r\n  0 => \r\n  array (\r\n    'id' => '16',\r\n    'name' => 'php',\r\n    'created_at' => '2016-11-13 14:03:03',\r\n    'updated_at' => '2016-12-25 04:29:35',\r\n    \r\n  ),\r\n  1 => \r\n  array (\r\n    'id' => '17',\r\n    'name' => 'python',\r\n    'created_at' => '2016-11-13 14:03:09',\r\n    'updated_at' => '2016-12-25 04:30:27',\r\n  ),\r\n)\r\n\r\n```\r\n\r\n调用`Collection::pluck()`方法取出数组的中的`name`列\r\n```php\r\n\$grid->tags()->pluck('name');\r\n\r\narray (\r\n    0 => 'php',\r\n    1 => 'python',\r\n  ),\r\n\r\n```\r\n取出`name`列之后输出的还是数组，还能继续调用用`Illuminate\\Support\\Collection`的方法\r\n\r\n```php\r\n\$grid->tags()->pluck('name')->map('ucwords');\r\n\r\narray (\r\n    0 => 'Php',\r\n    1 => 'Python',\r\n  ),\r\n```\r\n将数组输出为字符串\r\n```php\r\n\$grid->tags()->pluck('name')->map('ucwords')->implode('-');\r\n\r\n\"Php-Python\"\r\n```\r\n\r\n### 混合使用\r\n\r\n在上面两种类型的方法调用中，只要上一步输出的是确定类型的值，便可以调用类型对应的方法，所以可以很灵活的混合使用。\r\n\r\n比如`images`字段是存储多图片地址数组的JSON格式字符串类型：\r\n```php\r\n\r\n\$grid->images();\r\n\r\n// \"['foo.jpg', 'bar.png']\"\r\n\r\n// 链式方法调用来显示多图\r\n\$grid->images()->display(function (\$images) {\r\n    return json_decode(\$images, true);\r\n    \r\n})->map(function (\$path) {\r\n    return 'http://localhost/images/'. \$path;\r\n    \r\n})->image();\r\n\r\n```\r\n\r\n\r\n## 扩展列的显示功能\r\n\r\n可以通过两种方式扩展列功能，第一种是通过匿名函数的方式。\r\n>扩展列功能方法后IDE默认是不会自动补全的，这时候可以通过`php artisan admin:ide-helper`生成IDE提示文件。\r\n\r\n### 匿名函数\r\n在`app/Admin/bootstrap.php`加入以下代码:\r\n```php\r\nuse Dcat\\Admin\\Grid\\Column;\r\n\r\n// 第二个参数是自定义参数\r\nColumn::extend('color', function (\$value, \$color) {\r\n    return \"<span style='color: \$color'>\$value</span>\";\r\n});\r\n```\r\n然后在`model-grid`中使用这个扩展：\r\n```php\r\n\$grid->title()->color('#ccc');\r\n```\r\n\r\n### 扩展类\r\n如果列显示逻辑比较复杂，可以通过扩展类来实现。\r\n\r\n扩展类`app/Admin/Extensions/Popover.php`:\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions;\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Grid\\Displayers\\AbstractDisplayer;\r\n\r\nclass Popover extends AbstractDisplayer\r\n{\r\n    public function display(\$placement = 'left')\r\n    {\r\n        Admin::script(\"\$('[data-toggle=\\\"popover\\\"]').popover()\");\r\n\r\n        return <<<EOT\r\n<button type=\"button\"\r\n    class=\"btn btn-secondary\"\r\n    title=\"popover\"\r\n    data-container=\"body\"\r\n    data-toggle=\"popover\"\r\n    data-placement=\"\$placement\"\r\n    data-content=\"{\$this->value}\"\r\n    >\r\n  弹出提示\r\n</button>\r\nEOT;\r\n\r\n    }\r\n}\r\n```\r\n然后在`app/Admin/bootstrap.php`注册扩展类：\r\n```php\r\nuse Dcat\\Admin\\Grid\\Column;\r\nuse App\\Admin\\Extensions\\Popover;\r\n\r\nColumn::extend('popover', Popover::class);\r\n```\r\n然后就能在`model-grid`中使用了：\r\n```php\r\n\$grid->desciption()->popover('right');\r\n```", 'order' => 3, 'created_at' => "2024-06-26 10:41:59", 'updated_at' => "2024-06-26 10:41:59", 'slug' => "display-and-expansion-of-columns"],
            ['id' => 17, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "行的使用和扩展", 'content' => "# 行的使用和扩展\r\n\r\n### 启用或禁用默认操作按钮\r\n\r\n`model-grid`默认有四个行操作`编辑`、`快捷编辑`、`删除`和`详情`，可以通过下面的方式关闭它们：\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n \$grid->actions(function (Grid\\Displayers\\Actions \$actions) {\r\n    \$actions->disableDelete();\r\n    \$actions->disableEdit();\r\n    \$actions->disableQuickEdit();\r\n    \$actions->disableView();\r\n});\r\n\r\n// 也可以通过以下方式启用或禁用按钮\r\n\$grid->disableDeleteButton();\r\n\$grid->disableEditButton();\r\n\$grid->disableQuickEditButton();\r\n\$grid->disableViewButton();\r\n```\r\n\r\n### 切换行操作按钮显示方式\r\n\r\n全局默认的行操作按钮显示方式可以通过配置参数`admin.grid.grid_action_class`参数进行配置，目前支持的行操作按钮显示方式有以下两种：\r\n\r\n- `Dcat\\Admin\\Grid\\Displayers\\DropdownActions` 下拉菜单方式\r\n- `Dcat\\Admin\\Grid\\Displayers\\Actions` 图标展开方式\r\n- `Dcat\\Admin\\Grid\\Displayers\\ContextMenuActions` 鼠标右键显示下拉菜单 (Since `v1.4.5`)\r\n\r\n```php\r\n    ...\r\n\r\n    'grid' => [\r\n\r\n        /*\r\n        |--------------------------------------------------------------------------\r\n        | The global Grid action display class.\r\n        |--------------------------------------------------------------------------\r\n        */\r\n        'grid_action_class' => Dcat\\Admin\\Grid\\Displayers\\DropdownActions::class,\r\n    ],\r\n    \r\n    ...\r\n```\r\n\r\n在控制器中切换显示方式\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\npublic function grid()\r\n{\r\n    return Grid(new Model(), function (Grid \$grid) {\r\n        \$grid->setActionClass(Grid\\Displayers\\Actions::class);\r\n        \r\n        ...\r\n    });\r\n}\r\n```\r\n\r\n### 获取行序号 (index)\r\n\r\n序号从 `0` 开始计算\r\n\r\n```php\r\n// 在 display 回调中使用\r\n\$grid->column('序号')->display(function () {\r\n    return \$this->_index + 1;\r\n});\r\n\r\n\r\n// 在行操作 action 中使用\r\n\$grid->actions(function (\$actions) {\r\n    \$index = \$this->_index;\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n### 获取当前行数据\r\n\r\n可以通过传入的`\$actions`参数来获取当前行的数据：\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->actions(function (Grid\\Displayers\\Actions \$actions) {\r\n    // 当前行的数据数组\r\n    \$rowArray = \$actions->row->toArray();\r\n    \r\n    // 当前行的某个字段的数据\r\n    \$email = \$actions->row->email;\r\n    \r\n    // 获取当前行主键值\r\n    \$id = \$actions->getKey();\r\n});\r\n```\r\n\r\n### 添加自定义按钮\r\n\r\n如果有自定义的操作按钮，可以通过下面的方式添加：\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->actions(function (Grid\\Displayers\\Actions \$actions) {\r\n    // append一个操作\r\n    \$actions->append('<a href=\"\"><i class=\"fa fa-eye\"></i></a>');\r\n\r\n    // prepend一个操作\r\n    \$actions->prepend('<a href=\"\"><i class=\"fa fa-paper-plane\"></i></a>');\r\n});\r\n```\r\n\r\n\r\n### 添加复杂操作按钮\r\n\r\n如果有比较复杂的操作，可以参考下面的方式：\r\n\r\n\r\n先定义行操作类继承`Dcat\\Admin\\Grid\\RowAction`\r\n\r\n> {tip} 动作类更详细的用法，请参考[动作基本使用](https://learnku.com/docs/dcat-admin/1.x/basic-use/8124)以及[数据表格动作](https://learnku.com/docs/dcat-admin/1.x/data-table/8126)。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions;\r\n\r\nuse Dcat\\Admin\\Grid\\RowAction;\r\n\r\nclass CheckRow extends RowAction\r\n{\r\n    /**\r\n     * 返回字段标题\r\n     * \r\n     * @return string\r\n     */\r\n    public function title()\r\n    {\r\n        return 'Check row';\r\n    }\r\n    \r\n    /**\r\n     * 添加JS\r\n     * \r\n     * @return string\r\n     */\r\n    protected function script()\r\n    {\r\n        return <<<JS\r\n\$('.grid-check-row').on('click', function () {\r\n    \r\n    // Your code.\r\n    console.log(\$(this).data('id'));\r\n    \r\n});\r\nJS;\r\n    }\r\n\r\n    public function html()\r\n    {\r\n        // 获取当前行数据ID\r\n        \$id = \$this->getKey();\r\n        \r\n        // 获取当前行数据的用户名\r\n        \$username = \$this->row->username;\r\n        \r\n        // 这里需要添加一个class, 和上面script方法对应\r\n        \$this->setHtmlAttribute(['data-id' => \$id, 'email' => \$username, 'class' => 'grid-check-row']);\r\n\r\n        return parent::html();\r\n    }\r\n}\r\n```\r\n然后添加操作：\r\n```php\r\n\$grid->actions(new CheckRow());\r\n\r\n// 也可以通过这种方式添加\r\n\$grid->actions(function (Grid\\Displayers\\Actions \$actions) {\r\n    \$actions->append(new CheckRow());\r\n});\r\n```\r\n\r\n### 操作按钮需要与API交互\r\n\r\n如果你的操作类需要与后台接口交互，则可以在你的操作类中加上`handle`方法，这样就可以很方便的在同一个类里面处理完所有逻辑\r\n\r\n> {tip} 动作类更详细的用法，请参考[动作基本使用](https://learnku.com/docs/dcat-admin/1.x/basic-use/8124)以及[数据表格动作](https://learnku.com/docs/dcat-admin/1.x/data-table/8126)。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\RowActions;\r\n\r\nuse Dcat\\Admin\\Grid\\RowAction;\r\nuse Illuminate\\Http\\Request;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Copy extends RowAction\r\n{\r\n    protected \$model;\r\n\r\n    public function __construct(string \$model = null)\r\n    {\r\n        \$this->model = \$model;\r\n    }\r\n\r\n    /**\r\n     * 标题\r\n     *\r\n     * @return string\r\n     */\r\n    public function title()\r\n    {\r\n        return 'Copy';\r\n    }\r\n\r\n    /**\r\n     * 设置确认弹窗信息，如果返回空值，则不会弹出弹窗\r\n     *\r\n     * 允许返回字符串或数组类型\r\n     *\r\n     * @return array|string|void\r\n     */\r\n    public function confirm()\r\n    {\r\n        return [\r\n            // 确认弹窗 title\r\n            \"您确定要复制这行数据吗？\",\r\n            // 确认弹窗 content\r\n            \$this->row->username,\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * 处理请求\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return \\Dcat\\Admin\\Actions\\Response\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        // 获取当前行ID\r\n        \$id = \$this->getKey();\r\n\r\n        // 获取 parameters 方法传递的参数\r\n        \$username = \$request->get('username');\r\n        \$model = \$request->get('model');\r\n\r\n        // 复制数据\r\n        \$model::find(\$id)->replicate()->save();\r\n\r\n        // 返回响应结果并刷新页面\r\n        return \$this->response()->success(\"复制成功: [{\$username}]\")->refresh();\r\n    }\r\n\r\n    /**\r\n     * 设置要POST到接口的数据\r\n     *\r\n     * @return array\r\n     */\r\n    public function parameters()\r\n    {\r\n        return [\r\n            // 发送当前行 username 字段数据到接口\r\n            'username' => \$this->row->username,\r\n            // 把模型类名传递到接口\r\n            'model' => \$this->model,\r\n        ];\r\n    }\r\n}\r\n\r\n```\r\n\r\n使用\r\n```php\r\nuse App\\Models\\User;\r\n\r\n\$grid->actions([new Copy(User::class)]);\r\n\r\n// 也可以通过这种方式添加\r\n\$grid->actions(function (Grid\\Displayers\\Actions \$actions) {\r\n    \$actions->append(new Copy(User::class));\r\n});\r\n```\r\n\r\n### 表单弹窗\r\n\r\n请参考文档[工具表单 - 弹窗](https://learnku.com/docs/dcat-admin/1.x/tools-form/8125#modal)", 'order' => 4, 'created_at' => "2024-06-26 10:42:46", 'updated_at' => "2024-06-26 10:42:46", 'slug' => "use-and-extension-of-rows"],
            ['id' => 18, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "工具栏", 'content' => "# 工具栏\r\n\r\n## 工具按钮\r\n\r\n在`model-grid`的头部默认有`批量删除`和`刷新`两个操作工具，如果有更多的操作需求，系统提供了自定义工具的功能,下面的示例添加一个性别分类选择的按钮组工具。\r\n\r\n<a name=\"outline\"></a>\r\n### 设置工具栏按钮样式\r\n\r\n工具栏按钮默认显示`outline`模式，效果如下\r\n\r\n用法\r\n```php\r\n\$grid->toolsWithOutline();\r\n\r\n// 禁止\r\n\$grid->toolsWithOutline(false);\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/dca8cf0ab722a1456c5015563a8db402667b806f5fced.png)\r\n\r\n禁用`outline`后的效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d2b554789840306ab0e3444fc2b09547667b807a92866.png)\r\n\r\n如果你希望某个按钮不使用`outline`模式，可以在按钮的`class`属性中加上`disable-outline`\r\n```php\r\n\$grid->tools('<a class=\"btn btn-primary disable-outline\">测试按钮</a>');\r\n```\r\n\r\n### 自定义工具栏按钮\r\n\r\n先定义工具类`app/Admin/Extensions/Tools/UserGender.php`继承工具类的基类`Dcat\\Admin\\Grid\\Tools\\AbstractTool`：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Tools;\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Grid\\Tools\\AbstractTool;\r\n\r\nclass UserGender extends AbstractTool\r\n{\r\n    protected function script()\r\n    {\r\n        \$url = request()->fullUrlWithQuery(['gender' => '_gender_']);\r\n\r\n        return <<<JS\r\n\$('input:radio.user-gender').change(function () {\r\n    var url = \"\$url\".replace('_gender_', \$(this).val());\r\n\r\n    Dcat.reload(url);\r\n});\r\nJS;\r\n    }\r\n\r\n    public function render()\r\n    {\r\n        Admin::script(\$this->script());\r\n\r\n        \$options = [\r\n            'all'   => 'All',\r\n            'm'     => 'Male',\r\n            'f'     => 'Female',\r\n        ];\r\n\r\n        return view('admin.tools.gender', compact('options'));\r\n    }\r\n}\r\n```\r\n\r\n视图`admin.tools.gender`文件为`resources/views/admin/tools/gender.blade.php`:\r\n```html\r\n<div class=\"btn-group\" data-toggle=\"buttons\">\r\n    @foreach(\$options as \$option => \$label)\r\n    <label class=\"btn btn-default {{ request()->get('gender', 'all') == \$option ? 'active' : '' }}\">\r\n        <input type=\"radio\" class=\"user-gender\" value=\"{{ \$option }}\">{{\$label}}\r\n    </label>\r\n    @endforeach\r\n</div>\r\n```\r\n\r\n在`Grid`引入这个工具：\r\n```php\r\n\$grid->tools(new UserGender());\r\n```\r\n\r\n在`model-grid`定义中接收到`gender`参数后，做好数据查询就可以了：\r\n```php\r\nif (in_array(\$gender = request()->get('gender'), ['m', 'f'])) {\r\n    \$grid->model()->where('gender', \$gender);\r\n}\r\n```\r\n\r\n可以参考上面的方式来添加自己的工具。\r\n\r\n### 进阶用法\r\n\r\n如果你的工具按钮需要与后端API进行交互，则可以参考以下方式定义：\r\n\r\n> `AbstractTool`类是属于`Dcat\\Admin\\Actions\\Action`的子类，本质也是动作类的一种，更详细用法请参考[动作类基本使用](https://learnku.com/docs/dcat-admin/1.x/basic-use/8124)。\r\n\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Grid\\Tools;\r\n\r\nuse Dcat\\Admin\\Grid\\Tools\\AbstractTool;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass SendMessage extends AbstractTool\r\n{\r\n    /**\r\n     * 按钮样式定义，默认 btn btn-white waves-effect\r\n     * \r\n     * @var string \r\n     */\r\n    protected \$style = 'btn btn-white waves-effect';\r\n    \r\n    \r\n    /**\r\n     * 按钮文本\r\n     * \r\n     * @return string|void\r\n     */\r\n    public function title()\r\n    {\r\n        return '发送提醒';\r\n    }\r\n    \r\n    /**\r\n     *  确认弹窗，如果不需要则返回空即可\r\n     * \r\n     * @return array|string|void\r\n     */\r\n    public function confirm()\r\n    {\r\n        // 只显示标题\r\n//        return '您确定要发送新的提醒消息吗？';\r\n        \r\n        // 显示标题和内容\r\n        return ['您确定要发送新的提醒消息吗？', '确认信息内容，如没有可以留空'];\r\n    }\r\n    \r\n    /**\r\n     * 处理请求\r\n     * 如果你的类中包含了此方法，则点击按钮后会自动向后端发起ajax请求，并且会通过此方法处理请求逻辑\r\n     * \r\n     * @param Request \$request\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        // 你的代码逻辑\r\n        \r\n        return \$this->response()->success('发送成功')->refresh();\r\n    }\r\n    \r\n    /**\r\n     * 设置请求参数\r\n     * \r\n     * @return array|void\r\n     */\r\n    public function parameters()\r\n    {\r\n        return [\r\n            \r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\nuse App\\Admin\\Grid\\Tools\\SendMessage;\r\n\r\n\$grid->tools(new SendMessage());\r\n```\r\n\r\n\r\n### 添加工具类\r\n\r\n`Grid::tools` 方法允许传入 `string`，`array`, `AbstractTool` 和 `闭包`等类型参数，下面是演示。\r\n\r\n```php\r\n// 传入字符串\r\n\$grid->tools('<a class=\"btn btn-sm btn-default\">工具按钮测试</a>');\r\n\r\n// 传入数组\r\n\$grid->tools([\r\n\t'<a class=\"btn btn-sm btn-default\">工具按钮测试</a>',\r\n\tnew UserGender(),\r\n]);\r\n\r\n// 传入闭包\r\n\$grid->tools(function (Grid\\Tools \$tools) {\r\n\t\$tools->append(new UserGender());\r\n});\r\n```\r\n\r\n<a name=\"batch\"></a>\r\n## 批量操作\r\n\r\n### 禁用批量删除\r\n\r\n系统默认开启了批量删除操作的功能，如果要禁用批量删除操作：\r\n\r\n```php\r\n\$grid->tools(function (\$tools) {\r\n    \$tools->batch(function (\$batch) {\r\n        \$batch->disableDelete();\r\n    });\r\n});\r\n\r\n// 也可以这样\r\n\$grid->disableBatchDelete();\r\n\r\n// 或\r\n\$grid->batchActions(function (Grid\\Tools\\BatchActions \$batch) {\r\n\t\$batch->disableDelete();\r\n});\r\n```\r\n\r\n### 自定义批量操作\r\n\r\n下面通过扩展一个对文章批量发布的功能来演示自定义批量操作的功能：\r\n\r\n先定义操作类`app/Admin/Extensions/Tools/ReleasePost.php`，继承`Dcat\\Admin\\Grid\\BatchAction`：\r\n\r\n> `BatchAction`类是属于`Dcat\\Admin\\Actions\\Action`的子类，本质也是动作类的一种，更详细用法请参考[动作类基本使用](https://learnku.com/docs/dcat-admin/1.x/basic-use/8124)。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Tools;\r\n\r\nuse Dcat\\Admin\\Grid\\BatchAction;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass ReleasePost extends BatchAction\r\n{\r\n    protected \$action;\r\n\r\n    // 注意action的构造方法参数一定要给默认值\r\n    public function __construct(\$title = null, \$action = 1)\r\n    {\r\n        \$this->title = \$title;\r\n        \$this->action = \$action;\r\n    }\r\n    \r\n    // 确认弹窗信息\r\n    public function confirm()\r\n    {\r\n        return '您确定要发布已选中的文章吗？';\r\n    }\r\n    \r\n    // 处理请求\r\n    public function handle(Request \$request)\r\n    {\r\n        // 获取选中的文章ID数组\r\n        \$keys = \$this->getKey();\r\n        \r\n        // 获取请求参数\r\n        \$action = \$request->get('action');\r\n        \r\n        foreach (Post::find(\$keys) as \$post) {\r\n            \$post->released = \$action;\r\n            \$post->save();\r\n        }\r\n        \r\n        \$message = \$action ? '文章发布成功' : '文章下线成功';\r\n        \r\n        return \$this->response()->success(\$message)->refresh();\r\n    }\r\n    \r\n    // 设置请求参数\r\n    public function parameters()\r\n    {\r\n        return [\r\n            'action' => \$this->action,\r\n        ];\r\n    }\r\n}\r\n```\r\n看代码的实现，通过click操作发送一个post请求，把选中的行数据`id`通过数组的形式传给后端接口，后端接口拿到`id`列表和要修改的状态来更新数据，然后前端刷新页面(pjax reload)，并弹出`toastr`提示操作成功。\r\n\r\n在`model-grid`中加入这个批量操作功能：\r\n```php\r\n\$grid->batchActions([\r\n\tnew ReleasePost('发布文章', 1),\r\n\tnew ReleasePost('文章下线', 0)\r\n]);  \r\n\r\n// 也可以这么写\r\n\$grid->batchActions(function (\$batch) {\r\n    \$batch->add(new ReleasePost('发布文章', 1));\r\n    \$batch->add(new ReleasePost('文章下线', 0));\r\n});\r\n\r\n// 或\r\n\$grid->tools(function (\$tools) {\r\n    \$tools->batch(function (\$batch) {\r\n    \t\$batch->add(new ReleasePost('发布文章', 1));\r\n    \t\$batch->add(new ReleasePost('文章下线', 0));\r\n    });\r\n});\r\n```\r\n\r\n#### 获取复选框选中的ID数组\r\n\r\n通过`getSelectedKeysScript`方法可以获取到复选框选中的ID数组，用法如下\r\n\r\n> {tip} `getSelectedKeysScript`方法返回的是`js`代码，只能在`js`代码中使用。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Tools;\r\n\r\nuse Dcat\\Admin\\Grid\\BatchAction;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass ReleasePost extends BatchAction\r\n{\r\n    protected \$action;\r\n\r\n    public function __construct(\$title, \$action = 1)\r\n    {\r\n        \$this->title = \$title;\r\n        \$this->action = \$action;\r\n    }\r\n    \r\n    // 确认弹窗信息\r\n    public function confirm()\r\n    {\r\n        return '您确定要发布已选中的文章吗？';\r\n    }\r\n    \r\n    // 处理请求\r\n    public function handle(Request \$request)\r\n    {\r\n        ...\r\n    }\r\n    \r\n    /**\r\n     * 设置动作发起请求前的回调函数，返回false可以中断请求. \r\n     * \r\n     * @return string\r\n     */\r\n    public function actionScript(){\r\n        \$warning = __('No data selected!');\r\n\r\n        return <<<JS\r\nfunction (data, target, action) { \r\n    var key = {\$this->getSelectedKeysScript()}\r\n\r\n    if (key.length === 0) {\r\n        Dcat.warning('{\$warning}');\r\n        return false;\r\n    }\r\n\r\n    // 设置主键为复选框选中的行ID数组\r\n    action.options.key = key;\r\n}\r\nJS;\r\n    }\r\n}\r\n```\r\n\r\n### 表单弹窗\r\n\r\n请参考文档[工具表单 - 弹窗](https://learnku.com/docs/dcat-admin/1.x/tools-form/8125#modal)", 'order' => 5, 'created_at' => "2024-06-26 10:44:19", 'updated_at' => "2024-06-26 10:44:19", 'slug' => "toolbar"],
            ['id' => 19, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "树状表格", 'content' => "# 树状表格\r\n\r\n树状表格支持分页和点击加载功能，特别适合用来展示数据量较大的多层级结构数据。\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/b227414accaa7d34500c0d3ac11c60c4667b80b591547.png)\r\n\r\n\r\n### 表结构和模型\r\n要使用树状表格，要遵守约定的表结构：\r\n\r\n> 此表结构和模型可完全兼容 <code>[模型树](https://learnku.com/docs/dcat-admin/1.x/basic-use/8122)</code> 。\r\n\r\n```sql\r\nCREATE TABLE `demo_categories` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `parent_id` int(11) NOT NULL DEFAULT '0',\r\n  `order` int(11) NOT NULL DEFAULT '0', // order 字段不是必须的，不设置也可以\r\n  `title` varchar(50) COLLATE utf8_unicode_ci NOT NULL,\r\n  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\r\n```\r\n上面的表格结构里面有三个必要的字段`id`、`parent_id`、`title`,其它字段没有要求。\r\n\r\n对应的模型为`app/Models/Category.php`:\r\n\r\n> 为了便于阅读，这里不再展示 `Repository` 代码。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models\\Demo;\r\n\r\nuse Dcat\\Admin\\Traits\\ModelTree;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Category extends Model\r\n{\r\n    use ModelTree;\r\n\r\n    protected \$table = 'demo_categories';\r\n}\r\n```\r\n表结构中的三个字段`parent_id`、`order`、`title`的字段名也是可以修改的：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models\\Demo;\r\n\r\nuse Dcat\\Admin\\Traits\\ModelTree;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Category extends Model\r\n{\r\n    use ModelTree;\r\n\r\n    protected \$table = 'demo_categories';\r\n    \r\n    protected \$titleColumn = 'name';\r\n    \r\n    protected \$orderColumn = 'sort';\r\n    \r\n    protected \$parentColumn = 'pid';\r\n}\r\n```\r\n\r\n如果你的数据表不需要 `order` 字段排序，则在模型中添加如下代码即可\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models\\Demo;\r\n\r\nuse Dcat\\Admin\\Traits\\ModelTree;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Category extends Model\r\n{\r\n    use ModelTree;\r\n\r\n    protected \$table = 'demo_categories';\r\n    \r\n    // 返回空值即可禁用 order 字段\r\n    public function getOrderColumn()\r\n    {\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 使用\r\n\r\n通过调用 `Grid\\Column::tree` 方法即可开启树状表格功能，开启之后默认只查询最顶级节点的数据，子节点数据需要点击加载\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers\\Demo;\r\n\r\nuse App\\Models\\Category;\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Controllers\\AdminController;\r\n\r\nclass CategoryController extends AdminController\r\n{\r\n    protected function grid()\r\n    {\r\n        return Grid::make(new Category(), function (Grid \$grid) {\r\n            \$grid->id('ID')->bold()->sortable();\r\n            \$grid->title->tree(); // 开启树状表格功能 \r\n            \$grid->order;\r\n    \r\n            \$grid->created_at;\r\n            \$grid->updated_at->sortable();\r\n            \r\n            \$grid->filter(function (Grid\\Filter \$filter) {\r\n                \$filter->like('slug');\r\n                \$filter->like('name');\r\n                \$filter->like('http_path');\r\n            });\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n上面的代码执行的 `sql` 如下（默认只查询 `parent = 0` 的数据）：\r\n```sql\r\nselect count(*) as aggregate from `demo_categories` where `parent_id` = 0\r\n\r\nselect * from `demo_categories` where `parent_id` = 0 order by `order` asc, `id` asc limit 20 offset 0\r\n```\r\n\r\n\r\n`Grid\\Column::tree` 方法参数\r\n\r\n+ `bool` `\$showAll`  `false`  是否一次性展示下一层级的所有节点，默认分页展示\r\n+ `bool` `\$sortable` `true`   是否开启排序功能\r\n\r\n```php\r\n// 禁用分页功能，一次性加载所有下一层级节点\r\n\$grid->title->tree(true);\r\n\r\n\r\n// 不需要 order 字段排序，第二个参数传 false 即可\r\n\$grid->title->tree(false, false);\r\n```\r\n\r\n\r\n### orderable排序\r\n\r\n`orderable` 排序功能依赖 <a href=\"https://github.com/spatie/eloquent-sortable\" target=\"__blank\">spatie/eloquent-sortable</a> 组件，需要修改模型：\r\n\r\n```php\r\nuse Spatie\\EloquentSortable\\Sortable;\r\n\r\nclass Category extends Model implements Sortable\r\n{\r\n    use ModelTree;\r\n    \r\n    // 设置排序字段，默认order\r\n    protected \$orderColumn = 'sort';\r\n}\r\n```\r\n\r\n下面是使用示例\r\n\r\n```php\r\nclass CategoryController extends AdminController\r\n{\r\n    protected function grid()\r\n    {\r\n        return Grid::make(new Category(), function (Grid \$grid) {\r\n            \$grid->id('ID')->bold()->sortable();\r\n            \$grid->title->tree(); // 开启树状表格功能 \r\n            \$grid->order->orderable(); // 开启排序功能\r\n    \r\n            ...;\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n### 关于数据搜索\r\n\r\n如果在树状表格中使用了搜索功能（`Grid::filter`、`Grid\\Column::filter`、`Grid::quickSearch`），为了让用户能搜索到想要的数据，则会<b>取消只查最顶级数据的操作</b>。\r\n\r\n> 使用 [查询过滤](https://learnku.com/docs/dcat-admin/1.x/query-filtering/8097)、[列过滤器](https://learnku.com/docs/dcat-admin/1.x/column-filter/8098)、[快捷搜索](https://learnku.com/docs/dcat-admin/1.x/quick-search/8099) 等搜索功能都会<b>取消只查最顶级数据的操作</b>，只有 [筛选器](https://learnku.com/docs/dcat-admin/1.x/specification-filter/8100) 和 [范围查询scope](https://learnku.com/docs/dcat-admin/1.x/query-filtering/8097#scope) 等功能例外。\r\n\r\n\r\n例如下面的代码开启了快捷搜索\r\n```php\r\nclass CategoryController extends AdminController\r\n{\r\n    protected function grid()\r\n    {\r\n        return Grid::make(new Category(), function (Grid \$grid) {\r\n            \$grid->id('ID')->bold()->sortable();\r\n            \$grid->title->tree(); // 开启树状表格功能 \r\n            \$grid->order->orderable(); // 开启排序功能\r\n    \r\n            \$grid->quickSearch(['id', 'title']);\r\n            ...;\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n且用户在浏览器中使用了快捷搜索，则产生`sql`如下\r\n\r\n```sql\r\nselect count(*) as aggregate from `demo_categories` where `id` like \"%xxx%\" or `title` like \"%xxx%\"\r\n\r\nselect * from `demo_categories` where `id` like \"%xxx%\" or `title` like \"%xxx%\" order by `order` asc, `id` asc limit 20 offset 0\r\n```\r\n\r\n### 与模型树功能的差别\r\n\r\n[模型树](https://learnku.com/docs/dcat-admin/1.x/basic-use/8122)同样可用于展示多层级结构数据，并且支持用拖拽的方式实现数据的层级、排序等操作，但是不支持分页和点击加载功能，只能一次性加载完所有数据，\r\n因此[模型树](https://learnku.com/docs/dcat-admin/1.x/basic-use/8122)并不适合用来展示数据量较大的数据。\r\n\r\n\r\n而树状表格支持分页和点击加载功能，适合用来展示数据量较大的多层级结构数据，但不支持用拖拽的方式实现数据的层级、排序操作。", 'order' => 6, 'created_at' => "2024-06-26 10:45:17", 'updated_at' => "2024-06-26 10:45:17", 'slug' => "tree-table"],
            ['id' => 20, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "组合表头", 'content' => "# 组合表头\r\n\r\n通过 `Grid::combine` 方法可以很方便的把任意两个以上的字段组合成一级表头\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/aa22f3573fa0e09aa51bab59772b5d6b667b80fd08b7e.png)\r\n\r\n\r\n示例\r\n\r\n```php\r\nprotected function grid()\r\n{\r\n    return Grid::make(new Report(), function (Grid \$grid) {\r\n        // 第一个参数为一级表头字段名称，第二个字段为二级表头字段名称，二级表头字段最少设置两个\r\n        \$grid->combine('avgCost', ['avgMonthCost', 'avgQuarterCost', 'avgYearCost']);\r\n        \r\n        \$grid->combine('avgVist', ['avgMonthVist', 'avgQuarterVist', 'avgYearVist']);\r\n        \r\n        // 设置样式\r\n        \$grid->combine('top', ['topCost', 'topVist', 'topIncr'])->style('color:#1867c0');\r\n        \r\n        \$grid->column('content')->limit(50);\r\n        \$grid->column('cost')->sortable();\r\n        \$grid->column('avgMonthCost');\r\n        \$grid->column('avgQuarterCost')->setHeaderAttributes(['style' => 'color:#5b69bc']);\r\n        \$grid->column('avgYearCost');\r\n        \$grid->column('avgMonthVist');\r\n        \$grid->column('avgQuarterVist');\r\n        \$grid->column('avgYearVist');\r\n        \$grid->column('incrs');\r\n        \$grid->column('avgVists');\r\n        \$grid->column('topCost');\r\n        \$grid->column('topVist');\r\n        \$grid->column('topIncr');\r\n        \$grid->column('date')->sortable();\r\n    });\r\n}\r\n```", 'order' => 7, 'created_at' => "2024-06-26 10:46:26", 'updated_at' => "2024-06-26 10:46:26", 'slug' => "combined-header"],
            ['id' => 21, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "数据来源以及查询条件", 'content' => "# 表格数据源\r\n\r\n\r\n数据仓库(`Repository`)是一个可以提供特定接口对数据进行读写操作的类，通过数据仓库的引入，可以让页面的构建不再关心数据读写功能的具体实现，开发者只需要实现特定的操作接口即可轻松切换数据源。关于数据仓库的详细用法请参考文档[数据仓库](https://learnku.com/docs/dcat-admin/1.x/basic-use/8123)。\r\n\r\n\r\n> 表格的数据是通过 `Dcat\\Admin\\Contracts\\Repository::get` 接口获取的。\r\n\r\n\r\n<a name=\"model\"></a>\r\n## 数据来自模型\r\n\r\n> 如果你的数据来自`Model`，那么你也可以直接使用`Model`实例，底层会自动把`Model`转化为数据仓库实例。\r\n\r\n\r\n当数据源支持`Eloquent Model`时，只需创建一个简单的`Repository`类继承`Dcat\\Admin\\Repositories\\EloquentRepository`即可\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse App\\Models\\Movie as MovieModel;\r\n\r\nclass Movie extends EloquentRepository\r\n{\r\n    // 这里定义你的模型类名\r\n    protected \$eloquentClass = MovieModel::class;\r\n    \r\n    // 通过这个方法可以指定查询的字段，默认\"*\"\r\n    public function getGridColumns()\r\n    {\r\n        return [\$this->getKeyName(), 'name', 'title', 'created_at'];\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 直接使用模型\r\n如果你还觉得创建 `Repository` 类麻烦，也可以直接把 `Eloquent Model` 的实例传递到 `Grid` 中，底层会自动把 `Eloquent Model` 转化为 `EloquentRepository` 实例 \r\n\r\n```php\r\nuse App\\Models\\Movie as MovieModel;\r\n\r\n\$grid = new Grid(new MovieModel());\r\n\r\n...\r\n```\r\n\r\n\r\n### 修改数据查询条件\r\n\r\n1、使用 `Grid\\Model`\r\n```php\r\nuse App\\Admin\\Repositories\\Movie;\r\n\r\n\$grid = new Grid(new Movie());\r\n\r\n// 添加默认查询条件\r\n\$grid->model()->where('id', '>', 100);\r\n\r\n// 设置初始排序条件\r\n\$grid->model()->orderBy('id', 'desc');\r\n\r\n...\r\n\r\n```\r\n其它查询方法可以参考`eloquent`的查询方法。\r\n\r\n\r\n2、使用 `Model Query`\r\n\r\n```php\r\nuse App\\Models\\Movie as MovieModel;\r\n\r\n\$grid = new Grid(MovieModel::where('id', '>', 100));\r\n\r\n...\r\n```\r\n\r\n\r\n### 关联数据\r\n\r\n有以下三种方式让你的表格支持关联数据\r\n\r\n\r\n1、使用Repository\r\n```php\r\nuse App\\Admin\\Repositories\\Movie;\r\n\r\n// 相当于 MovieModel::with('categories')\r\n\$grid = new Grid(Movie::with(['categories']));\r\n\r\n\$grid->categories;\r\n\r\n...\r\n```\r\n\r\n\r\n2、使用 `Grid\\Model`\r\n```php\r\nuse App\\Admin\\Repositories\\Movie;\r\n\r\n\$grid = new Grid(new Movie());\r\n\r\n\$grid->model()->with('categories');\r\n\r\n\$grid->categories;\r\n\r\n...\r\n```\r\n\r\n\r\n3、使用 `Model Query`\r\n```php\r\nuse App\\Models\\Movie as MovieModel;\r\n\r\n\$grid = new Grid(MovieModel::with('categories'));\r\n\r\n\$grid->categories;\r\n\r\n...\r\n```\r\n\r\n\r\n\r\n<a name=\"api\"></a>\r\n## 数据来自外部API\r\n\r\n<a name=\"example\"></a>\r\n### 示例\r\n\r\n如果数据是来自外部的API，只需要覆写`Repository`中的`get`方法既可, 具体用法可参考下面的示例，采用`豆瓣电影`API获取并展示数据：\r\n\r\n> {tip} 需要注意的是分页和不分页的情况下`get`方法返回的参数值类型是不同的，具体使用可参考[数据仓库 - get](https://learnku.com/docs/dcat-admin/1.x/basic-use/8123#get)。\r\n\r\n\r\n```php\r\n<?php\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Repositories\\Repository;\r\nuse Illuminate\\Pagination\\LengthAwarePaginator;\r\n\r\nclass ComingSoon extends Repository\r\n{\r\n    protected \$api = 'https://api.douban.com/v2/movie/coming_soon';\r\n    \r\n    /**\r\n     * 定义主键字段名称 \r\n     * \r\n     * @return string\r\n     */\r\n    public function getPrimaryKeyColumn()\r\n    {\r\n        return '_id';\r\n    }\r\n\r\n    /**\r\n     * 查询表格数据\r\n     *\r\n     * @param Grid\\Model \$model\r\n     * @return LengthAwarePaginator\r\n     */\r\n    public function get(Grid\\Model \$model)\r\n    {\r\n        // 当前页数\r\n\t\t\$currentPage = \$model->getCurrentPage();\r\n\t\t// 每页显示行数\r\n\t\t\$perPage = \$model->getPerPage();\r\n\r\n\t\t// 获取排序字段\r\n\t\t[\$orderColumn, \$orderType] = \$model->getSort();\r\n\r\n\t\t// 获取\"scope\"筛选值\r\n\t\t\$city = \$model->filter()->input(\$model->filter()->getScopeQueryName(), '广州');\r\n\t\t\r\n\t\t// 如果设置了其他过滤器字段，也可以通过“input”方法获取值，如：\r\n\t\t\$title = \$model->filter()->input('title');\r\n\t\tif (\$title !== null) {\r\n\t\t\t// 执行你的筛选逻辑\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t\$start = (\$currentPage - 1) * \$perPage;\r\n\r\n\t\t\$client = new \\GuzzleHttp\\Client();\r\n\r\n\t\t\$response = \$client->get(\"{\$this->api}?{\$this->apiKey}&city=\$city&start=\$start&count=\$perPage\");\r\n\t\t\$data = json_decode((string)\$response->getBody(), true);\r\n\r\n\t\treturn \$model->makePaginator(\r\n            \$data['total'] ?? 0, // 传入总记录数\r\n            \$data['subjects'] ?? [] // 传入数据二维数组\r\n\t\t);\r\n    }\r\n\r\n}\r\n```\r\n<a name=\"grid-model\"></a>\r\n### Grid\\Model 常用方法\r\n\r\n<a name=\"getCurrentPage\"></a>\r\n#### 获取当前页数 (getCurrentPage)\r\n获取当前页码\r\n- 返回值： `int|null` 如果不允许分页返回null\r\n```php\r\n\$page = \$model->getCurrentPage();\r\n```\r\n\r\n<a name=\"getPerPage\"></a>\r\n#### 获取每页显示行数 (getPerPage)\r\n获取每页显示行数\r\n- 返回值： `int|null` 如果不允许分页返回null\r\n```php\r\n\$limit = \$model->getPerPage();\r\n```\r\n\r\n<a name=\"getSort\"></a>\r\n#### 获取排序字段 (getSort)\r\n获取排序字段\r\n- 返回值： `array` `[\$orderColumn, 'desc'|'asc']` || `[null, null]`\r\n\r\n```php\r\n// \$orderColumn 字段名称，如没有进行排序则为 null\r\n// \$orderType 正序或倒序： \"desc\"、\"asc\"，如没有进行排序则为 null\r\nlist(\$orderColumn, \$orderType) = \$model->getSort();\r\n```\r\n\r\n<a name=\"getFilter\"></a>\r\n#### 获取过滤器对象 (filter)\r\n获取过滤器对象，通过过滤器对象可以获取到搜索表单的值，用法如下\r\n- 返回值 `Dcat\\Admin\\Grid\\Filter`\r\n\r\n```php\r\n// 获取\"scope\"筛选值\r\n\$city = \$model->filter()->input(Grid\\Filter\\Scope::QUERY_NAME, '广州');\r\n\r\n// 如果设置了其他过滤器字段，也可以通过“input”方法获取值，如：\r\n\$title = \$model->filter()->input('title');\r\nif (\$title !== null) {\r\n    // 执行你的筛选逻辑\r\n}\r\n```\r\n\r\n#### 获取快捷搜索表单值\r\n\r\n通过以下方式可以获取到快捷搜索表单值\r\n\r\n```php\r\n\$quickSearch = \$model->grid()->quickSearch()->value();\r\n```\r\n\r\n\r\n<a name=\"sql\"></a>\r\n## 数据来自复杂SQL查询\r\n\r\n如果来源数据需要执行比较复杂的SQL语句获取，可以通过覆盖掉`Repository`的`get`方法实现。\r\n\r\n> 需要注意的是分页和不分页的情况下`get`方法返回的参数值类型是不同的，具体使用可参考[数据仓库 - get](https://learnku.com/docs/dcat-admin/1.x/basic-use/8123#get)。", 'order' => 8, 'created_at' => "2024-06-26 10:47:18", 'updated_at' => "2024-06-26 10:47:18", 'slug' => "data-source"],
            ['id' => 22, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "关联关系", 'content' => "# 表格关联关系\r\n\r\n### 一对一\r\n`users`表和`profiles`表通过`profiles.user_id`字段生成一对一关联\r\n\r\n```sql\r\nCREATE TABLE `users` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `profiles` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`user_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`age` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`gender` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n```\r\n\r\n对应的数据模以及数据仓库分别为:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    public function profile()\r\n    {\r\n        return \$this->hasOne(Profile::class);\r\n    }\r\n}\r\n```\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Profile extends Model\r\n{\r\n    public function user()\r\n    {\r\n        return \$this->belongsTo(User::class);\r\n    }\r\n}\r\n```\r\n数据仓库\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse App\\Models\\User as UserModel;\r\n\r\nclass User extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = UserModel::class;\r\n}\r\n```\r\n\r\n<a name=\"relation\"></a>\r\n#### 三种关联数据表的方法\r\n\r\n通过以下三种方式的代码可以关联`profile`表数据:\r\n\r\n方式一：直接使用数据仓库关联\r\n```php\r\nuse App\\Admin\\Repositories\\User;\r\nuse Dcat\\Admin\\Grid;\r\n\r\n// 关联 profile 表数据\r\n\$grid = Grid::make(new User(['profile']), function (Grid \$grid) {    \r\n    \$grid->id('ID')->sortable();\r\n    \r\n    \$grid->name();\r\n    \$grid->email();\r\n    \r\n    // 显示一对一数据\r\n    \$grid->column('profile.age');\r\n    \$grid->column('profile.gender');\r\n    \r\n    \$grid->created_at();\r\n    \$grid->updated_at();\r\n});\r\n```\r\n\r\n方式二：使用`Model::with`方法关联\r\n```php\r\nuse App\\Models\\User;\r\nuse Dcat\\Admin\\Grid;\r\n\r\n// 关联 profile 表数据\r\n\$grid = Grid::make(User::with(['profile']), function (Grid \$grid) {    \r\n    \$grid->id('ID')->sortable();\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n方式三：使用`Grid\\Model`方法关联\r\n```php\r\nuse App\\Admin\\Repositories\\User;\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\r\n\$grid = Grid::make(new User(), function (Grid \$grid) {\r\n\t// 关联 profile 表数据\r\n\t\$grid->model()->with(['profile']);\r\n    \r\n    \$grid->id('ID')->sortable();\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n\r\n### 一对多\r\n\r\n`posts`表和`comments`表通过`comments.post_id`字段生成一对多关联\r\n\r\n```sql\r\nCREATE TABLE `posts` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`content` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `comments` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`post_id` int(10) unsigned NOT NULL,\r\n`content` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n```\r\n\r\n对应的数据模和数据仓库分别为:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Post extends Model\r\n{\r\n    public function comments()\r\n    {\r\n        return \$this->hasMany(Comment::class);\r\n    }\r\n}\r\n```\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Comment extends Model\r\n{\r\n    public function post()\r\n    {\r\n        return \$this->belongsTo(Post::class);\r\n    }\r\n}\r\n```\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse App\\Models\\Post as PostModel;\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\n\r\nclass Post extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = PostModel::class;\r\n}\r\n```\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse App\\Models\\Comment as CommentModel;\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\n\r\nclass Comment extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = CommentModel::class;\r\n}\r\n```\r\n\r\n同样这里支持上述的[三种方式关联数据](#relation)，限于篇幅这里不再重复写所有用法\r\n\r\nPost表格\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\Post;\r\n\r\n// 关联 comment 表数据\r\n\$grid = Grid::make(new Post(['comments']), function (Grid \$grid) {\r\n    \$grid->id('id')->sortable();\r\n    \$grid->title();\r\n    \$grid->content();\r\n    \r\n    \$grid->comments('评论数')->display(function (\$comments) {\r\n        \$count = count(\$comments);\r\n        \r\n        return \"<span class='label label-warning'>{\$count}</span>\";\r\n    });\r\n    \r\n    \$grid->created_at();\r\n    \$grid->updated_at();\r\n});\r\n```\r\n\r\nComment表格\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\Comment;\r\n\r\n// 关联 post 表数据\r\n\$grid = new Grid(new Comment(['post']));\r\n\r\n\$grid->column('id');\r\n\$grid->column('post.title');\r\n\$grid->column('content');\r\n\r\n\$grid->created_at()->sortable();\r\n\$grid->updated_at();\r\n```\r\n\r\n### 多对多\r\n\r\n`users`和`roles`表通过中间表`role_users`产生多对多关系\r\n\r\n```sql\r\nCREATE TABLE `users` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(190) COLLATE utf8_unicode_ci NOT NULL,\r\n  `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL,\r\n  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `users_username_unique` (`username`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\r\n\r\nCREATE TABLE `roles` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(50) COLLATE utf8_unicode_ci NOT NULL,\r\n  `slug` varchar(50) COLLATE utf8_unicode_ci NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `roles_name_unique` (`name`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\r\n\r\nCREATE TABLE `role_users` (\r\n  `role_id` int(11) NOT NULL,\r\n  `user_id` int(11) NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  KEY `role_users_role_id_user_id_index` (`role_id`,`user_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\r\n```\r\n\r\n对应的数据模和数据仓库分别为:\r\n\r\n\r\nUser 模型\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    public function roles()\r\n    {\r\n        return \$this->belongsToMany(Role::class);\r\n    }\r\n}\r\n```\r\nRole 模型\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Role extends Model\r\n{\r\n    public function users()\r\n    {\r\n        return \$this->belongsToMany(User::class);\r\n    }\r\n}\r\n```\r\n\r\n数据仓库\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse App\\Models\\User as UserModel;\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\n\r\nclass User extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = UserModel::class;\r\n}\r\n```\r\n\r\n同样这里支持上述的[三种方式关联数据](#relation)，限于篇幅这里不再重复写所有用法\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\User;\r\n\r\n// 关联 role 表数据\r\n\$grid = Grid::make(new User('roles'), function (Grid \$grid) {\r\n    \$grid->id('ID')->sortable();\r\n    \$grid->username();\r\n    \$grid->name();\r\n    \r\n    \$grid->roles()->pluck('name')->label();\r\n    \r\n    \$grid->created_at();\r\n    \$grid->updated_at();\r\n});\r\n```", 'order' => 9, 'created_at' => "2024-06-26 10:47:50", 'updated_at' => "2024-06-26 10:47:50", 'slug' => "association"],
            ['id' => 23, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "查询过滤", 'content' => "# 查询过滤\r\n\r\n\r\n`model-grid`提供了一系列的方法实现表格数据的查询过滤：\r\n\r\n```php\r\n// 禁用\r\n\$grid->disableFilter();\r\n// 显示\r\n\$grid->showFilter();\r\n\r\n// 禁用过滤器按钮\r\n\$grid->disableFilterButton();\r\n// 显示过滤器按钮\r\n\$grid->showFilterButton();\r\n\r\n\$grid->filter(function(\$filter){\r\n    // 展开过滤器\r\n    \$filter->expand();\r\n    \r\n    // 在这里添加字段过滤器\r\n    \$filter->equal('id', '产品序列号');\r\n    \$filter->like('name', 'name');\r\n    ...\r\n\r\n});\r\n```\r\n\r\n禁止自动展开过滤器\r\n```php\r\n\$grid->filter(function(\$filter){\r\n    // 禁止自动展开过滤器\r\n    \$filter->expand(false);\r\n    \r\n    ...\r\n\r\n});\r\n```\r\n\r\n## 过滤器布局\r\n\r\n默认布局方式为`rightSide`\r\n\r\n### rightSide\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->filter(function (Grid\\Filter \$filter) {\r\n    // 更改为 rightSide 布局\r\n    \$filter->rightSide();\r\n    \r\n    ...\r\n});\r\n```\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/4e324f0c86e304aa15f2e628765f6d7c667b81d26a500.png)\r\n\r\n\r\n### panel\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->filter(function (Grid\\Filter \$filter) {\r\n    // 更改为 panel 布局\r\n    \$filter->panel();\r\n    \r\n    // 注意切换为panel布局方式时需要重新调整表单字段的宽度\r\n    \$filter->equal('id')->width(3);\r\n});\r\n```\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/a4b15fd8d92cc692944d8a89c736849f667b81a43db2b.png)\r\n\r\n\r\n### 自定义布局 (view)\r\n\r\n如果以上的布局无法满足需求，可以通过`view`方法自定义过滤器模板\r\n\r\n```php\r\n\$grid->filter(function (\$filter) {\r\n    \$filter->view('xxx');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n\r\n<a name=\"type\"></a>\r\n## 查询类型\r\n\r\n目前支持的过滤类型有下面这些:\r\n\r\n<a name=\"equal\"></a>\r\n### equal\r\n`sql: ... WHERE `column` = \"\$input\"`：\r\n```php\r\n\$filter->equal('column', \$label);\r\n```\r\n\r\n<a name=\"nequal\"></a>\r\n### notEqual\r\n`sql: ... WHERE `column` != \"\$input\"`：\r\n```php\r\n\$filter->notEqual('column', \$label);\r\n```\r\n<a name=\"like\"></a>\r\n### like\r\n`sql: ... WHERE `column` LIKE \"%\$input%\"`：\r\n```php\r\n\$filter->like('column', \$label);\r\n```\r\n\r\n### ilike\r\n`sql: ... WHERE `column` ILIKE \"%\$input%\"`：\r\n```php\r\n\$filter->ilike('column', \$label);\r\n```\r\n<a name=\"startwith\"></a>\r\n### startWith\r\n`sql: ... WHERE `column` LIKE \"\$input%\"`：\r\n```php\r\n\$filter->startWith('column', \$label);\r\n\r\n// 如果需要使用“ilike”\r\n\$filter->startWith('column', \$label)->ilike();\r\n```\r\n\r\n<a name=\"endwith\"></a>\r\n### endWith\r\n`sql: ... WHERE `column` LIKE \"%\$input\"`：\r\n```php\r\n\$filter->endWith('column', \$label);\r\n\r\n// 如果需要使用“ilike”\r\n\$filter->endWith('column', \$label)->ilike();\r\n```\r\n\r\n<a name=\"gt\"></a>\r\n### gt\r\n`sql: ... WHERE `column` > \"\$input\"`：\r\n```php\r\n\$filter->gt('column', \$label);\r\n```\r\n\r\n<a name=\"lt\"></a>\r\n### lt\r\n`sql: ... WHERE `column` < \"\$input\"`：\r\n```php\r\n\$filter->lt('column', \$label);\r\n```\r\n\r\n<a name=\"ngt\"></a>\r\n### ngt\r\n`sql: ... WHERE `column` <= \"\$input\"`：\r\n```php\r\n\$filter->ngt('column', \$label);\r\n```\r\n\r\n<a name=\"nlt\"></a>\r\n### nlt\r\n`sql: ... WHERE `column` >= \"\$input\"`：\r\n```php\r\n\$filter->nlt('column', \$label);\r\n```\r\n\r\n<a name=\"between\"></a>\r\n### between\r\n`sql: ... WHERE `column` BETWEEN \"\$start\" AND \"\$end\"`：\r\n```php\r\n\$filter->between('column', \$label);\r\n\r\n// 设置datetime类型\r\n\$filter->between('column', \$label)->datetime();\r\n\r\n// 设置time类型\r\n\$filter->between('column', \$label)->time();\r\n```\r\n\r\n<a name=\"in\"></a>\r\n### in\r\n`sql: ... WHERE `column` in (...\$inputs)`：\r\n```php\r\n\$filter->in('column', \$label)->multipleSelect(['key' => 'value']);\r\n```\r\n\r\n<a name=\"notIn\"></a>\r\n### notIn\r\n`sql: ... WHERE `column` not in (...\$inputs)`：\r\n```php\r\n\$filter->notIn('column', \$label)->multipleSelect(['key' => 'value']);\r\n```\r\n\r\n<a name=\"date\"></a>\r\n### date\r\n`sql: ... WHERE DATE(`column`) = \"\$input\"`：\r\n```php\r\n\$filter->date('column', \$label);\r\n```\r\n\r\n<a name=\"day\"></a>\r\n### day\r\n`sql: ... WHERE DAY(`column`) = \"\$input\"`：\r\n```php\r\n\$filter->day('column', \$label);\r\n```\r\n\r\n<a name=\"month\"></a>\r\n### month\r\n`sql: ... WHERE MONTH(`column`) = \"\$input\"`：\r\n```php\r\n\$filter->month('column', \$label);\r\n```\r\n\r\n<a name=\"year\"></a>\r\n### year\r\n`sql: ... WHERE YEAR(`column`) = \"\$input\"`：\r\n```php\r\n\$filter->year('column', \$label);\r\n```\r\n<a name=\"findinset\"></a>\r\n### findInSet\r\n`sql: ... WHERE FIND_IN_SET(\"\$input\", \$column)`：\r\n```php\r\n\$filter->findInSet('column', \$label);\r\n```\r\n\r\n\r\n<a name=\"where\"></a>\r\n### 复杂查询where\r\n\r\n可以用where来构建比较复杂的查询过滤\r\n\r\n`sql: ... WHERE `title` LIKE \"%\$input\" OR `content` LIKE \"%\$input\"`：\r\n```php\r\n\$filter->where('search', function (\$query) {\r\n\r\n    \$query->where('title', 'like', \"%{\$this->input}%\")\r\n        ->orWhere('content', 'like', \"%{\$this->input}%\");\r\n\r\n});\r\n```\r\n\r\n`sql: ... WHERE `rate` >= 6 AND `created_at` = {\$input}`:\r\n```php\r\n\$filter->where('Text', function (\$query) {\r\n\r\n    \$query->whereRaw(\"`rate` >= 6 AND `created_at` = {\$this->input}\");\r\n\r\n});\r\n```\r\n\r\n关系查询，查询对应关系`profile`的字段：\r\n```php\r\n\$filter->where('mobile', function (\$query) {\r\n\r\n    \$query->whereHas('profile', function (\$query) {\r\n        \$query->where('address', 'like', \"%{\$this->input}%\")->orWhere('email', 'like', \"%{\$this->input}%\");\r\n    });\r\n\r\n}, '地址或手机号');\r\n```\r\n\r\n<a name=\"whereBetween\"></a>\r\n### 复杂范围查询whereBetween\r\n\r\n通过`whereBetween`可以自定义范围查询\r\n\r\n```php\r\n\$filter->whereBetween('created_at', function (\$q) {\r\n\t\$start = \$this->input['start'] ?? null;\r\n\t\$end = \$this->input['end'] ?? null;\r\n\r\n\t\$q->whereHas('goods', function (\$q) use (\$start,\$end) {\r\n\t\tif (\$start !== null) {\r\n\t\t\t\$q->where('price', '>=', \$start);\r\n\t\t}\r\n\t\t \r\n\t\tif (\$end !== null) {\r\n\t\t\t\$q->where('price', '<=', \$end);\r\n\t\t}\r\n\t});\r\n});       \r\n```\r\n\r\n同时这个方法也支持时间日期范围查询\r\n\r\n```php\r\n\$filter->whereBetween('created_at', function (\$q) {\r\n\t...\r\n})->datetime(); \r\n```\r\n\r\n<a name=\"group\"></a>\r\n### 过滤器组group\r\n有时候对同一个字段要设置多种筛选方式，可以通过下面的方式实现\r\n\r\n```php\r\n\$filter->group('rate', function (\$group) {\r\n    \$group->gt('大于');\r\n    \$group->lt('小于');\r\n    \$group->nlt('不小于');\r\n    \$group->ngt('不大于');\r\n    \$group->equal('等于');\r\n});\r\n```\r\n有下面的几个方法可以调用\r\n```php\r\n// 等于\r\n\$group->equal();\r\n\r\n// 不等于\r\n\$group->notEqual();\r\n\r\n// 大于\r\n\$group->gt();\r\n\r\n// 小于\r\n\$group->lt();\r\n\r\n// 大于等于\r\n\$group->nlt();\r\n\r\n// 小于等于\r\n\$group->ngt();\r\n\r\n// 匹配\r\n\$group->match();\r\n\r\n// 复杂条件\r\n\$group->where();\r\n\r\n// like查询\r\n\$group->like();\r\n\r\n// like查询\r\n\$group->contains();\r\n\r\n// ilike查询\r\n\$group->ilike();\r\n\r\n// 以输入的内容开头\r\n\$group->startWith();\r\n\r\n// 以输入的内容结尾\r\n\$group->endWith();\r\n```\r\n\r\n<a name=\"scope\"></a>\r\n### 范围查询scope\r\n可以把你最常用的查询定义为一个查询范围，它将会出现在筛选按钮的下拉菜单中，下面是几个例子：\r\n```php\r\n\$filter->scope('male', '男性')->where('gender', 'm');\r\n\r\n// 多条件查询\r\n\$filter->scope('new', '最近修改')\r\n    ->whereDate('created_at', date('Y-m-d'))\r\n    ->orWhere('updated_at', date('Y-m-d'));\r\n\r\n// 关联关系查询\r\n\$filter->scope('address')->whereHas('profile', function (\$query) {\r\n    \$query->whereNotNull('address');\r\n});\r\n\r\n\$filter->scope('trashed', '被软删除的数据')->onlyTrashed();\r\n```\r\nscope方法第一个参数为查询的key, 会出现的url参数中，第二个参数是下拉菜单项的label, 如果不填，第一个参数会作为label显示\r\n\r\nscope方法可以链式调用任何eloquent查询条件，效果参考Demo\r\n\r\n<a name=\"form\"></a>\r\n## 表单类型\r\n\r\n<a name=\"text\"></a>\r\n### text\r\n\r\n表单类型默认是`text input`，可以设置`placeholder`：\r\n\r\n```php\r\n\$filter->equal('column')->placeholder('请输入。。。');\r\n```\r\n\r\n也可以通过下面的一些方法来限制用户输入格式：\r\n\r\n```php\r\n\$filter->equal('column')->url();\r\n\r\n\$filter->equal('column')->email();\r\n\r\n\$filter->equal('column')->integer();\r\n\r\n\$filter->equal('column')->ip();\r\n\r\n\$filter->equal('column')->mac();\r\n\r\n\$filter->equal('column')->mobile();\r\n\r\n// \$options 参考 https://github.com/RobinHerbots/Inputmask/blob/4.x/README_numeric.md\r\n\$filter->equal('column')->decimal(\$options = []);\r\n\r\n// \$options 参考 https://github.com/RobinHerbots/Inputmask/blob/4.x/README_numeric.md\r\n\$filter->equal('column')->currency(\$options = []);\r\n\r\n// \$options 参考 https://github.com/RobinHerbots/Inputmask/blob/4.x/README_numeric.md\r\n\$filter->equal('column')->percentage(\$options = []);\r\n\r\n// \$options 参考 https://github.com/RobinHerbots/Inputmask, \$icon为input前面的图标\r\n\$filter->equal('column')->inputmask(\$options = [], \$icon = 'pencil');\r\n```\r\n\r\n\r\n<a name=\"select-table\"></a>\r\n### 表格选择器 (selectTable)\r\n\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Models\\Administrator;\r\n\r\n\$filter->equal('user_id')\r\n\t->selectTable(UserTable::make(['id' => ...])) // 设置渲染类实例，并传递自定义参数\r\n\t->title('弹窗标题')\r\n\t->dialogWidth('50%') // 弹窗宽度，默认 800px\r\n\t->model(Administrator::class, 'id', 'name'); // 设置编辑数据显示\r\n\t\r\n// 上面的代码等同于\r\n\$filter->equal('user_id')\r\n\t->selectTable(UserTable::make(['id' => ...])) // 设置渲染类实例，并传递自定义参数\r\n\t->options(function (\$v) { // 设置编辑数据显示\r\n\t\tif (! \$v) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\t\r\n\t\treturn Administrator::find(\$v)->pluck('name', 'id');\r\n\t});\r\n```\r\n\r\n定义渲染类如下，需要继承`Dcat\\Admin\\Grid\\LazyRenderable`\r\n\r\n> {tip} 这里使用了数据表格异步加载功能，详细用法请参考[异步加载](https://learnku.com/docs/dcat-admin/2.x/asynchronous-loading/9327)\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Renderable;\r\n\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Grid\\LazyRenderable;\r\nuse Dcat\\Admin\\Models\\Administrator;\r\n\r\nclass UserTable extends LazyRenderable\r\n{\r\n    public function grid(): Grid\r\n    {\r\n        // 获取外部传递的参数\r\n        \$id = \$this->id;\r\n        \r\n        return Grid::make(new Administrator(), function (Grid \$grid) {\r\n            \$grid->column('id');\r\n            \$grid->column('username');\r\n            \$grid->column('name');\r\n            \$grid->column('created_at');\r\n            \$grid->column('updated_at');\r\n            \r\n            // 指定行选择器选中时显示的值的字段名称\r\n\t\t\t// 指定行选择器选中时显示的值的字段名称\r\n\t\t\t// 指定行选择器选中时显示的值的字段名称\r\n\t\t\t// 如果表格数据中带有 “name”、“title”或“username”字段，则可以不用设置\r\n\t\t\t\$grid->rowSelector()->titleColumn('username');\r\n\r\n            \$grid->quickSearch(['id', 'username', 'name']);\r\n\r\n            \$grid->paginate(10);\r\n            \$grid->disableActions();\r\n\r\n            \$grid->filter(function (Grid\\Filter \$filter) {\r\n                \$filter->like('username')->width(4);\r\n                \$filter->like('name')->width(4);\r\n            });\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n\r\n#### 多选（multipleSelectTable）\r\n\r\n多选的用法与上述`selectTable`方法一致\r\n\r\n```php\r\n\$filter->in('user_id')\r\n\t->multipleSelectTable(UserTable::make(['id' => \$form->getKey()])) // 设置渲染类实例，并传递自定义参数\r\n\t->max(10) // 最多选择 10 个选项，不传则不限制\r\n\t->model(Administrator::class, 'id', 'name'); // 设置编辑数据显示\r\n```\r\n\r\n\r\n\r\n<a name=\"select\"></a>\r\n### select\r\n```php\r\n\$filter->equal('column')->select(['key' => 'value'...]);\r\n\r\n// 或者从api获取数据，api的格式参考model-form的select组件\r\n\$filter->equal('column')->select('api/users');\r\n```\r\n\r\n<a name=\"multipleSelect\"></a>\r\n### multipleSelect\r\n一般用来配合`in`和`notIn`两个需要查询数组的查询类型使用，也可以在`where`类型的查询中使用：\r\n```php\r\n\$filter->in('column')->multipleSelect(['key' => 'value'...]);\r\n\r\n// 或者从api获取数据，api的格式参考model-form的multipleSelect组件\r\n\$filter->in('column')->multipleSelect('api/users');\r\n```\r\n\r\n<a name=\"datetime\"></a>\r\n### datetime\r\n\r\n通过日期时间组件来查询，`\$options`的参数和值参考[bootstrap-datetimepicker](http://eonasdan.github.io/bootstrap-datetimepicker/Options/)\r\n\r\n```php\r\n\$filter->equal('column')->datetime(\$options);\r\n\r\n// `date()` 相当于 `datetime(['format' => 'YYYY-MM-DD'])`\r\n\$filter->equal('column')->date();\r\n\r\n// `time()` 相当于 `datetime(['format' => 'HH:mm:ss'])`\r\n\$filter->equal('column')->time();\r\n\r\n// `day()` 相当于 `datetime(['format' => 'DD'])`\r\n\$filter->equal('column')->day();\r\n\r\n// `month()` 相当于 `datetime(['format' => 'MM'])`\r\n\$filter->equal('column')->month();\r\n\r\n// `year()` 相当于 `datetime(['format' => 'YYYY'])`\r\n\$filter->equal('column')->year();\r\n\r\n```\r\n\r\n如果你的时间日期字段在数据库中存储的是时间戳类型，那么可以通过`toTimestamp`方法把表单的值转化为时间戳\r\n```php\r\n\$filter->equal('column')->datetime(\$options)->toTimestamp();\r\n```\r\n\r\n\r\n<a name=\"method\"></a>\r\n## 常用方法\r\n\r\n<a name=\"width\"></a>\r\n### 过滤器宽度 (width)\r\n```php\r\n// 设置为“1-12”之间的值，默认值是“3”\r\n\$filter->equal('column')->width(3);\r\n\r\n// 也可以写死宽度\r\n\$filter->equal('column')->width('250px');\r\n```\r\n\r\n<a name=\"default\"></a>\r\n### 设置默认值 (default)\r\n```php\r\n\$filter->equal('column')->default('text');\r\n\r\n\$filter->equal('column')->select([0 => 'PHP', 1 => 'Java'])->default(1);\r\n\r\n// 使用 between 过滤器时，提供 start 和 end 为键的数组\r\n\$filter->between('column')->default(['start' => 0, 'end' => 1]);\r\n\$filter->between('column')->date()->default(['start' => '2000-01-01', 'end' => '2000-01-01']);\r\n```\r\n\r\n<a name=\"expand\"></a>\r\n### 展开过滤器 (expand)\r\n```php\r\n\$filter->expand();\r\n\r\n\$filter->equal('column');\r\n...\r\n```\r\n\r\n<a name=\"withoutInputBorder\"></a>\r\n### 不显示过滤器input输入框的边框\r\n```php\r\n\$filter->withoutInputBorder();\r\n\r\n\$filter->equal('column');\r\n...\r\n```\r\n\r\n<a name=\"style\"></a>\r\n### 设置过滤器容器样式\r\n```php\r\n\$filter->style('padding:0');\r\n\r\n\$filter->equal('column');\r\n...\r\n```\r\n\r\n<a name=\"padding\"></a>\r\n### 设置过滤器容器padding\r\n```php\r\n\$filter->padding('10px', '10px', '10px', '10px');\r\n\r\n\$filter->equal('column');\r\n...\r\n```\r\n\r\n### 忽略筛选项 (ignore)\r\n\r\n通过`ignore`方法可以在提交表单时忽略当前筛选项\r\n\r\n```php\r\n\$filter->equal('column')->ignore();\r\n```\r\n\r\n\r\n<a name=\"relation\"></a>\r\n## 关联关系字段查询\r\n\r\n假设你的模型如下\r\n\r\n```php\r\nclass User extends Model\r\n{\r\n    public function profile()\r\n    {\r\n        return \$this->hasOne(...);\r\n    }\r\n    \r\n    public function myPosts()\r\n    {\r\n        return \$this->hasMany(...);\r\n    }\r\n}\r\n```\r\n\r\n通过下面的方法可以查询`profiles`表的`first_name`字段以及`posts`表的`title`字段\r\n\r\n```php\r\n\$grid->filter(function (\$filter) {\r\n    \$filter->like('profile.first_name');\r\n    \r\n    \$filter->like('myPosts.title');\r\n});\r\n```\r\n\r\n如果安装了 [dcat/laravel-wherehasin](https://github.com/jqhph/laravel-wherehasin)，则会优先使用`whereHasIn`方法进行查询操作\r\n\r\n\r\n<a name=\"extend\"></a>\r\n## 自定义过滤器\r\n下面通过`between`的实现来讲解下怎么自定义过滤器。\r\n\r\n首先新建一个过滤器类继承`Dcat\\Admin\\Grid\\Filter\\AbstractFilter`：\r\n```php\r\n<?php\r\n\r\nnamespace Dcat\\Admin\\Grid\\Filter;\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Grid\\Filter\\Presenter\\DateTime;\r\nuse Illuminate\\Support\\Arr;\r\n\r\nclass Between extends AbstractFilter\r\n{\r\n    // 自定义你的过滤器显示模板\r\n    protected \$view = 'admin::filter.between';\r\n\r\n    // 这个方法用于生成过滤器字段的唯一id\r\n    // 通过这个唯一id则可以用js代码对其进行操作\r\n    public function formatId(\$column)\r\n    {\r\n       \$id   = str_replace('.', '_', \$column);\r\n       \$name = \$this->parent->getGrid()->getName();\r\n\r\n       return ['start' => \"{\$name}{\$id}_start\", 'end' => \"{\$name}{\$id}_end\"];\r\n    }\r\n\r\n    // form表单name属性格式化\r\n    protected function formatName(\$column)\r\n    {\r\n        \$columns = explode('.', \$column);\r\n\r\n        if (count(\$columns) == 1) {\r\n            \$name = \$columns[0];\r\n        } else {\r\n            \$name = array_shift(\$columns);\r\n\r\n            foreach (\$columns as \$column) {\r\n                \$name .= \"[\$column]\";\r\n            }\r\n        }\r\n\r\n        return ['start' => \"{\$name}[start]\", 'end' => \"{\$name}[end]\"];\r\n    }\r\n\r\n    // 创建条件\r\n    // 这里构建的条件支持`Laravel query builder`即可。\r\n    public function condition(\$inputs)\r\n    {\r\n        if (!Arr::has(\$inputs, \$this->column)) {\r\n            return;\r\n        }\r\n\r\n        \$this->value = Arr::get(\$inputs, \$this->column);\r\n\r\n        \$value = array_filter(\$this->value, function (\$val) {\r\n            return \$val !== '';\r\n        });\r\n\r\n        if (empty(\$value)) {\r\n            return;\r\n        }\r\n\r\n        if (!isset(\$value['start']) && isset(\$value['end'])) {\r\n            // 这里返回的数组相当于\r\n            // \$query->where(\$this->column, '<=', \$value['end']);\r\n            return \$this->buildCondition(\$this->column, '<=', \$value['end']);\r\n        }\r\n\r\n        if (!isset(\$value['end']) && isset(\$value['start'])) {\r\n            // 这里返回的数组相当于\r\n            // \$query->where(\$this->column, '>=', \$value['end']);\r\n            return \$this->buildCondition(\$this->column, '>=', \$value['start']);\r\n        }\r\n\r\n        \$this->query = 'whereBetween';\r\n\r\n        // 这里返回的数组相当于\r\n        // \$query->whereBetween(\$this->column, \$value['end']);\r\n        return \$this->buildCondition(\$this->column, \$this->value);\r\n    }\r\n\r\n    // 自定义过滤器表单显示方式\r\n    public function datetime(\$options = [])\r\n    {\r\n        \$this->view = 'admin::filter.betweenDatetime';\r\n\r\n        DateTime::collectAssets();\r\n\r\n        \$this->setupDatetime(\$options);\r\n\r\n        return \$this;\r\n    }\r\n\r\n    protected function setupDatetime(\$options = [])\r\n    {\r\n        \$options['format'] = Arr::get(\$options, 'format', 'YYYY-MM-DD HH:mm:ss');\r\n        \$options['locale'] = Arr::get(\$options, 'locale', config('app.locale'));\r\n\r\n        \$startOptions = json_encode(\$options);\r\n        \$endOptions = json_encode(\$options + ['useCurrent' => false]);\r\n\r\n        // 通过上面格式化后的id对表单进行你想要的操作\r\n        \$script = <<<JS\r\n            \$('#{\$this->id['start']}').datetimepicker(\$startOptions);\r\n            \$('#{\$this->id['end']}').datetimepicker(\$endOptions);\r\n            \$(\"#{\$this->id['start']}\").on(\"dp.change\", function (e) {\r\n                \$('#{\$this->id['end']}').data(\"DateTimePicker\").minDate(e.date);\r\n            });\r\n            \$(\"#{\$this->id['end']}\").on(\"dp.change\", function (e) {\r\n                \$('#{\$this->id['start']}').data(\"DateTimePicker\").maxDate(e.date);\r\n            });\r\nJS;\r\n\r\n        Admin::script(\$script);\r\n    }\r\n}\r\n```\r\n`admin::filter.between`模板内容如下：\r\n```php\r\n<div class=\"filter-input col-sm-{{ \$width }} \"  style=\"{!! \$style !!}\">\r\n    <div class=\"form-group\" >\r\n        <div class=\"input-group input-group-sm\">\r\n            <span class=\"input-group-addon\"><b>{!! \$label !!}</b></span>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"{{\$label}}\" name=\"{{\$name['start']}}\" value=\"{{ request(\$name['start'], \\Illuminate\\Support\\Arr::get(\$value, 'start')) }}\">\r\n            <span class=\"input-group-addon\" style=\"border-left: 0; border-right: 0;\">To</span>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"{{\$label}}\" name=\"{{\$name['end']}}\" value=\"{{ request(\$name['end'], \\Illuminate\\Support\\Arr::get(\$value, 'end')) }}\">\r\n        </div>\r\n    </div>\r\n</div>\r\n```\r\n`admin::filter.betweenDatetime`模板内容如下：\r\n```php\r\n<div class=\"filter-input col-sm-{{ \$width }}\"  style=\"{!! \$style !!}\">\r\n    <div class=\"form-group\">\r\n        <div class=\"input-group input-group-sm\">\r\n            <span class=\"input-group-addon\"><b>{{\$label}}</b>  &nbsp;<i class=\"fa fa-calendar\"></i></span>\r\n            <input type=\"text\" class=\"form-control\" id=\"{{\$id['start']}}\" placeholder=\"{{\$label}}\" name=\"{{\$name['start']}}\" value=\"{{ request(\$name['start'], \\Illuminate\\Support\\Arr::get(\$value, 'start')) }}\">\r\n            <span class=\"input-group-addon\" style=\"border-left: 0; border-right: 0;\">To</span>\r\n            <input type=\"text\" class=\"form-control\" id=\"{{\$id['end']}}\" placeholder=\"{{\$label}}\" name=\"{{\$name['end']}}\" value=\"{{ request(\$name['end'], \\Illuminate\\Support\\Arr::get(\$value, 'end')) }}\">\r\n        </div>\r\n    </div>\r\n</div>\r\n```\r\n\r\n现在只要调用`extend`方法可以使用了，打开`app/Admin/bootstrap.php`，加入以下代码：\r\n```php\r\nFilter::extend('customBetween', Filter\\Between::class);\r\n```\r\n\r\n使用：\r\n\r\n```php\r\n\$filter->customBetween('created_at')->datetime();\r\n```", 'order' => 10, 'created_at' => "2024-06-26 10:50:09", 'updated_at' => "2024-06-26 10:50:09", 'slug' => "query-filtering"],
            ['id' => 24, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "列过滤器", 'content' => "# 列过滤器\r\n\r\n这个功能可以给表格的列设置一个过滤器，可以更方便的根据这一列进行数据表格过滤操作\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d3cd06a56a46e5fec0e05a8fe8b2f455667b8248b315c.png)\r\n\r\n\r\n\r\n## 字符串比较查询\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n// WHERE `username` = \"\$input\"\r\n\$grid->username->filter(\r\n    Grid\\Column\\Filter\\Equal::make()\r\n);\r\n```\r\n\r\n上面的调用可以给 `username` 这一列的头部加上一个 `input` 类型的过滤器，点击过滤器图标展开过滤器，输入查询提交后，会对这一列执行 `等于` 查询。\r\n\r\n\r\n### 开启字段值查询\r\n这个功能可以给每一列字段的值设置一个过滤器，点击该列字段的值就可以进行数据表格过滤操作，非常方便。\r\n\r\n> 开启此功能之后会把这个字段的原始值作为搜索内容，不会受 `display` 方法影响。\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n// 设置为 label 或调用 display 方法不会影响查询内容\r\n\$grid->ip->label()->filter();\r\n\r\n// 相当于\r\n\$grid->ip->filter(\r\n    Grid\\Column\\Filter\\Equal::make()->valueFilter()\r\n);\r\n```\r\n\r\n鼠标移动到开启了值查询功能的列上面，右边会显示一个`放大镜`图标\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/8343fc06d78aa06ff14e9ff9c6c32ce5667b82556f919.png)\r\n\r\n\r\n点击列之后，表头会出现`重置`按钮，点击可以取消筛选\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/e87e90b4fea92e8b0384e30274289237667b8260c73a8.png)\r\n\r\n\r\n#### 设置值的字段名称\r\n\r\n如果当前列的值并非用户想要搜索的值，可以通过以下方法更改字段名称。\r\n\r\n```php\r\n\$grid->model()->with('user');\r\n\r\n// 实际搜索的会是 name 字段的值\r\n\$grid->username->filter('name');\r\n\r\n// 二维数组\r\n\$grid->user_id->filter('user.id');\r\n\r\n// 闭包\r\n\$grid->user_id->filter(function () {\r\n    return \$this->user['id'];\r\n});\r\n```\r\n\r\n#### 隐藏表头的筛选器图标\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->user_id->filterByValue();\r\n\r\n// 相当于\r\n\$grid->user_id->filter(\r\n    Grid\\Column\\Filter\\Equal::make()\r\n        ->valueFilter()\r\n        ->hide()\r\n);\r\n```\r\n\r\n效果如下\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/637c62fa6bee8f7b4402fb9fb9923314667b826caa156.png)\r\n\r\n\r\n\r\n### 其余Input表单类型过滤器\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n// WHERE `username` LIKE \"%{\$input}%\"\r\n\$grid->username->filter(\r\n    Grid\\Column\\Filter\\Like::make()\r\n);\r\n\r\n// WHERE `username` LIKE \"{\$input}%\"\r\n\$grid->username->filter(\r\n    Grid\\Column\\Filter\\StartWith::make()\r\n);\r\n\r\n// WHERE `username` > \"\$input\"\r\n\$grid->username->filter(\r\n    Grid\\Column\\Filter\\Gt::make()\r\n);\r\n\r\n// WHERE `username` <= \"\$input\"\r\n\$grid->username->filter(\r\n    Grid\\Column\\Filter\\Ngt::make()\r\n);\r\n\r\n// WHERE `username` < \"\$input\"\r\n\$grid->username->filter(\r\n    Grid\\Column\\Filter\\Lt::make()\r\n);\r\n\r\n// WHERE `username` >= \"\$input\"\r\n\$grid->username->filter(\r\n    Grid\\Column\\Filter\\Nlt::make()\r\n);\r\n```\r\n\r\n### 时间日期\r\n如果字段是时间、日期相关的字段，可以使用下面的方法\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->date()->filter(\r\n    Grid\\Column\\Filter\\Equal::make()->date()\r\n);\r\n\r\n\$grid->time()->filter(\r\n    Grid\\Column\\Filter\\Like::make()->time()\r\n);\r\n\r\n\$grid->datetime()->filter(\r\n    Grid\\Column\\Filter\\Gt::make()->datetime('YYYY-MM-DD HH:mm:ss')\r\n);\r\n```\r\n\r\n\r\n\r\n\r\n## 多选查询\r\n假设需要在表格数据中通过 `status` 字段过滤一个或者多个状态的数据，使用多选过滤可以非常方便的实现\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->column('status', '状态')->filter(\r\n    Grid\\Column\\Filter\\In::make([\r\n        0 => '未知',\r\n        1 => '已下单',\r\n        2 => '已付款',\r\n        3 => '已取消',\r\n    ])\r\n);\r\n```\r\n\r\n## 范围查询\r\n假设需要通过 `price` 字段过滤出某个价格范围内的数据\r\n\r\n```php\r\n\$grid->column('price')->filter(\r\n    Grid\\Column\\Filter\\Between::make()\r\n);\r\n```\r\n\r\n或者是时间、日期范围的过滤\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->date()->filter(\r\n    Grid\\Column\\Filter\\Between::make()->date()\r\n);\r\n\r\n\$grid->time()->filter(\r\n    Grid\\Column\\Filter\\Between::make()->time()\r\n);\r\n\r\n\$grid->datetime()->filter(\r\n    Grid\\Column\\Filter\\Between::make()->datetime()\r\n);\r\n```\r\n\r\n## 指定查询字段名\r\n\r\n通过`setColumnName`方法可以指定查询字段的名称\r\n\r\n```php\r\n\$grid->column('column')->filter(\r\n    Grid\\Column\\Filter\\Equal::make()->setColumnName('custom_column')\r\n);\r\n```\r\n\r\n### 查询json字段\r\n\r\n> Since `v1.7.0`\r\n\r\n```php\r\n\$grid->column('column')->filter(\r\n    Grid\\Column\\Filter\\Equal::make()->setColumnName('json_column->label')\r\n);\r\n```\r\n\r\n\r\n### 关联关系字段查询\r\n\r\n> Since `v1.7.0`\r\n\r\n如果安装了 [dcat/laravel-wherehasin](https://github.com/jqhph/laravel-wherehasin)，则会优先使用`whereHasIn`方法进行查询操作\r\n\r\n```php\r\n\$grid->column('user.name')->filter(\r\n    Grid\\Column\\Filter\\Equal::make()\r\n);\r\n\r\n\$grid->column('user_name')->filter(\r\n    Grid\\Column\\Filter\\Equal::make()->setColumnName('user.name')\r\n);\r\n```", 'order' => 11, 'created_at' => "2024-06-26 10:52:53", 'updated_at' => "2024-06-26 10:52:53", 'slug' => "column-filter"],
            ['id' => 25, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "快捷搜索", 'content' => "# 表格快捷搜索\r\n\r\n快捷搜索是除了`filter`之外的另一个表格数据搜索方式，用来快速过滤你想要的数据，开启方式如下：\r\n\r\n```php\r\n\$grid->quickSearch();\r\n\r\n// 设置表单提示值\r\n\$grid->quickSearch()->placeholder('搜索...');\r\n```\r\n这样表头会出现一个搜索框:\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/9b8dcac5e3d86d633a4bd1238f0cfbba667b832bbef5e.png)\r\n\r\n\r\n通过给`quickSearch`方法传入不同的参数，来设置不同的搜索方式，有下面几种使用方法\r\n\r\n## Like搜索\r\n\r\n第一种方式，通过设置字段名称来进行简单的like查询\r\n```php\r\n\$grid->quickSearch('title');\r\n\r\n// 提交后模型会执行下面的查询\r\n\$model->where('title', 'like', \"%{\$input}%\");\r\n```\r\n\r\n或者对多个字段做like查询:\r\n```php\r\n\$grid->quickSearch('title', 'desc', 'content');\r\n// 或\r\n\$grid->quickSearch(['title', 'desc', 'content']);\r\n\r\n// 提交后模型会执行下面的查询\r\n\$model->where('title', 'like', \"%{\$input}%\")\r\n    ->orWhere('desc', 'like', \"%{\$input}%\")\r\n    ->orWhere('content', 'like', \"%{\$input}%\");\r\n```\r\n\r\n### 关联关系\r\n\r\n> Since `v1.7.0`\r\n\r\n如果安装了 [dcat/laravel-wherehasin](https://github.com/jqhph/laravel-wherehasin)，则会优先使用`whereHasIn`方法进行查询操作\r\n\r\n```php\r\n\$grid->quickSearch('user.name', 'user.username', 'content');\r\n```\r\n\r\n## 自定义搜索\r\n第二种方式可以让你更灵活的控制搜索条件\r\n\r\n```php\r\n\$grid->quickSearch(function (\$model, \$query) {\r\n    \$model->where('title', \$query)->orWhere('desc', 'like', \"%{\$query}%\");\r\n});\r\n```\r\n其中闭包的参数`\$query`为你填入搜索框中的内容，提交之后进行闭包中的查询。\r\n\r\n## 快捷语法搜索\r\n第三种方式参考了`Github`的搜索语法，来进行快捷搜索，调用方式：\r\n\r\n```php\r\n// 不传参数\r\n\$grid->quickSearch();\r\n```\r\n填入搜索框的内容按照以下的语法，在提交之后会进行相应的查询 :\r\n\r\n### 比较查询\r\n`title:foo` 、`title:!foo`\r\n\r\n```php\r\n\$model->where('title', 'foo');\r\n\r\n\$model->where('title', '!=', 'foo');\r\n```\r\n\r\n`rate:>10`、`rate:<10`、`rate:>=10`、`rate:<=10`\r\n```php\r\n\$model->where('rate', '>', 10);\r\n\r\n\$model->where('rate', '<', 10);\r\n\r\n\$model->where('rate', '>=', 10);\r\n\r\n\$model->where('rate', '<=', 10);\r\n```\r\n\r\n### In、NotIn查询\r\n`status:(1,2,3,4)`、`status:!(1,2,3,4)`\r\n\r\n```php\r\n\$model->whereIn('status', [1,2,3,4]);\r\n\r\n\$model->whereNotIn('status', [1,2,3,4]);\r\n```\r\n\r\n### Between查询\r\n`score:[1,10]`\r\n\r\n```php\r\n\$model->whereBetween('score', [1, 10]);\r\n```\r\n\r\n### 时间日期函数查询\r\n`created_at:date,2019-06-08`\r\n\r\n```php\r\n\$model->whereDate('created_at', '2019-06-08');\r\n```\r\n\r\n`created_at:time,09:57:45`\r\n```php\r\n\$model->whereTime('created_at', '09:57:45');\r\n```\r\n\r\n`created_at:day,08`\r\n```php\r\n\$model->whereDay('created_at', '08');\r\n```\r\n\r\n`created_at:month,06`\r\n```php\r\n\$model->whereMonth('created_at', '06');\r\n```\r\n\r\n`created_at:year,2019`\r\n```php\r\n\$model->whereYear('created_at', '2019');\r\n```\r\n\r\n### Like查询\r\n`content:%Laudantium%`、`content:Laud%`\r\n\r\n```php\r\n\$model->where('content', 'like', '%Laudantium%');\r\n\r\n\$model->where('content', 'like', 'Laud%');\r\n```\r\n\r\n### 正则查询\r\n`username:/song/`\r\n\r\n> 这里请使用MYSQL正则语法\r\n\r\n```php\r\n\$model->where('username', 'REGEXP', 'song');\r\n```\r\n\r\n### 多条件组合搜索\r\n用空格隔开多个搜索语句就可以实现多个字段的AND查询，比如`username:%song% status:(1,2,3)`, 提交之后会运行下面的搜索\r\n```php\r\n\$model->where('username', 'like', '%song%')->whereIn('status', [1, 2, 3]);\r\n```\r\n\r\n如果某一个条件是`OR`查询, 只需要在语句单元前增加一个|符号即可： `username:%song% |status:(1,2,3)`\r\n```php\r\n\$model->where('username', 'like', '%song%')->orWhereIn('status', [1, 2, 3]);\r\n```\r\n\r\n> 如果填入的查询文字中包含空格，需要放在双引号里面：`updated_at:\"2019-06-08 09:57:45\"`\r\n\r\n### Label作为查询字段名称\r\n不方便得到字段名的情况下，可以直接使用label名称作为查询字段\r\n\r\n```php\r\n // 比如设置了`user_status`的表头列名为`用户状态`\r\n\$grid->column('user_status', '用户状态');\r\n```\r\n\r\n那么可以填入`用户状态:(1,2,3)`来执行下面的查询\r\n\r\n```php\r\n\$model->whereIn('user_status', [1, 2, 3]);\r\n```\r\n\r\n## 禁止自动提交\r\n\r\n快捷搜索默认是开启自动提交功能的，如果你不需要自动提交，可以通过以下方式禁用这个功能\r\n\r\n> 禁用了自动提交功能之后需要通过按回车(`Enter`)键进行搜索。\r\n\r\n```php\r\n\$grid->quickSearch()->auto(false);\r\n```", 'order' => 12, 'created_at' => "2024-06-26 10:55:43", 'updated_at' => "2024-06-26 10:55:43", 'slug' => "quick-search"],
            ['id' => 26, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "规格筛选器", 'content' => "# 表格规格筛选器\r\n\r\n\r\n这个功能用来构建类似淘宝或京东商品的规格选择。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/49709ad58cb1b49984b25b3d066e4b14667b8365101f0.png)\r\n\r\n\r\n### 基本使用\r\n\r\n> `select`和`selectOne`方法的第二个参数为选择器`label`, 可以省略，如果省略的话将会自动使用翻译文件的翻译.\r\n\r\n\r\n如下代码所示，假设`brand`字段的4个取值分别对应4个品牌，下面的方式会构建出`brand`的规格选择器\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->selector(function (Grid\\Tools\\Selector \$selector) {\r\n    \$selector->select('brand', '品牌', [\r\n        1 => '华为',\r\n        2 => '小米',\r\n        3 => 'OPPO',\r\n        4 => 'vivo',\r\n    ]);\r\n});\r\n```\r\n\r\n`select`方法默认是多选的，在页面上点击每一个选项的右边的加号，这个字段的查询会增加一个查询选项，如果字段筛选只允许选择一项，使用`selectOne`方法\r\n\r\n```php\r\n\$selector->selectOne('brand', '品牌', [\r\n    1 => '华为',\r\n    2 => '小米',\r\n    3 => 'OPPO',\r\n    4 => 'vivo',\r\n]);\r\n```\r\n\r\n### 关联关系字段查询\r\n\r\n\r\n如果安装了 [dcat/laravel-wherehasin](https://github.com/jqhph/laravel-wherehasin)，则会优先使用`whereHasIn`方法进行查询操作\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\n\$grid->selector(function (Grid\\Tools\\Selector \$selector) {\r\n    \$selector->select('brand.id', '品牌', [\r\n        1 => '华为',\r\n        2 => '小米',\r\n        3 => 'OPPO',\r\n        4 => 'vivo',\r\n    ]);\r\n});\r\n```\r\n\r\n### 自定义查询\r\n上面的方式会使用在选择器上选定的值，作为查询条件进行查询，但是有些情况需要更灵活的控制查询方式，那么可以使用下面的方式自定义查询：\r\n\r\n```php\r\n\$selector->select('price', '价格', ['0-999', '1000-1999', '2000-2999'], function (\$query, \$value) {\r\n    \$between = [\r\n        [0, 999],\r\n        [1000, 1999],\r\n        [2000, 2999],\r\n    ];\r\n    \r\n    \$value = current(\$value);\r\n\r\n    \$query->whereBetween('price', \$between[\$value]);\r\n});\r\n```\r\n\r\n如上所示，传入一个匿名函数作为第四个参数，价格字段price选择之后，将会使用匿名函数中的逻辑进行数据查询，这样你可以定义任意的查询方式。", 'order' => 13, 'created_at' => "2024-06-26 10:56:40", 'updated_at' => "2024-06-26 10:56:40", 'slug' => "specification-filter"],
            ['id' => 27, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "数据导出", 'content' => "# 数据导出\r\n\r\n系统默认使用<a href=\"https://github.com/jqhph/easy-excel\" target=\"__blank\">Easy Excel</a>作为导出工具，支持导出 `csv`、 `xlsx` 和 `ods` 等格式文件。\r\n\r\n\r\n使用前必须先安装<a href=\"https://github.com/jqhph/easy-excel\" target=\"__blank\">Easy Excel</a>：\r\n\r\n```bash\r\ncomposer require dcat/easy-excel\r\n```\r\n\r\n> {tip} 默认不开启导出功能。\r\n\r\n### 启用导出功能\r\n启用或禁用导出功能\r\n```php\r\n\$grid->export();\r\n```\r\n\r\n禁用 `导出所有` 选项\r\n```php\r\n\$grid->export()->disableExportAll();\r\n```\r\n\r\n禁用 `导出选中行` 选项\r\n```php\r\n\$grid->export()->disableExportSelectedRow();\r\n```\r\n\r\n禁用 `导出当前页` 选项\r\n```php\r\n\$grid->export()->disableExportCurrentPage();\r\n```\r\n\r\n### 导出文件类型\r\n\r\n> {tip} 默认导出 `xlsx` 格式文件。\r\n\r\n```php\r\n// csv\r\n\$grid->export()->csv();\r\n\r\n// xlsx\r\n\$grid->export()->xlsx();\r\n\r\n// ods\r\n\$grid->export()->ods();\r\n```\r\n\r\n### 设置列标题\r\n\r\n> 如果设置了标题，那么导出的文件的**列数**与标题的**列数**相同，且列的**排序**也相同。\r\n\r\n```php\r\n// 只导出 id, name和email 三列数据\r\n\$titles = ['id' => 'ID', 'name' => '名称', 'email' => '邮箱'];\r\n\r\n\$grid->export(\$titles);\r\n\r\n// 也可以这么使用\r\n\$grid->export()->titles(\$titles);\r\n```\r\n\r\n### 处理导出数据\r\n\r\n```php\r\n\$grid->export()->rows(function (\$rows) {\r\n    foreach (\$rows as \$index => &\$row) {\r\n        \$row['name'] = \$row['first_name'].' '.\$row['last_name'];\r\n    }\r\n    \r\n    return \$rows;\r\n});\r\n```\r\n\r\n### 设置导出文件名\r\n\r\n```php\r\n\$grid->export()->filename('管理员数据');\r\n```\r\n\r\n<a name=\"disable-export-extend\"></a>\r\n## 扩展导出功能\r\n\r\n如果系统内置的导出功能满足不了自己的需求，可以按照下面的步骤来自定义导出功能\r\n\r\n本示例用[Laravel-Excel](https://github.com/Maatwebsite/Laravel-Excel)作为excel操作库，当然也可以使用任何其他excel库\r\n\r\n首先安装好它：\r\n\r\n```shell\r\ncomposer require maatwebsite/excel:~2.1.0\r\n\r\nphp artisan vendor:publish --provider=\"Maatwebsite\\Excel\\ExcelServiceProvider\"\r\n```\r\n\r\n然后新建自定义导出类，比如`app/Admin/Extensions/ExcelExpoter.php`:\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions;\r\n\r\nuse Dcat\\Admin\\Grid\\Exporters\\AbstractExporter;\r\nuse Maatwebsite\\Excel\\Facades\\Excel;\r\n\r\nclass ExcelExpoter extends AbstractExporter\r\n{\r\n    public function export()\r\n    {\r\n        Excel::create('Filename', function(\$excel) {\r\n\r\n            \$excel->sheet('Sheetname', function(\$sheet) {\r\n                \r\n                 // 最多导出10W条数据\r\n                 // 必须设置maxSize，当否则选择导出所有选项时只能导出默认的20条数据。\r\n                \$maxSize = 10000;\r\n\r\n                // 这段逻辑是从表格数据中取出需要导出的字段\r\n                \$rows = collect(\$this->buildData(1, \$maxSize))->map(function (\$item) {\r\n                    return array_only(\$item, ['id', 'title', 'content', 'rate', 'keywords']);\r\n                });\r\n\r\n                \$sheet->rows(\$rows);\r\n\r\n            });\r\n\r\n        })->export('xls');\r\n    }\r\n}\r\n```\r\n\r\n然后在`model-grid`中使用这个导出类：\r\n```php\r\n\r\nuse App\\Admin\\Extensions\\ExcelExpoter;\r\n\r\n\$grid->export(new ExcelExpoter());\r\n```\r\n\r\n有关更多`Laravel-Excel`的使用方法，参考[laravel-excel/docs](http://www.maatwebsite.nl/laravel-excel/docs)", 'order' => 14, 'created_at' => "2024-06-26 10:57:20", 'updated_at' => "2024-06-26 10:57:20", 'slug' => "data-export"],
            ['id' => 28, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "快捷创建", 'content' => "# 快捷创建\r\n\r\n在表格中开启这个功能之后，会在表格头部增加一个`form`表单来创建数据，对于一些简单的表格页面，可以方便快速创建数据，不用跳转到创建页面操作\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/e6b6723163294c1cd0af7486f5098cb3667b83cf0d12a.png)\r\n\r\n\r\n### 基本使用\r\n\r\n>  需要注意的是，快捷创建表单中的每一项，在`form`表单页面要设置相同类型的表单项。\r\n\r\n```php\r\n\$grid->quickCreate(function (Grid\\Tools\\QuickCreate \$create) {\r\n    \$create->text('name', '名称');\r\n    \$create->email('email', '邮箱');\r\n});\r\n```\r\n\r\n### 设置提交地址\r\n\r\n> Since `v1.4.0`\r\n\r\n```php\r\n\$grid->quickCreate(function (Grid\\Tools\\QuickCreate \$create) {\r\n\t\$create->action('auth/users');\r\n\t\$create->method('GET');\r\n});\r\n```\r\n\r\n表单支持的表单项有下面的几种类型\r\n\r\n\r\n### 文本(text)\r\n文本输入框\r\n\r\n```php\r\n\$create->text('column_name', 'placeholder...');\r\n```\r\n\r\n### 隐藏表单(hidden)\r\n文本输入框\r\n\r\n\r\n```php\r\n\$create->hidden('column_name');\r\n```\r\n\r\n### 邮箱(email)\r\n邮箱输入框\r\n```php\r\n\$create->email('column_name', 'placeholder...');\r\n```\r\n\r\n### IP输入框\r\nip地址输入框\r\n\r\n```php\r\n\$create->ip('column_name', 'placeholder...');\r\n```\r\n\r\n### URL输入框\r\nurl输入框\r\n```php\r\n\$create->url('column_name', 'placeholder...');\r\n```\r\n\r\n\r\n### 密码(password)\r\n密码输入框\r\n```php\r\n\$create->password('column_name', 'placeholder...');\r\n```\r\n\r\n### 手机号(mobile)\r\n手机号输入框\r\n```php\r\n\$create->mobile('column_name', 'placeholder...');\r\n```\r\n\r\n### 整数(integer)\r\n整形数字输入框\r\n```php\r\n\$create->integer('column_name', 'placeholder...');\r\n```\r\n\r\n### 下拉选框(select)\r\n单选框\r\n```php\r\n\$create->select('column_name', 'placeholder...')->options([\r\n    1 => 'foo',\r\n    2 => 'bar',\r\n]);\r\n```\r\n\r\n\r\n### 下拉选框多选(multipleSelect)\r\n多选框\r\n```php\r\n\$create->multipleSelect('column_name', 'placeholder...')->options([\r\n    1 => 'foo',\r\n    2 => 'bar',\r\n]);\r\n```\r\n\r\n### 标签(tags)\r\n```php\r\n\$create->tags('column_name', 'placeholder...')->options([\r\n    1 => 'foo',\r\n    2 => 'bar',\r\n]);\r\n```\r\n\r\n\r\n### 日期时间选择\r\n时间日期输入框\r\n```php\r\n\$create->datetime('column_name', 'placeholder...');\r\n```\r\n\r\n### 时间选择(time)\r\n时间输入框\r\n```php\r\n\$create->time('column_name', 'placeholder...');\r\n```\r\n\r\n### 日期选择\r\n```php\r\n\$create->date('column_name', 'placeholder...');\r\n```", 'order' => 15, 'created_at' => "2024-06-26 10:58:26", 'updated_at' => "2024-06-26 10:58:26", 'slug' => "quick-creation"],
            ['id' => 29, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "行内编辑", 'content' => "# 数据表格行内编辑\r\n\r\n数据表格所有使用行内编辑的列字段，都必须在`form`表单中定义一个相同的表单字段，否则将无法进行编辑。\r\n\r\n### 文本 (editable)\r\n\r\n\r\n启用\r\n```php\r\n\$grid->column('title')->editable();\r\n\r\n// 编辑成功后刷新页面\r\n\$grid->column('nickname')->editable(true);\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f71b2558ae17a49393fe61f28f66bcf0667b848c631a8.png)\r\n\r\n### 开关 (switch)\r\n\r\n\r\n快速将列变成开关组件，使用方法如下：\r\n```php\r\n\$grid->status()->switch();\r\n```\r\n这个功能需要你在`form`表单方法中同样设置一个`status`字段\r\n\r\n```php\r\n\$form->hidden('status')\r\n\t->customFormat(function (\$v) {\r\n\t\treturn \$v == '打开' ? 1 : 0;\r\n\t})\r\n\t->saving(function (\$v) {\r\n\t\treturn \$v ? '打开' : '关闭';\r\n\t});\r\n\r\n// 或者\r\n\$form->switch('status')\r\n\t->customFormat(function (\$v) {\r\n\t\treturn \$v == '打开' ? 1 : 0;\r\n\t})\r\n\t->saving(function (\$v) {\r\n\t\treturn \$v ? '打开' : '关闭';\r\n\t});\r\n```\r\n\r\n编辑成功后刷新页面\r\n```php\r\n\$grid->column('status')->switch('', true);\r\n```\r\n\r\n### 开关组 (switchGroup)\r\n\r\n> 注意：在`grid`中对某字段设置`switchGroup`默认的保存结果是`0`或`1`，如需修改可以通过`\$form->hidden(xxx)->saving(...)`方法修改。\r\n\r\n快速将列变成开关组件组，使用方法如下：\r\n```php\r\n\$grid->switch_group->switchGroup([\r\n    'hot'        => '热门',\r\n    'new'        => '最新',\r\n    'recommend'  => '推荐',\r\n    'image.show' => '显示图片', // 更新对应关联模型\r\n]);\r\n// 或\r\n// 不写label会自动从翻译文件翻译，具体使用请参照 “字段翻译” 章节\r\n\$grid->switch_group->switchGroup(['is_new', 'is_hot', 'published']);\r\n```\r\n\r\n这个功能需要你在`form`表单方法中同样设置对应的字段\r\n\r\n```php\r\n\$form->switch('hot')\r\n\t->customFormat(function (\$v) {\r\n\t\treturn \$v == '打开' ? 1 : 0;\r\n\t})\r\n\t->saving(function (\$v) {\r\n\t\treturn \$v ? '打开' : '关闭';\r\n\t});\r\n\r\n\$form->switch('new')\r\n\t->customFormat(function (\$v) {\r\n\t\treturn \$v == '打开' ? 1 : 0;\r\n\t})\r\n\t->saving(function (\$v) {\r\n\t\treturn \$v ? '打开' : '关闭';\r\n\t});\r\n```\r\n\r\n\r\n编辑成功后刷新页面\r\n```php\r\n\$grid->column('switch_group')->switchGroup([...], true);\r\n```\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/7ab239b8c2e7893e86483ffc0ba31985667b849c1daa2.png)\r\n\r\n\r\n\r\n### 下拉选框\r\n\r\n```php\r\n\$grid->options()->select([\r\n    1 => 'Sed ut perspiciatis unde omni',\r\n    2 => 'voluptatem accusantium doloremque',\r\n    3 => 'dicta sunt explicabo',\r\n    4 => 'laudantium, totam rem aperiam',\r\n]);\r\n```\r\n\r\n`select` 也支持参数为闭包，使用方法和`editable`的`select`类似。\r\n\r\n\r\n编辑成功后刷新页面\r\n```php\r\n\$grid->column('options')->select([...], true);\r\n```\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/09a7f8428384f7deb04c3b8b66721755667b84b4cd1cd.png)\r\n\r\n\r\n### 单选框\r\n```php\r\n\$grid->options()->radio([\r\n    1 => 'Sed ut perspiciatis unde omni',\r\n    2 => 'voluptatem accusantium doloremque',\r\n    3 => 'dicta sunt explicabo',\r\n    4 => 'laudantium, totam rem aperiam',\r\n]);\r\n```\r\n\r\n`radio` 也支持参数为闭包，使用方法和`editable`的`select`类似。\r\n\r\n\r\n编辑成功后刷新页面\r\n```php\r\n\$grid->column('options')->radio([...], true);\r\n```\r\n\r\n### 多选框\r\n```php\r\n\$grid->options()->checkbox([\r\n    1 => 'Sed ut perspiciatis unde omni',\r\n    2 => 'voluptatem accusantium doloremque',\r\n    3 => 'dicta sunt explicabo',\r\n    4 => 'laudantium, totam rem aperiam',\r\n]);\r\n```\r\n\r\n`checkbox` 也支持参数为闭包。\r\n\r\n\r\n编辑成功后刷新页面\r\n```php\r\n\$grid->column('options')->checkbox([...], true);\r\n```\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/e539923b032b0fc6412c4d43a26cdbde667b84c4b2054.png)\r\n\r\n### textarea\r\n\r\n```php\r\n\$grid->column('...')->textarea();\r\n```\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/fe6a2952eabf94ae4dc2db1b3d42d359667b84f81c548.png)", 'order' => 16, 'created_at' => "2024-06-26 11:03:32", 'updated_at' => "2024-06-26 11:03:32", 'slug' => "in-line-editing"],
            ['id' => 30, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "事件", 'content' => "# 数据表格事件\r\n\r\n### 初始化\r\n\r\n\r\n通过 `Grid::resolving` 方法可以监听表格初始化事件。\r\n\r\n\r\n开发者可以在这两个事件中改变 `Grid` 的一些设置或行为，比如需要禁用掉某些操作，可以在 `app/Admin/bootstrap.php` 加入下面的代码：\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid;\r\n\r\nGrid::resolving(function (Grid \$grid) {\r\n    \$grid->disableActions();\r\n\r\n    \$grid->disablePagination();\r\n\r\n    \$grid->disableCreateButton();\r\n\r\n    \$grid->disableFilter();\r\n\r\n    \$grid->disableRowSelector();\r\n\r\n    \$grid->disableToolbar();\r\n});\r\n\r\n\r\n// 只需要监听一次\r\nGrid::resolving(function (Grid \$grid) {\r\n    ...\r\n}, true);\r\n```\r\n这样就不用在每一个控制器的代码中来设置了。\r\n\r\n如果全局设置后，要在其中某一个表格中开启设置，比如开启显示操作列，在对应的实例上调用 `\$grid->disableActions(false);` 就可以了\r\n\r\n\r\n### 构建\r\n\r\n通过 `Grid::composing` 方法可以监听表格被调用事件。\r\n\r\n```php\r\nGrid::composing(function (Grid \$grid) {\r\n    ...\r\n});\r\n\r\n// 只需要监听一次\r\nGrid::composing(function (Grid \$grid) {\r\n    ...\r\n}, true);\r\n```\r\n\r\n### Fetching\r\n\r\n监听表格获取数据之前事件，此事件在 `composing` 事件之后触发。\r\n\r\n```php\r\n\$grid->listen(Grid\\Events\\Fetching::class, function (\$grid) {\r\n\t  \r\n});\r\n\r\n\r\n// 可以在 composing 事件中使用\r\nGrid::composing(function (Grid \$grid) {\r\n    \$grid->listen(Grid\\Events\\Fetching::class, function (\$grid) {\r\n    \t  \r\n    });\r\n});\r\n```\r\n\r\n### Fetched\r\n\r\n监听表格获取数据之后事件，通过监听此事件可以批量修改数据, 参考下面实例\r\n\r\n```php\r\n\$grid->listen(Grid\\Events\\Fetched::class, function (\$grid, Collection \$rows) {\r\n\t// \$collection 当前这一个表格数据的模型集合， 你可以根据你的需要来读取或者修改它的数据。\r\n\r\n    \$rows->transform(function (\$row) {\r\n        // 更改行数据\r\n        \$row['name'] = \$row['first_name'].' '.\$row['last_name'];\r\n        \r\n        return \$row;\r\n    });\r\n});\r\n```\r\n\r\n### ApplyFilter\r\n\r\n监听表格过滤器搜索事件，此事件只有在过滤器有搜索条件时才会触发\r\n\r\n```php\r\n\$grid->listen(Grid\\Events\\ApplyFilter::class, function (\$grid, array \$conditions) {\r\n\t// \$conditions 当前过滤器生成的搜索条件数组\r\n\r\n    dd('表格过滤器', \$conditions);\r\n});\r\n```\r\n\r\n\r\n### ApplyQuickSearch\r\n\r\n监听表格快捷搜索事件，此事件只有在快捷搜索输入框有值时才会触发\r\n\r\n```php\r\n\$grid->listen(Grid\\Events\\ApplyQuickSearch::class, function (\$grid, \$input) {\r\n\t// \$input 搜索关键字\r\n\r\n    dd('表格快捷搜索', \$input);\r\n});\r\n```\r\n\r\n### ApplySelector\r\n\r\n监听表格规格筛选器事件，此事件只有在规格筛选器选中选项时才会触发\r\n\r\n```php\r\n\$grid->listen(Grid\\Events\\ApplySelector::class, function (\$grid, array \$input) {\r\n\t// \$input 筛选器选中的选项数组\r\n\r\n    dd('表格规格筛选器', \$input);\r\n});\r\n```\r\n\r\n\r\n\r\n### rows回调\r\n\r\n通过 `Grid::rows` 方法可以监听表格获取数据之后事件。\r\n\r\n```php\r\nuse Dcat\\Admin\\Grid\\Row;\r\nuse Illuminate\\Support\\Collection;\r\n\r\n\$grid->rows(function (Collection \$rows) {\r\n    /**\r\n     * 获取第一行数据\r\n     *\r\n     * @var Row \$firstRow\r\n     */\r\n    \$firstRow = \$rows->first();\r\n    \r\n    // 设置 tr html属性\r\n    \$firstRow->setAttributes(['name' => '....']);\r\n    \r\n    if (\$firstRow) {\r\n        // 获取第一行的 id\r\n        \$id = \$firstRow->id;\r\n        // 转化为数组\r\n        \$row = \$firstRow->toArray();\r\n    }\r\n});\r\n```", 'order' => 17, 'created_at' => "2024-06-26 11:04:36", 'updated_at' => "2024-06-26 11:04:36", 'slug' => "event"],
            ['id' => 31, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "字段翻译", 'content' => "# 表格字段翻译\r\n\r\n数据表格中所有使用到字段的地方都会自动读取语言包中的翻译。\r\n\r\n> 语言包的详细使用方法请参考<a>[多语言](https://learnku.com/docs/dcat-admin/1.x/basic-use/8127)</a>。\r\n\r\n### 语言包名称\r\n语言包名称需要与控制器名相对应，假如控制器名`UserProfileController`，则对应的语言包为`resources/lang/{当前语言}/user-profile.php`（需要转化为小写中划线风格）。\r\n\r\n如果想要更改语言包的名称，可以通过下面两种方式进行更改\r\n\r\n方式1\r\n```php\r\nuse Dcat\\Admin\\Http\\Controllers\\AdminController;\r\n\r\nclass UserController extends AdminController\r\n{\r\n    /**\r\n     * 指定翻译文件名称\r\n     * \r\n     * @var string \r\n     */\r\n    protected \$translation = 'user1';\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n方式2\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nAdmin::translation('user1');\r\n```\r\n\r\n\r\n\r\n### 示例\r\n现在假设语言包`resources/lang/zh_CN/user-profile.php`内容如下：\r\n```php\r\nreturn [\r\n    'fields' => [\r\n        'name'  => '名称',\r\n        'age'   => '年龄',\r\n        'class' => '班级',\r\n    ],\r\n];\r\n```\r\n\r\n控制器`UserProfileController`中设置的`Grid`字段会自动读取以上翻译：\r\n```php\r\n// 不设置labael会自动读取语言包翻译\r\n\$grid->id();\r\n\$grid->name;\r\n\$grid->age;\r\n\$grid->class;\r\n\r\n\$grid->filter(function (\$filter) {\r\n    \$filter->gt('age');\r\n});\r\n\r\n// 上面代码等同于\r\n\$grid->name('名称');\r\n\$grid->age('年龄');\r\n\r\n// 也可这样使用\r\n\$grid->id(admin_trans_field('id'));\r\n\$grid->name(admin_trans_field('name'));\r\n\$grid->age(admin_trans_field('age'));\r\n\r\n```\r\n\r\n### 公共翻译\r\n当`admin_trans_field`函数找不到当前控制器中对指定字段的翻译时，会去`global.php`中查找。如果某些字段是很多数据表中都有的，可以把这些翻译写在`resources/lang/{当前语言}/global.php`文件中。\r\n```php\r\nreturn [\r\n    // 常用的字段放在 global.php 中可以所有控制器共用。\r\n    'fields' => [\r\n        'id'         => 'ID',\r\n        'created_at' => '创建时间',\r\n        'updated_at' => '更新时间',\r\n    ],\r\n];\r\n```", 'order' => 18, 'created_at' => "2024-06-26 11:05:18", 'updated_at' => "2024-06-26 11:05:18", 'slug' => "field-translation"],
            ['id' => 32, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "数据软删除", 'content' => "# 数据软删除\r\n\r\n\r\n先参考`Laravel`文档实现模型的[软删除](https://learnku.com/docs/laravel/6.x/eloquent/5176#soft-deleting):\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\r\n\r\nclass Post extends Model\r\n{\r\n    use SoftDeletes;\r\n}\r\n```\r\n\r\n这样在`grid`列表中显示的数据都是未被删除的数据\r\n\r\n```php\r\nreturn Grid::make(new Post(), function (Grid \$grid) {\r\n\t\$grid->id('ID')->sortable();\r\n\t\$grid->title('Title');\r\n\t\$grid->created_at('Created at');\r\n\t\$grid->updated_at('Updated at');\r\n});\r\n```\r\n\r\n## 回收站入口\r\n\r\n接下来需要增加一个入口，能让我们看到被软删除的数据，这里可以使用`model-grid`的[范围过滤器](https://learnku.com/docs/dcat-admin/1.x/query-filtering/8097#scope)来实现\r\n\r\n```php\r\n\$grid->filter(function (\$filter) {\r\n\r\n    // 范围过滤器，调用模型的`onlyTrashed`方法，查询出被软删除的数据。\r\n    \$filter->scope('trashed', '回收站')->onlyTrashed();\r\n\r\n});\r\n```\r\n\r\n在表头的筛选按钮的下拉菜单中就会出现一个`回收站`按钮，点击它，就会调用模型的`onlyTrashed`方法，从表中查询出被删除的数据，也就是回收站中的数据。\r\n# 数据软删除\r\n\r\n\r\n先参考`Laravel`文档实现模型的[软删除](https://learnku.com/docs/laravel/6.x/eloquent/5176#soft-deleting):\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\r\n\r\nclass Post extends Model\r\n{\r\n    use SoftDeletes;\r\n}\r\n```\r\n\r\n这样在`grid`列表中显示的数据都是未被删除的数据\r\n\r\n```php\r\nreturn Grid::make(new Post(), function (Grid \$grid) {\r\n\t\$grid->id('ID')->sortable();\r\n\t\$grid->title('Title');\r\n\t\$grid->created_at('Created at');\r\n\t\$grid->updated_at('Updated at');\r\n});\r\n```\r\n\r\n## 回收站入口\r\n\r\n接下来需要增加一个入口，能让我们看到被软删除的数据，这里可以使用`model-grid`的[范围过滤器](https://learnku.com/docs/dcat-admin/1.x/query-filtering/8097#scope)来实现\r\n\r\n```php\r\n\$grid->filter(function (\$filter) {\r\n\r\n    // 范围过滤器，调用模型的`onlyTrashed`方法，查询出被软删除的数据。\r\n    \$filter->scope('trashed', '回收站')->onlyTrashed();\r\n\r\n});\r\n```\r\n\r\n在表头的筛选按钮的下拉菜单中就会出现一个`回收站`按钮，点击它，就会调用模型的`onlyTrashed`方法，从表中查询出被删除的数据，也就是回收站中的数据。\r\n<img style=\"box-shadow:0 1px 6px 1px rgba(0, 0, 0, 0.12)\" width=\"40%\" src=\"https://cdn.learnku.com/uploads/images/202205/19/98106/7imWhgPa38.png!large\">\r\n\r\n\r\n\r\n## 行恢复操作\r\n\r\n按照下面的方法，我们可以在回收站中的每一行数据加上一个恢复操作，方便恢复数据\r\n\r\n先定义操作类`app/Admin/Actions/Post/Restore.php`：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Post;\r\n\r\nuse Dcat\\Admin\\Grid\\RowAction;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Restore extends RowAction\r\n{\r\n    protected \$title = '恢复';\r\n        \r\n\tprotected \$model;\r\n\t\r\n\t// 注意构造方法的参数必须要有默认值\r\n\tpublic function __construct(string \$model = null) \r\n\t{\r\n\t\t\$this->model = \$model;\r\n\t}\r\n\r\n    public function handle(Request \$request)\r\n    {\r\n        \$key = \$this->getKey();\r\n        \$model = \$request->get('model');\r\n        \r\n        \$model::withTrashed()->findOrFail(\$key)->restore();\r\n\r\n        return \$this->response()->success('已恢复')->refresh();\r\n    }\r\n\r\n    public function confirm()\r\n    {\r\n        return ['确定恢复吗？'];\r\n    }\r\n    \r\n    public function parameters()\r\n    {\r\n        return [\r\n            'model' => \$this->model,    \r\n\t\t];\r\n\t}\r\n}\r\n```\r\n\r\n添加到行操作:\r\n\r\n```php\r\nuse App\\Models\\Post;\r\nuse App\\Admin\\Actions\\Post\\Restore;\r\n\r\n\$grid->actions(function (Grid\\Displayers\\Actions \$actions) {\r\n    if (request('_scope_') == 'trashed') {\r\n        \$actions->append(new Restore(Post::class));\r\n    }\r\n});\r\n```\r\n\r\n## 批量恢复操作\r\n\r\n先定义操作类`app/Admin/Actions/Post/BatchRestore.php`：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Post;\r\n\r\nuse Dcat\\Admin\\Grid\\BatchAction;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass BatchRestore extends BatchAction\r\n{\r\n    protected \$title = '恢复';\r\n    \r\n    protected \$model;\r\n    \r\n    // 注意构造方法的参数必须要有默认值\r\n    public function __construct(string \$model = null) \r\n    {\r\n        \$this->model = \$model;\r\n    }\r\n\r\n    public function handle(Request \$request)\r\n    {\r\n        \$model = \$request->get('model');\r\n        \r\n        foreach ((array) \$this->getKey() as \$key) {\r\n\t\t\t\$model::withTrashed()->findOrFail(\$key)->restore();\r\n\t\t}\r\n        \r\n        return \$this->response()->success('已恢复')->refresh();\r\n    }\r\n\r\n    public function confirm()\r\n    {\r\n        return ['确定恢复吗？'];\r\n    }\r\n    \r\n\tpublic function parameters()\r\n\t{\r\n\t\treturn [\r\n\t\t\t'model' => \$this->model,    \r\n\t\t];\r\n\t}\r\n}\r\n```\r\n\r\n添加到批量操作:\r\n\r\n```php\r\nuse App\\Models\\Post;\r\nuse App\\Admin\\Actions\\Post\\BatchRestore;\r\n\r\n\$grid->batchActions(function (Grid\\Tools\\BatchActions \$batch) {\r\n\tif (request('_scope_') == 'trashed') {\r\n\t\t\$batch->add(new BatchRestore(Post::class));\r\n\t}\r\n});\r\n```\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/c1935b36c4f69b6bdbfa9e85e73c8c2f667b85d6687a1.png)\r\n\r\n\r\n\r\n## 行恢复操作\r\n\r\n按照下面的方法，我们可以在回收站中的每一行数据加上一个恢复操作，方便恢复数据\r\n\r\n先定义操作类`app/Admin/Actions/Post/Restore.php`：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Post;\r\n\r\nuse Dcat\\Admin\\Grid\\RowAction;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Restore extends RowAction\r\n{\r\n    protected \$title = '恢复';\r\n        \r\n\tprotected \$model;\r\n\t\r\n\t// 注意构造方法的参数必须要有默认值\r\n\tpublic function __construct(string \$model = null) \r\n\t{\r\n\t\t\$this->model = \$model;\r\n\t}\r\n\r\n    public function handle(Request \$request)\r\n    {\r\n        \$key = \$this->getKey();\r\n        \$model = \$request->get('model');\r\n        \r\n        \$model::withTrashed()->findOrFail(\$key)->restore();\r\n\r\n        return \$this->response()->success('已恢复')->refresh();\r\n    }\r\n\r\n    public function confirm()\r\n    {\r\n        return ['确定恢复吗？'];\r\n    }\r\n    \r\n    public function parameters()\r\n    {\r\n        return [\r\n            'model' => \$this->model,    \r\n\t\t];\r\n\t}\r\n}\r\n```\r\n\r\n添加到行操作:\r\n\r\n```php\r\nuse App\\Models\\Post;\r\nuse App\\Admin\\Actions\\Post\\Restore;\r\n\r\n\$grid->actions(function (Grid\\Displayers\\Actions \$actions) {\r\n    if (request('_scope_') == 'trashed') {\r\n        \$actions->append(new Restore(Post::class));\r\n    }\r\n});\r\n```\r\n\r\n## 批量恢复操作\r\n\r\n先定义操作类`app/Admin/Actions/Post/BatchRestore.php`：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Post;\r\n\r\nuse Dcat\\Admin\\Grid\\BatchAction;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass BatchRestore extends BatchAction\r\n{\r\n    protected \$title = '恢复';\r\n    \r\n    protected \$model;\r\n    \r\n    // 注意构造方法的参数必须要有默认值\r\n    public function __construct(string \$model = null) \r\n    {\r\n        \$this->model = \$model;\r\n    }\r\n\r\n    public function handle(Request \$request)\r\n    {\r\n        \$model = \$request->get('model');\r\n        \r\n        foreach ((array) \$this->getKey() as \$key) {\r\n\t\t\t\$model::withTrashed()->findOrFail(\$key)->restore();\r\n\t\t}\r\n        \r\n        return \$this->response()->success('已恢复')->refresh();\r\n    }\r\n\r\n    public function confirm()\r\n    {\r\n        return ['确定恢复吗？'];\r\n    }\r\n    \r\n\tpublic function parameters()\r\n\t{\r\n\t\treturn [\r\n\t\t\t'model' => \$this->model,    \r\n\t\t];\r\n\t}\r\n}\r\n```\r\n\r\n添加到批量操作:\r\n\r\n```php\r\nuse App\\Models\\Post;\r\nuse App\\Admin\\Actions\\Post\\BatchRestore;\r\n\r\n\$grid->batchActions(function (Grid\\Tools\\BatchActions \$batch) {\r\n\tif (request('_scope_') == 'trashed') {\r\n\t\t\$batch->add(new BatchRestore(Post::class));\r\n\t}\r\n});\r\n```", 'order' => 19, 'created_at' => "2024-06-26 11:07:18", 'updated_at' => "2024-06-26 11:07:18", 'slug' => "data-soft-deletion"],
            ['id' => 33, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "头部和脚部", 'content' => "# 头部和脚部\r\n\r\n数据表格支持往头部和脚部两个区块填入你想要的内容\r\n\r\n```php\r\n\$grid->header(function (\$collection) {\r\n    return 'header';\r\n});\r\n\r\n\$grid->footer(function (\$collection) {\r\n    return 'footer'; \r\n});\r\n```\r\n\r\n其中闭包函数的参数`\$collection`为`Illuminate\\Support\\Collection`类实例，是当前页表格数据，下面是两个不同场景的使用举例\r\n\r\n## 头部\r\n\r\n```php\r\n\$grid->header(function (\$collection) use (\$grid) {\r\n\t\$query = Model::query();\r\n    \t\r\n\t// 拿到表格筛选 where 条件数组进行遍历\r\n\t\$grid->model()->getQueries()->unique()->each(function (\$value) use (&\$query) {\r\n\t\tif (in_array(\$value['method'], ['paginate', 'get', 'orderBy', 'orderByDesc'], true)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\$query = call_user_func_array([\$query, \$value['method']], \$value['arguments'] ?? []);\r\n\t});\r\n\t\r\n\t// 查出统计数据\r\n\t\$data = \$query->get();\r\n\r\n    // 自定义组件\r\n    return new Card(\$data);\r\n});\r\n```\r\n\r\n自定义头部展示的组件实现\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Contracts\\Support\\Renderable;\r\nuse Dcat\\Admin\\Admin;\r\n\r\nclass Card implements Renderable\r\n{\r\n\tpublic static \$js = [\r\n\t\t'xxx/js/card.min.js',\r\n\t];\r\n\tpublic static \$css = [\r\n\t\t'xxx/css/card.min.css',\r\n\t];\r\n\t\r\n\tprotected \$data;\r\n\t\r\n\tpublic function __construct(\$data) \r\n\t{\r\n\t    \$this->data = \$data;\r\n\t}\r\n\r\n\tpublic function script()\r\n\t{\r\n\t\treturn <<<JS\r\n\t\tconsole.log('所有JS脚本都加载完了');\r\n\t\t\$('xxx').card();\r\nJS;\t\t\r\n\t}\r\n\r\n\tpublic function render()\r\n\t{\r\n\t\t// 在这里可以引入你的js或css文件\r\n\t\tAdmin::js(static::\$js);\r\n\t\tAdmin::css(static::\$css);\r\n\t\t\r\n\t\t// 需要在页面执行的JS代码\r\n\t\t// 通过 Admin::script 设置的JS代码会自动在所有JS脚本都加载完毕后执行\r\n\t\tAdmin::script(\$this->script());\r\n\t\t\r\n\t\treturn view('...', ['data' => \$this->data])->render();\r\n\t}\r\n}\r\n```\r\n\r\n\r\n## 脚部\r\n\r\n一个比较常见的场景是在数据表格的脚部显示统计信息，比如在订单表格的脚部加入收入统计，可以参考下面的代码实现：\r\n\r\n```php\r\n\$grid->footer(function (\$collection) use (\$grid) {\r\n\t\$query = Model::query();\r\n\t\r\n\t// 拿到表格筛选 where 条件数组进行遍历\r\n\t\$grid->model()->getQueries()->unique()->each(function (\$value) use (&\$query) {\r\n\t\tif (in_array(\$value['method'], ['paginate', 'get', 'orderBy', 'orderByDesc'], true)) {\r\n\t\t    return;\r\n\t\t}\r\n\r\n\t\t\$query = call_user_func_array([\$query, \$value['method']], \$value['arguments'] ?? []);\r\n\t});\r\n\t\r\n\t// 查出统计数据\r\n\t\$data = \$query->get();\r\n\r\n    return \"<div style='padding: 10px;'>总收入 ： \$data</div>\";\r\n});\r\n```\r\n\r\n如果有比较复杂的脚部需要显示，也可以使用视图对象或者封装成一个类来实现。", 'order' => 20, 'created_at' => "2024-06-26 11:08:03", 'updated_at' => "2024-06-26 11:08:03", 'slug' => "head-and-feet"],
            ['id' => 34, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 2, 'title' => "表格异步渲染", 'content' => "# 表格异步渲染\r\n\r\n当页面的表格展示的数据特别多（列多行多），并且加载的组件也较多时，可能会出现卡顿的现象，此时可以使用表格异步渲染功能，可以有效地减轻页面卡顿的情况：\r\n\r\n\r\n```php\r\n// 启用表格异步渲染功能\r\n\$grid->async();\r\n\r\n// 禁用\r\n\$grid->async(false);\r\n\r\n// 判断是否是异步渲染请求\r\nif (\$grid->isAsyncRequest()) {\r\n    ...\r\n}\r\n```\r\n\r\n> 需要注意的是，如果页面没有出现明显的卡顿现象，则无需启用此功能；并且如果页面中存在多个数据表格，那么也无法使用此功能。\r\n\r\n开启此功能之后，表格**工具栏**(`toolbar`)以下的位置都会采用异步的方式进行渲染，换句话说，**工具栏**(`toolbar`)以及以上的位置只会刷新一次！在实际编码过程中需要注意有无特殊影响。", 'order' => 21, 'created_at' => "2024-06-26 11:09:05", 'updated_at' => "2024-06-26 11:09:05", 'slug' => "asynchronous-rendering"],
            ['id' => 35, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "基本使用", 'content' => "# 表单基本使用\r\n\r\n## 示例\r\n`Dcat\\Admin\\Form`类用于快速生成表单页面，先来个例子，数据库中有`movies`表\r\n\r\n```sql\r\nCREATE TABLE `movies` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `director` int(10) unsigned NOT NULL,\r\n  `describe` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `rate` tinyint unsigned NOT NULL,\r\n  `released` enum(0, 1),\r\n  `release_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\n```\r\n\r\n对应的数据模型为`App\\Models\\Movie`，数据仓库为`App\\Admin\\Repositories\\Movie`：\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\Movie;\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$form = Form::make(new Movie(), function (Form \$form) {\r\n    // 显示记录id\r\n    \$form->display('id', 'ID');\r\n    \r\n    // 添加text类型的input框\r\n    \$form->text('title', '电影标题');\r\n    \r\n    \$directors = [\r\n        1 => 'John',\r\n        2 => 'Smith',\r\n        3 => 'Kate',\r\n    ];\r\n    \r\n    \$form->select('director', '导演')->options(\$directors);\r\n    \r\n    // 添加describe的textarea输入框\r\n    \$form->textarea('describe', '简介');\r\n    \r\n    // 数字输入框\r\n    \$form->number('rate', '打分');\r\n    \r\n    // 添加开关操作\r\n    \$form->switch('released', '发布？');\r\n    \r\n    // 添加日期时间选择框\r\n    \$form->datetime('release_at', '发布时间');\r\n    \r\n    // 两个时间显示\r\n    \$form->display('created_at', '创建时间');\r\n    \$form->display('updated_at', '修改时间');\r\n});\r\n```\r\n\r\n## 数据仓库\r\n\r\n数据仓库(`Repository`)是一个可以提供特定接口对数据进行读写操作的类，通过数据仓库的引入，可以让页面的构建不再关心数据读写功能的具体实现。只需要实现特定的操作接口即可轻松切换数据源，关于数据仓库的详细用法请参考文档[数据仓库](https://learnku.com/docs/dcat-admin/1.x/basic-use/8123)。\r\n\r\n\r\n## 表单定义\r\n\r\n推荐使用以下方式构建表单\r\n```php\r\nuse App\\Admin\\Repositories\\Movie;\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$form = Form::make(new Movie, function (Form \$form) {\r\n    // 显示记录id\r\n    \$form->display('id', 'ID');\r\n\r\n    \$form->select('director', '导演')->options(\$directors);\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n### 获取当前模型数据\r\n\r\n在闭包内可以获取到当前模型的数据（编辑）\r\n```php\r\nForm::make(new Movie, function (Form \$form) {\r\n    // 显示记录id\r\n    \$form->display('id', 'ID');\r\n\r\n    // 获取模型数据，如果\"status == 1\"则显示\"rate\"字段\r\n    if (\$form->model()->status == 1) {\r\n        \$form->number('rate');\r\n    }\r\n    \r\n    \$form->select('director', '导演')->options(\$directors);\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n\r\n## 自定义工具\r\n\r\n表单右上角默认有返回和跳转列表两个按钮工具, 可以使用下面的方式修改它:\r\n\r\n```php\r\n\$form->tools(function (Form\\Tools \$tools) {\r\n    // 去掉跳转列表按钮\r\n    \$tools->disableList();\r\n    // 去掉跳转详情页按钮\r\n    \$tools->disableView();\r\n    // 去掉删除按钮\r\n    \$tools->disableDelete();\r\n\r\n    // 添加一个按钮, 参数可以是字符串, 匿名函数, 或者实现了Renderable或Htmlable接口的对象实例\r\n    \$tools->append('<a class=\"btn btn-sm btn-danger\"><i class=\"fa fa-trash\"></i>  delete</a>');\r\n});\r\n\r\n// 去除整个工具栏内容\r\n\$form->disableHeader();\r\n\r\n// 也可以通过以下方式去除工具栏的默认按钮\r\n\$form->disableListButton();\r\n\$form->disableViewButton();\r\n\$form->disableDeleteButton();\r\n```\r\n\r\n自定义视图\r\n\r\n自定义视图\r\n\r\n```php\r\n\$form->footer(function (\$footer) {\r\n    \$footer->view('...', [...]);\r\n});\r\n```\r\n\r\n### 自定义复杂工具按钮\r\n\r\n请参考文档[数据表单动作](https://learnku.com/docs/dcat-admin/1.x/data-form/8450)\r\n\r\n\r\n## 表单底部\r\n使用下面的方法去掉form底部的元素\r\n\r\n```php\r\n\$form->footer(function (\$footer) {\r\n\r\n    // 去掉`重置`按钮\r\n    \$footer->disableReset();\r\n\r\n    // 去掉`提交`按钮\r\n    \$footer->disableSubmit();\r\n\r\n    // 去掉`查看`checkbox\r\n    \$footer->disableViewCheck();\r\n\r\n    // 去掉`继续编辑`checkbox\r\n    \$footer->disableEditingCheck();\r\n\r\n    // 去掉`继续创建`checkbox\r\n    \$footer->disableCreatingCheck();\r\n    \r\n    // 设置`查看`默认选中\r\n\t\$footer->defaultViewChecked();\r\n\r\n\t// 设置`继续编辑`默认选中\r\n\t\$footer->defaultEditingChecked();\r\n\t\r\n\t// 设置`继续创建`默认选中\r\n\t\$footer->defaultCreatingChecked();\r\n});\r\n\r\n// 去除整个底部内容\r\n\$form->disableFooter();\r\n\r\n// 也可以通过以下方式去底部元素\r\n\$form->disableSubmitButton();\r\n\$form->disableResetButton();\r\n\$form->disableViewCheck();\r\n\$form->disableEditingCheck();\r\n\$form->disableCreatingCheck();\r\n\r\n// 设置`查看`默认选中\r\n\$form->defaultViewChecked();\r\n\r\n// 设置`继续编辑`默认选中\r\n\$form->defaultEditingChecked();\r\n\r\n// 设置`继续创建`默认选中\r\n\$form->defaultCreatingChecked();\r\n```\r\n\r\n## 常用方法\r\n\r\n### 布局\r\n参考文档[表单布局](https://learnku.com/docs/dcat-admin/1.x/table-layout/8822)\r\n\r\n\r\n\r\n### 返回字段验证出错信息\r\n\r\n通过`responseValidationMessages`方法可以很方便的返回字段验证出错信息，而不需要使用`Laravel validation`功能。\r\n\r\n普通使用\r\n```php\r\nprotected function form()\r\n{\r\n\treturn Form::make(new Model(), function (Form \$form) {\r\n\t\tif (...) { // 验证逻辑\r\n\t\t\t\$form->responseValidationMessages('title', 'title格式错误');\r\n\t\t\t\r\n\t\t\t// 如有多个错误信息，第二个参数可以传数组\r\n\t\t\t\$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n\t\t}\r\n\t});\r\n}\r\n```\r\n在事件中使用\r\n> 此方法仅在`submitted`事件中可用\r\n\r\n```php\r\n\$form->submitted(function (Form \$form) {\r\n\t// 接收表单参数\r\n\t\$title = \$form->title;\r\n\r\n    if (...) { // 验证逻辑\r\n        \$form->responseValidationMessages('title', 'title格式错误');\r\n        \r\n        // 如有多个错误信息，第二个参数可以传数组\r\n        \$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n    }\r\n});\r\n```\r\n\r\n### 去掉提交按钮:\r\n\r\n```php\r\n\$form->disableSubmitButton();\r\n```\r\n\r\n### 去掉重置按钮:\r\n```php\r\n\$form->disableResetButton();\r\n```\r\n\r\n### 忽略掉不需要保存的字段 (ignore)\r\n\r\n```php\r\n\$form->ignore(['column1', 'column2', 'column3']);\r\n\r\n// 取消已忽略的字段\r\n\$form->removeIgnoredFields(['column1',]);\r\n```\r\n\r\n### 设置宽度 (width)\r\n\r\n此处的宽度值是一个`1-12`之间的数字，第一个参数为 ```field``` 的宽，第二个参数为 ```label``` 的宽，第二个可省略。\r\n\r\n```php\r\n\$form->width(10, 2); // field, label\r\n```\r\n\r\n### 设置表单提交的action\r\n\r\n```php\r\n\$form->action('auth/users');\r\n```\r\n\r\n### 判断是否是新增 (isCreating)\r\n\r\n新增页面和保存新增数据都可以用这个方法判断\r\n\r\n```php\r\nif (\$form->isCreating()) {\r\n    ...\r\n}\r\n```\r\n\r\n### 判断是否是编辑 (isEditing)\r\n\r\n编辑页面和保存编辑数据都可以用这个方法判断\r\n\r\n```php\r\nif (\$form->isEditing()) {\r\n    ...\r\n}\r\n```\r\n\r\n### 判断是否是删除 (isDeleting)\r\n\r\n```php\r\nif (\$form->isDeleting()) {\r\n    ...\r\n}\r\n```\r\n\r\n### 获取ID (getKey)\r\n\r\n新增页面无效\r\n\r\n```php\r\nreturn Form::make(new User, function (Form \$form) {\r\n    \$id = \$form->getKey();\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n### 获取编辑数据 (model)\r\n新增页面无效，必须在闭包里面使用\r\n\r\n```php\r\nreturn Form::make(new User, function (Form \$form) {\r\n \$username = \$form->model()->xxx;     ...\r\n});\r\n```\r\n\r\n### 获取表单提交的数据 (input)\r\n\r\n```php\r\n\$form->saving(function (Form \$form) {\r\n    \$username = \$form->username;\r\n    \r\n    // 等同于\r\n    \$username = \$form->input('username');\r\n});\r\n```\r\n\r\n### 修改或删除表单提交的数据\r\n\r\n```php\r\n\$form->saving(function (Form \$form) {\r\n    // 修改\r\n    \$form->input('username', 'Marry');\r\n    // 或\r\n    \$form->username = 'Marry';\r\n    \r\n    // 删除\r\n    \$form->deleteInput('username');\r\n});\r\n```\r\n\r\n\r\n### 获取最终保存的数据 (updates)\r\n\r\n此方法仅在`saved`回调有效。\r\n\r\n```php\r\n\$form->saved(function (Form \$form) {\r\n\r\n    \$data = \$form->updates();\r\n    \r\n});\r\n```\r\n\r\n<a name=\"redirect\"></a>\r\n### 页面跳转 (redirect)\r\n\r\n跳转到指定页面，此方法仅在[表单回调](https://learnku.com/docs/dcat-admin/1.x/event/8113)事件内可用\r\n\r\n```php\r\n// 跳转并提示成功信息\r\n\$form->saved(function (Form \$form) {\r\n    return \$form->response()->success('保存成功')->redirect('auth/user');\r\n});\r\n\r\n// 跳转并提示错误信息\r\n\$form->saving(function (Form \$form) {\r\n    return \$form->response()->error('系统错误')->redirect('auth/user');\r\n});\r\n```\r\n\r\n\r\n<a name=\"confirm\"></a>\r\n### 显示确认弹窗 (confirm)\r\n\r\n\r\n点击表单提交按钮时弹出确认弹窗，如果是在普通数据表单中\r\n```php\r\n\$form->confirm('您确定要提交表单吗？', 'content');\r\n```\r\n\r\n\r\n\r\n### 设置外层容器\r\n```php\r\n // 更改表格外层容器\r\n\$form->wrap(function (Renderable \$view) {\r\n    \$tab = Tab::make();\r\n    \r\n    \$tab->add('示例', \$view);\r\n    \$tab->add('代码', \$this->code(), true);\r\n\r\n    return \$tab;\r\n});\r\n```\r\n\r\n\r\n<a name=\"saving\"></a>\r\n### 修改待保存的表单输入值 (saving)\r\n\r\n通过`saving`方法可以更改待保存数据的格式。\r\n\r\n```php\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\n\$form->mutipleFile('files')->saving(function (\$paths) {\r\n    \$paths = Helper::array(\$paths);\r\n    \r\n    // 获取数据库当前行的其他字段\r\n    \$username = \$this->username;\r\n    \r\n    // 最终转化为json保存到数据库\r\n    return json_encode(\$paths);\r\n});\r\n```\r\n\r\n<a name=\"customFormat\"></a>\r\n### 修改表单数据显示 (customFormat)\r\n通过`customFormat`方法可以改变从外部注入到表单的字段值。\r\n\r\n如下例子中，`mutipleFile`字段要求待渲染的字段值为数组格式，我们可以通过`customFormat`方法把从数据库查出的字段值转化为`array`格式\r\n```php\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\n\$form->mutipleFile('files')->saving(function (\$paths) {\r\n    \$paths = Helper::array(\$paths);\r\n    \r\n    return json_encode(\$paths);\r\n})->customFormat(function (\$paths) {\r\n\t// 获取数据库当前行的其他字段\r\n    \$username = \$this->username;\r\n\r\n    // 转为数组\r\n    return Helper::array(\$paths);\r\n});\r\n```\r\n\r\n\r\n\r\n## 关联模型\r\n\r\n\r\n### 一对一\r\n\r\n`users`表和`profiles`表通过`profiles.user_id`字段生成一对一关联\r\n\r\n```sql\r\nCREATE TABLE `users` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `profiles` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`user_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`age` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`gender` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n```\r\n\r\n对应的数据模分别为:\r\n\r\n```php\r\n<?php namespace App\\Admin\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    public function profile()\r\n    {\r\n        return \$this->hasOne(Profile::class);\r\n    }\r\n}\r\n\r\nclass Profile extends Model\r\n{\r\n    public function user()\r\n    {\r\n        return \$this->belongsTo(User::class);\r\n    }\r\n}\r\n```\r\n对应的数据仓库为：\r\n```php\r\n<?php namespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse User as UserModel;\r\n\r\nclass User extends \\Dcat\\Admin\\Repositories\\EloquentRepository\r\n{\r\n    protected \$eloquentClass = UserModel::class;\r\n}\r\n```\r\n\r\n\r\n通过下面的代码可以关联在一个form里面:\r\n> 实例化数据仓库时需要传入关联模型定义的关联名称，相当于主动使用`Eloquent\\Model::with`方法。\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\User;\r\n\r\n// 注意这里实例化数据仓库`User`时必须传入\"profile\"，否则将无法关联\"profiles\"表数据\r\n\$form = Form::make(new User('profile'), function (Form \$form) {\r\n    \$form->display('id');\r\n    \r\n    \$form->text('name');\r\n    \$form->text('email');\r\n    \r\n    \$form->text('profile.age');\r\n    \$form->text('profile.gender');\r\n    \r\n    \$form->datetime('created_at');\r\n    \$form->datetime('updated_at');\r\n});\r\n```\r\n\r\n如果你不想使用数据仓库，也可以直接使用模型\r\n```php\r\nuse App\\Admin\\Models\\User;\r\n\r\n// 注意这里是直接使用模型，没有使用数据仓库\r\n\$form = Form::make(User::with('profile'), function (Form \$form) {\r\n    \$form->display('id');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n\r\n### 一对多\r\n\r\n一对多的使用请参考文档[表单字段的使用-一对多](https://learnku.com/docs/dcat-admin/1.x/use-of-fields/8107#onemany)\r\n\r\n### 多对多\r\n\r\n\r\n下面以项目内置的`角色管理`模块的**角色绑定权限**功能为例来演示多对多关联模型的用法\r\n\r\n模型`Role`\r\n```php\r\n<?php namespace Dcat\\Admin\\Models;\r\n\r\nuse Dcat\\Admin\\Traits\\HasDateTimeFormatter;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\r\n\r\nclass Role extends Model\r\n{\r\n    use HasDateTimeFormatter;\r\n\r\n    /**\r\n     * 定义你的关联模型.\r\n     *\r\n     * @return BelongsToMany\r\n     */\r\n    public function permissions(): BelongsToMany\r\n    {\r\n        \$pivotTable = 'admin_role_permissions'; // 中间表\r\n\r\n        \$relatedModel = Permission::class; // 关联模型类名\r\n\r\n        return \$this->belongsToMany(\$relatedModel, \$pivotTable, 'role_id', 'permission_id');\r\n    }\r\n}\r\n```\r\n\r\n```php\r\nuse Dcat\\Admin\\Models\\Permission;\r\n\r\n// 实例化数据仓库时传入 permissions，则会自动关联关联模型的数据\r\n// 这里传入 permissions 关联权限模型的数据\r\n\$repository = new Role(['permissions']);\r\n\r\nreturn Form::make(\$repository, function (Form \$form) {\r\n    \$form->display('id', 'ID');\r\n\r\n    \$form->text('slug', trans('admin.slug'))->required();\r\n    \$form->text('name', trans('admin.name'))->required();\r\n    \r\n    // 这里的数据会自动保存到关联模型中\r\n    \$form->tree('permissions')\r\n        ->nodes(function () {\r\n            return (new Permission())->allNodes();\r\n        })\r\n        ->customFormat(function (\$v) {\r\n            if (!\$v) return [];\r\n\r\n            // 这一步非常重要，需要把数据库中查出来的二维数组转化成一维数组\r\n            return array_column(\$v, 'id');\r\n        });\r\n\r\n    ...\r\n});\r\n```\r\n\r\n如果你不想使用数据仓库，也可以直接使用模型\r\n```php\r\nuse Dcat\\Admin\\Models\\Role;\r\n\r\n// 注意这里是直接使用模型，没有使用数据仓库\r\n\$form = Form::make(Role::with('permissions'), function (Form \$form) {\r\n    \$form->display('id');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n最终效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/1476ce7c7f24af0d3dbc03b6c7785983667b86efc7407.png)\r\n\r\n\r\n\r\n### 关联模型名称为驼峰风格\r\n\r\n如果你的关联模型名称的命名是**驼峰**风格，那么使用的时候需要转化为**下划线**风格命名（v2.0.21-beta之前）\r\n\r\n\r\n例如\r\n```php\r\nclass User extend Model\r\n{\r\n    public function userProfile()\r\n    {\r\n        return ...;\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n```php\r\nreturn Form::make(User::with(['userProfile']), function (Form \$form) {\r\n\r\n    ...\r\n    \r\n    // 注意这里必须使用下划线风格命名，否则将无法显示编辑数据，从v2.0.21-beta版本开始已经支持驼峰命名\r\n    \$form->text('user_profile.postcode');\r\n    \$form->text('user_profile.address');\r\n    \r\n});\r\n```", 'order' => 1, 'created_at' => "2024-06-26 11:11:59", 'updated_at' => "2024-06-26 11:12:59", 'slug' => "basic-use"],
            ['id' => 36, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "图片/文件上传", 'content' => "# 图片/文件上传\r\n\r\n[数据表单](model-form.md)通过以下的调用来生成图片/文件上传表单，支持本地和云存储的文件上传。上传组件是基于[webuploader](https://fex.baidu.com/webuploader/)实现的，具体的使用配置可参考[webuploader官方文档](https://fex.baidu.com/webuploader/document.html)。\r\n\r\n> 文件或图片上传表单字段请不要在模型中设置**访问器**和**修改器**拼接域名，如有相关需求可参考[文件/图片域名拼接](#withhost)。\r\n\r\n```php\r\n\$form->file('file_column');\r\n\$form->image('image_column');\r\n```\r\n\r\n<a name=\"local\"></a>\r\n## 本地上传\r\n\r\n先添加存储配置，`config/filesystems.php` 添加一项`disk`:\r\n\r\n```php\r\n\r\n'disks' => [\r\n    ... ,\r\n\r\n    'admin' => [\r\n        'driver' => 'local',\r\n        'root' => public_path('uploads'),\r\n        'visibility' => 'public',\r\n        'url' => env('APP_URL').'/uploads',\r\n    ],\r\n],\r\n\r\n```\r\n\r\n设置上传的路径为`public/uploads`(public_path('uploads'))。\r\n\r\n然后选择上传的`disk`，打开`config/admin.php`找到：\r\n\r\n```php\r\n    \r\n'upload'  => [\r\n\r\n    'disk' => 'admin',\r\n\r\n    'directory'  => [\r\n        'image'  => 'images',\r\n        'file'   => 'files',\r\n    ]\r\n],\r\n\r\n```\r\n\r\n将`disk`设置为上面添加的`admin`，`directory.image`和`directory.file`分别为用`\$form->image(\$column)`和`\$form->file(\$column)`上传的图片和文件的上传目录。\r\n\r\n当然你也可以在代码中指定`disk`：\r\n```php\r\n\$form->file('file')->disk('your disk name');\r\n```\r\n\r\n<a name=\"oss\"></a>\r\n## 云盘上传\r\n\r\n如果需要上传到云存储，需要安装对应`laravel storage`的适配器，拿七牛云存储举例\r\n\r\n首先安装 [zgldh/qiniu-laravel-storage](https://github.com/zgldh/qiniu-laravel-storage)\r\n\r\n同样配置好disk，在`config/filesystems.php` 添加一项:\r\n\r\n```php\r\n'disks' => [\r\n    ... ,\r\n    'qiniu' => [\r\n        'driver'  => 'qiniu',\r\n        'domains' => [\r\n            'default'   => 'xxxxx.com1.z0.glb.clouddn.com', //你的七牛域名\r\n            'https'     => 'dn-yourdomain.qbox.me',         //你的HTTPS域名\r\n            'custom'    => 'static.abc.com',                //你的自定义域名\r\n         ],\r\n        'access_key'=> '',  //AccessKey\r\n        'secret_key'=> '',  //SecretKey\r\n        'bucket'    => '',  //Bucket名字\r\n        'notify_url'=> '',  //持久化处理回调地址\r\n        'url'       => 'http://of8kfibjo.bkt.clouddn.com/',  // 填写文件访问根url\r\n    ],\r\n],\r\n\r\n```\r\n\r\n然后修改`dcat-admin`的上传配置，打开`config/admin.php`找到：\r\n\r\n```php\r\n\r\n'upload'  => [\r\n\r\n    'disk' => 'qiniu',\r\n\r\n    'directory'  => [\r\n        'image'  => 'image',\r\n        'file'   => 'file',\r\n    ],\r\n],\r\n\r\n```\r\n\r\n`disk`选择上面配置的`qiniu`，或：\r\n```php\r\n\$form->file('file')->disk('qiniu');\r\n```\r\n\r\n<a name=\"public\"></a>\r\n## 公共方法\r\n\r\n### 缩略图 (thumbnail)\r\n\r\n上传图片的同时生成缩略图\r\n\r\n```php\r\n\$form->image(\$column[, \$label])->thumbnail('small', \$width = 300, \$height = 300);\r\n\r\n// 生成多张缩略图\r\n\$form->image(\$column[, \$label])->thumbnail([\r\n    'small1' => [100, 100],\r\n    'small2' => [200, 200],\r\n    'small3' => [300, 300],\r\n]);\r\n```\r\n\r\n```php\r\nuse Dcat\\Admin\\Traits\\Resizable;\r\n\r\nclass Photo extends Model\r\n{\r\n    use Resizable;\r\n}\r\n\r\n// To access thumbnail\r\n\$photo->thumbnail('small', 'photo_column');\r\n```\r\n\r\n<a name=\"disk\"></a>\r\n### 存储驱动 (disk)\r\n修改文件上传源\r\n```php\r\n\$form->file('file')->disk('your disk name');\r\n```\r\n\r\n<a name=\"move\"></a>\r\n### 上传路径 (move)\r\n修改上传路径\r\n```php\r\n\$form->file('file')->move('public/upload/image1/');\r\n```\r\n\r\n<a name=\"name\"></a>\r\n### 文件名称 (name)\r\n修改上传文件名称\r\n```php\r\n\$form->file('file')->name('test.text');\r\n\r\n\$form->image('picture')->name(function (\$file) {\r\n    return 'test.'.\$file->guessExtension();\r\n});\r\n```\r\n\r\n<a name=\"uniqueName\"></a>\r\n### 随机名称 (uniqueName)\r\n使用随机生成文件名 (md5(uniqid()).extension)\r\n```php\r\n\$form->image('picture')->uniqueName();\r\n```\r\n\r\n<a name=\"removable\"></a>\r\n### 禁止页面删除文件 (替换上传)\r\n\r\n通过`removable`方法可以禁止用户从页面点击删除服务器上的文件，可以实现图片覆盖上传效果。\r\n\r\n\r\n```php\r\n\$form->file(\$column[, \$label])->removable(false);\r\n```\r\n\r\n\r\n<a name=\"autoUpload\"></a>\r\n### 自动上传 (autoUpload)\r\n\r\n开启这个功能之后选择完文件之后会立即自动上传，页面将不再显示`上传`按钮，使用方法如下\r\n\r\n```php\r\n\$form->file('file')->autoUpload();\r\n\r\n\$form->image('img')->autoUpload();\r\n```\r\n\r\n\r\n### 文件上传表单下载功能 (downloadable)\r\n\r\n```php\r\n\$form->file('...')->downloadable();\r\n```\r\n\r\n<a name=\"retainable\"></a>\r\n### 禁止删除 (retainable)\r\n\r\n开启这个功能之后文件将不会从服务器删除\r\n\r\n```php\r\n\$form->file('file')->retainable();\r\n\r\n\$form->image('img')->retainable();\r\n```\r\n\r\n\r\n<a name=\"storagePermission\"></a>\r\n### storagePermission\r\n设置上传文件的权限\r\n```php\r\n\$form->image('picture')->storagePermission(777);\r\n```\r\n\r\n\r\n<a name=\"accept\"></a>\r\n### 限制上传文件类型\r\n限制上传文件的类型\r\n```php\r\n\$form->file('file')->accept('jpg,png,gif,jpeg');\r\n\r\n// 可以指定 mimeTypes， 多个用逗号分割\r\n\$form->file('file')->accept('jpg,png,gif,jpeg', 'image/*');\r\n```\r\n\r\n<a name=\"chunked\"></a>\r\n### 分块上传 (chunked)\r\n\r\n启用分块上传\r\n\r\n```php\r\n\$form->file('file')->chunked();\r\n```\r\n\r\n<a name=\"chunkSize\"></a>\r\n### 分块大小(chunkSize)\r\n\r\n设置分块大小，单位为`KB`，默认`5MB`\r\n\r\n> {tip} 调用这个方法会自动启用分块上传\r\n\r\n```php\r\n// 设置为 1MB\r\n\$form->file('file')->chunkSize(1024);\r\n```\r\n\r\n<a name=\"maxSize\"></a>\r\n### 文件大小(maxSize)\r\n设置单个文件最大大小，单位为`Kb`，默认大小为`10M`。\r\n\r\n> {tip} 同时应该保证`php.ini`配置文件的`upload_max_filesize`参数值必须大于这个方法设置的值。\r\n\r\n```php\r\n// 设置单个文件最大为1Mb\r\n\$form->file('file')->maxSize(1024);\r\n```\r\n\r\n<a name=\"threads\"></a>\r\n### 并发上传线程数 (threads)\r\n设置并发上传线程数，默认`3`\r\n```php\r\n\$form->file('file')->threads(5);\r\n```\r\n\r\n<a name=\"url\"></a>\r\n### 自定义上传接口 (url)\r\n通过`url`可以设置自定义上传接口\r\n```php\r\n\$form->file('file')->url('users/files');\r\n```\r\n\r\n系统提供了`Dcat\\Admin\\Traits\\HasUploadedFile`这个`trait`来帮助开发者更轻松地处理上传文件，用法如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers;\r\n\r\nuse Dcat\\Admin\\Traits\\HasUploadedFile;\r\n\r\nclass FileController\r\n{\r\n    use HasUploadedFile;\r\n\r\n    public function handle()\r\n    {\r\n        \$disk = \$this->disk('local');\r\n        \r\n        // 判断是否是删除文件请求\r\n        if (\$this->isDeleteRequest()) {\r\n            // 删除文件并响应\r\n            return \$this->deleteFileAndResponse(\$disk);\r\n        }\r\n        \r\n        // 获取上传的文件\r\n        \$file = \$this->file();\r\n\r\n        // 获取上传的字段名称\r\n        \$column = \$this->uploader()->upload_column;\r\n\r\n        \$dir = 'my-images';\r\n        \$newName = \$column.'-我的文件名称.'.\$file->getClientOriginalExtension();\r\n\r\n        \$result = \$disk->putFileAs(\$dir, \$file, \$newName);\r\n\r\n        \$path = \"{\$dir}/\$newName\";\r\n\r\n        return \$result\r\n            ? \$this->responseUploaded(\$path, \$disk->url(\$path))\r\n            : \$this->responseErrorMessage('文件上传失败');\r\n    }\r\n}\r\n```\r\n\r\n在你的路由文件`app\\Admin\\routes.php`中加上\r\n\r\n```php\r\n\$router->any('users/files', 'FileController@handle');\r\n```\r\n\r\n\r\n<a name=\"deleteUrl\"></a>\r\n### deleteUrl\r\n修改删除已上传文件路径，此方法一般不需要修改\r\n```php\r\n\$form->file('file')->deleteUrl('file/delete');\r\n```\r\n\r\n<a name=\"autoSave\"></a>\r\n### 自动保存字段值 (autoSave)\r\n\r\n设置上传文件后是否自动保存文件路径到数据库，此方法默认启用，一般不需要修改\r\n\r\n```php\r\n\$form->file('file')->autoSave(false);\r\n```\r\n\r\n<a name=\"options\"></a>\r\n### 配置 (options)\r\n自定义[webuploader](https://fex.baidu.com/webuploader/document.html)配置\r\n```php\r\n\$form->file('file')->options(['disableGlobalDnd' => true]);\r\n```\r\n\r\n### 可排序 (sortable)\r\n\r\n此方法仅针对多图/文件上传表单有效\r\n\r\n```php\r\n\$form->multipleImage('images')->sortable();\r\n```\r\n\r\n\r\n### 压缩图片 (compress)\r\n\r\n默认不启用\r\n\r\n```php\r\n// 启用图片压缩功能\r\n\r\n\$form->multipleImage('images')->compress();\r\n\r\n\$form->image('avatar')->compress([\r\n\t'width' => 1600,\r\n\t'height' => 1600,\r\n\r\n\t// 图片质量，只有type为`image/jpeg`的时候才有效。\r\n\t'quality' => 90,\r\n\r\n\t// 是否允许放大，如果想要生成小图的时候不失真，此选项应该设置为false.\r\n\t'allowMagnify' => false,\r\n\r\n\t// 是否允许裁剪。\r\n\t'crop' => false,\r\n\r\n\t// 是否保留头部meta信息。\r\n\t'preserveHeaders' => true,\r\n\r\n\t// 如果发现压缩后文件大小比原来还大，则使用原来图片\r\n\t// 此属性可能会影响图片自动纠正功能\r\n\t'noCompressIfLarger' => false,\r\n\r\n\t// 单位字节，如果图片大小小于此值，不会采用压缩。\r\n\t'compressSize' => 0\r\n]);\r\n```\r\n\r\n### 监听WebUploader文件上传事件 (on)\r\n\r\n通过 `on` 方法可以监听 [WebUploader文件上传相关事件](http://fex.baidu.com/webuploader/doc/index.html#WebUploader_Uploader_events)\r\n\r\n```php\r\n\$form->file('...')\r\n\t->on('startUpload', <<<JS\r\n\t\tfunction () {\r\n\t\t\tconsole.log('文件开始上传...', this);\r\n\t\t\t\r\n\t\t\t// 上传文件前附加自定义参数到文件上传接口\r\n\t\t\tthis.uploader.options.formData['custom_field'] = '...';\r\n\t\t}\r\nJS\r\n    )\r\n\t->on('uploadFinished', <<<JS\r\n    \tfunction () {\r\n    \t\tconsole.log('文件上传完毕');\r\n    \t}\r\nJS\r\n    );\r\n```\r\n\r\n\r\n<a name=\"withhost\"></a>\r\n### 文件/图片域名拼接\r\n\r\n文件或图片上传表单字段请不要在模型中设置**访问器**和**修改器**拼接域名，如果你需要在访问的时候拼接完整域名，可以在模型中定义一个`public`方法\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Support\\Str;\r\nuse Illuminate\\Support\\Facades\\Storage;\r\n\r\nclass YourModel extends Model\r\n{\r\n    // 定义一个public方法访问图片或文件\r\n\tpublic function getImage()\r\n\t{\r\n\t\tif (Str::contains(\$this->image, '//')) {\r\n\t\t    return \$this->image;\r\n\t\t}\r\n\t\t\r\n\t\treturn Storage::disk('admin')->url(\$this->image);\r\n\t}\r\n}\r\n```\r\n\r\n\r\n### 保存域名\r\n\r\n如果你需要保存文件域名到数据表，可以使用`saveFullUrl`方法\r\n\r\n```php\r\n\$form->image('avatar')->saveFullUrl();\r\n\r\n\$form->file('...')->saveFullUrl();\r\n```\r\n\r\n### 监听文件上传变动 (change)\r\n\r\n通过以下方法可以监听文件**上传成功**或文件**被删除**时产生的变动\r\n\r\n```php\r\n\$file = \$form->file('...');\r\n\r\nAdmin::script(\r\n\t<<<JS\r\n\$('{\$file->getElementClassSelector()} .file-input').on('change', function () {\r\n\tconsole.log('文件发生变动', this.value);\r\n});\r\nJS\r\n);\r\n```\r\n\r\n<a name=\"override\"></a>\r\n### 覆盖上传 (override)\r\n\r\n通过 `override` 方法可以实现文件覆盖上传。\r\n\r\n```php\r\n\$form->file('file')->override();\r\n\r\n\$form->image('img')->override();\r\n```\r\n\r\n\r\n<a name=\"imagefun\"></a>\r\n## 图片上传内置方法\r\n\r\n<a name=\"intervention\"></a>\r\n### 压缩、裁切、添加水印等\r\n可以使用压缩、裁切、添加水印等各种方法,需要先安装[intervention/image](https://image.intervention.io/v2).\r\n\r\n更多使用方法请参考[[Intervention](https://image.intervention.io/v2)]：\r\n```php\r\n\$form->image(\$column[, \$label]);\r\n\r\n// 修改图片上传路径和文件名\r\n\$form->image(\$column[, \$label])->move(\$dir, \$name);\r\n\r\n// 剪裁图片\r\n\$form->image(\$column[, \$label])->crop(int \$width, int \$height, [int \$x, int \$y]);\r\n\r\n// 加水印\r\n\$form->image(\$column[, \$label])->insert(\$watermark, 'center');\r\n```\r\n\r\n<a name=\"dimensions\"></a>\r\n### 限制上传图片的尺寸\r\n设置文件上传尺寸限制\r\n\r\n参数： `array` 单位为像素\r\n- `width` 指定宽度\r\n- `height` 指定高度\r\n- `min_width` 最小宽度\r\n- `min_height` 最小高度\r\n- `max_width` 最大宽度\r\n- `max_height` 最大高度\r\n- `ratio` 宽高比 (width/height)\r\n  \r\n```php\r\n// 上传宽度为100-300像素之间的图片\r\n\$form->image('img')->dimensions(['min_width' => 100, 'max_width' => 300]);\r\n```\r\n<a name=\"referer\"></a>\r\n\r\n\r\n## 把图片/文件路径保存在其他数据表\r\n\r\n通过下面的方法可以把图片或文件的路径保存在单独的附件表，而当前的图片/文件字段只保存ID\r\n\r\n> {tip} 这里的示例用的是单图上传表单，如果是多图的话可以按这个思路自行调整。\r\n\r\n\r\n图片/文件表结构\r\n```sql\r\nCREATE TABLE `images` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `path` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n使用\r\n```php\r\n\$form->image('image1')\r\n    ->saving(function (\$value) use (\$form) {\r\n        if (\$form->isEditing() && ! \$value) {\r\n            // 编辑页面，删除图片逻辑\r\n            Image::destroy(\$form->model()->image1);\r\n\r\n            return;\r\n        }\r\n\r\n        // 新增或编辑页面上传图片\r\n        if (\$value) {\r\n            \$model = Image::where('path', \$value)->first();\r\n        }\r\n\r\n        if (empty(\$model)) {\r\n            \$model = new Image();\r\n        }\r\n\r\n        \$model->path = \$value;\r\n\r\n        \$model->save();\r\n\r\n        return \$model->getKey();\r\n    })\r\n    ->customFormat(function (\$v) {\r\n        if (! \$v) {\r\n            return;\r\n        }\r\n\r\n        return Image::find((array) \$v)->pluck('path')->toArray();\r\n    });\r\n```\r\n\r\n\r\n## 文件上传失败或无法访问？\r\n\r\n如果你发现无法上传文件，那么通常有几下几点原因：\r\n\r\n1. `Laravel`文件上传配置不正确，请检查`admin.upload.disk`参数。如果你不了解`laravel`文件上传功能，请阅读文档[Laravel - 文件存储](https://learnku.com/docs/laravel/7.x/filesystem/7485)\r\n2. 文件过大，需要调整`php.ini`的`upload_max_filesize`参数\r\n3. 文件上传目录没有写权限\r\n4. `php`没有安装或没有开启`fileinfo`扩展\r\n\r\n如果你的文件上传成功了，却无法正常访问，那么可能是`.env`配置文件中的`APP_URL`参数没有设置正确。", 'order' => 2, 'created_at' => "2024-06-26 12:03:37", 'updated_at' => "2024-06-26 12:03:37", 'slug' => "picture-file-upload"],
            ['id' => 37, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "字段的使用", 'content' => "# 表单字段的使用\r\n\r\n在`model-form`中内置了大量的form组件来帮助你快速的构建form表单\r\n\r\n<a name=\"public\"></a>\r\n## 公共方法\r\n\r\n<a name=\"value\"></a>\r\n### 设置表单值 (value)\r\n```php\r\n\$form->text('title')->value('text...');\r\n```\r\n\r\n<a name=\"default\"></a>\r\n### 设置默认值 (default)\r\n\r\n```php\r\n\$form->text('title')->default('text...');\r\n```\r\n\r\n此方法仅在**新增页面**有效，如果**编辑页面**也需要设置默认值，可以参考以下方法\r\n\r\n```php\r\n\$form->text('xxx')->default('默认值', true);\r\n```\r\n\r\n### 设置自定义class (addElementClass)\r\n\r\n```php\r\n// 如果不希望添加前缀，则第二个参数设置为false\r\n\$form->text(...)->addElementClass(['class1', 'class2'], false);\r\n```\r\n\r\n\r\n<a name=\"help\"></a>\r\n### 设置提示信息 (help)\r\n```php\r\n\$form->text('title')->help('help...');\r\n```\r\n\r\n<a name=\"attr\"></a>\r\n### 设置属性 (attribute)\r\n```php\r\n\$form->text('title')->attribute(['data-title' => 'title...']);\r\n\r\n\$form->text('title')->attribute('data-title', 'title...');\r\n```\r\n\r\n<a name=\"required\"></a>\r\n### 设置为必填 (required)\r\n```php\r\n\$form->text('title')->required();\r\n\r\n// 不显示\"*\"号\r\n\$form->text('title')->required(false);\r\n```\r\n\r\n<a name=\"disable\"></a>\r\n### 设置为不可编辑 (disable)\r\n```php\r\n\$form->text('title')->disable();\r\n```\r\n\r\n<a name=\"placeholder\"></a>\r\n### 设置占位符 (placeholder)\r\n```php\r\n\$form->text('title')->placeholder('请输入。。。');\r\n```\r\n\r\n<a name=\"setWidth\"></a>\r\n### 设置宽度 (width)\r\n```php\r\n\$form->text('title')->width(8, 2);\r\n```\r\n\r\n<a name=\"rules\"></a>\r\n### 设置验证规则 (rules)\r\n具体使用可参考[表单验证](https://learnku.com/docs/dcat-admin/1.x/form-validation/8112)。\r\n\r\n\r\n<a name=\"saving\"></a>\r\n### 修改待保存的表单输入值 (saving)\r\n\r\n通过`saving`方法可以更改待保存数据的格式。\r\n\r\n```php\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\n\$form->multipleFile('files')->saving(function (\$paths) {\r\n    \$paths = Helper::array(\$paths);\r\n\t\r\n\t// 获取数据库当前行的其他字段\r\n    \$username = \$this->username;\r\n    \r\n    // 最终转化为json保存到数据库\r\n    return json_encode(\$paths);\r\n});\r\n```\r\n\r\n<a name=\"customFormat\"></a>\r\n### 修改表单数据显示 (customFormat)\r\n通过`customFormat`方法可以改变从外部注入到表单的字段值。\r\n\r\n如下例子中，`multipleFile`字段要求待渲染的字段值为数组格式，我们可以通过`customFormat`方法把从数据库查出的字段值转化为`array`格式\r\n```php\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\n\$form->multipleFile('files')->saving(function (\$paths) {\r\n    \$paths = Helper::array(\$paths);\r\n    \r\n    return json_encode(\$paths);\r\n})->customFormat(function (\$paths) {\r\n    // 获取数据库当前行的其他字段\r\n    \$username = \$this->username;\r\n\r\n    // 转为数组\r\n    return Helper::array(\$paths);\r\n});\r\n```\r\n\r\n### 在弹窗中隐藏\r\n\r\n如果不想在弹窗中显示某个字段，可以使用`Form\\Field::hideInDialog`方法\r\n\r\n```php\r\n\$form->display('id');\r\n\$form->text('title');\r\n\$form->textare('contents')->hideInDialog();\r\n```\r\n\r\n\r\n<a name=\"text\"></a>\r\n## 文本 (text)\r\n\r\n```php\r\n\$form->text(\$column, [\$label]);\r\n\r\n// 添加提交验证规则\r\n\$form->text(\$column, [\$label])->rules('required|min:10');\r\n```\r\n\r\n<a name=\"hidden\"></a>\r\n## 隐藏字段 (hidden)\r\n\r\n通过`hidden`方法可以给你的表单设置一个隐藏字段。\r\n\r\n```php\r\n\$form->hidden('author_id')->value(Admin::user()->getKey());\r\n```\r\n\r\n通常可以结合`saving`事件使用\r\n```php\r\n\$form->hidden('author_id');\r\n\r\n\$form->saving(function (Form \$form) {\r\n    \$form->author_id = Admin::user()->getKey();\r\n});\r\n```\r\n\r\n\r\n<a name=\"select\"></a>\r\n## 下拉选框单选 (select)\r\n```php\r\n\$form->select(\$column[, \$label])->options([1 => 'foo', 2 => 'bar', 'val' => 'Option name']);\r\n```\r\n\r\n或者从api中获取选项列表：\r\n```php\r\n\$form->select(\$column[, \$label])->options('/api/users');\r\n\r\n// 使用ajax并显示所选项目\r\n\r\n\$form->select(\$column[, \$label])->options(Model::class)->ajax('/api/users');\r\n\r\n// 或指定名称和ID\r\n\r\n\$form->select(\$column[, \$label])->options(Model::class, 'id', 'name')->ajax('/api/users');\r\n```\r\n其中api接口的格式必须为下面格式：\r\n```php\r\n[\r\n    {\r\n        \"id\": 9,\r\n        \"text\": \"xxx\"\r\n    },\r\n    {\r\n        \"id\": 21,\r\n        \"text\": \"xxx\"\r\n    },\r\n    ...\r\n]\r\n```\r\n\r\n如果选项过多，可通过ajax方式动态分页载入选项：\r\n\r\n```php\r\n\$form->select('user_id')->options(function (\$id) {\r\n    \$user = User::find(\$id);\r\n\r\n    if (\$user) {\r\n        return [\$user->id => \$user->name];\r\n    }\r\n})->ajax('api/users');\r\n```\r\n\r\nAPI `/admin/api/users`接口的代码：\r\n\r\n```php\r\npublic function users(Request \$request)\r\n{\r\n    \$q = \$request->get('q');\r\n\r\n    return User::where('name', 'like', \"%\$q%\")->paginate(null, ['id', 'name as text']);\r\n}\r\n\r\n```\r\n接口返回的数据结构为\r\n```json\r\n{\r\n    \"total\": 4,\r\n    \"per_page\": 15,\r\n    \"current_page\": 1,\r\n    \"last_page\": 1,\r\n    \"next_page_url\": null,\r\n    \"prev_page_url\": null,\r\n    \"from\": 1,\r\n    \"to\": 3,\r\n    \"data\": [\r\n        {\r\n            \"id\": 9,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 21,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 42,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 48,\r\n            \"text\": \"xxx\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n<a name=\"selectload\"></a>\r\n## 下拉选框联动 (load)\r\n\r\n`select`组件支持父子关系的单向联动：\r\n```php\r\n\$form->select('province')->options(...)->load('city', '/api/city');\r\n\r\n\$form->select('city');\r\n```\r\n\r\n其中`load('city', '/api/city');`的意思是，在当前select的选项切换之后，会把当前选项的值通过参数`q`, 调用接口`/api/city`，并把api返回的数据填充为city选择框的选项，其中api`/api/city`返回的数据格式必须符合:\r\n\r\n```php\r\n[\r\n    {\r\n        \"id\": 9,\r\n        \"text\": \"xxx\"\r\n    },\r\n    {\r\n        \"id\": 21,\r\n        \"text\": \"xxx\"\r\n    },\r\n    ...\r\n]\r\n```\r\n控制器action的代码示例如下：\r\n\r\n```php\r\npublic function city(Request \$request)\r\n{\r\n    \$provinceId = \$request->get('q');\r\n\r\n    return ChinaArea::city()->where('parent_id', \$provinceId)->get(['id', DB::raw('name as text')]);\r\n}\r\n```\r\n\r\n`selectTable`、`multipleSelectTable`、`radio`、`checkbox`也可以使用`load`方法联动`select`和`multipleSelect`表单，用法和上面的示例一致。\r\n\r\n### 联动多个字段 (loads)\r\n\r\n使用`loads`方法可以联动多个字段，用法如下\r\n\r\n```php\r\n\$form->select('status')\r\n    ->options(...)\r\n    ->loads(['field1', 'field2'], ['/api/field1', '/api/field2']);\r\n\r\n\$form->select('field1');\r\n\$form->select('field2');\r\n```\r\n\r\n`api`返回的数据格式与`load`方法一致，`selectTable`、`multipleSelectTable`、`radio`、`checkbox`也可以使用`loads`方法联动。\r\n\r\n<a name=\"multipleSelect\"></a>\r\n## 下拉选框多选 (multipleSelect)\r\n\r\n> 注入这个字段的数据（从数据库查出来的）可以是一个以`,`隔开的字符串，也可以是`json`字符串或`array`数组。\r\n\r\n```php\r\n\$form->multipleSelect(\$column[, \$label])\r\n\t->options([1 => 'foo', 2 => 'bar', 'val' => 'Option name'])\r\n\t->saving(function (\$value) {\r\n\t\t// 转化成json字符串保存到数据库\r\n\t\treturn json_encode(\$value);\r\n\t});\r\n\r\n// 使用ajax并显示所选项目：\r\n\r\n\$form->multipleSelect(\$column[, \$label])->options(Model::class)->ajax('ajax_url');\r\n\r\n// 或指定名称和ID\r\n\r\n\$form->multipleSelect(\$column[, \$label])->options(Model::class, 'name', 'id')->ajax('ajax_url');\r\n```\r\n\r\n多选框可以处理两种情况，第一种是`ManyToMany`的关系。\r\n\r\n```php\r\nclass Post extends Models\r\n{\r\n    public function tags()\r\n    {\r\n        return \$this->belongsToMany(Tag::class);\r\n    }\r\n}\r\n\r\nreturn Form::make(Post::with('tags'), function (Form \$form) {\r\n    ...\r\n\r\n    \$form->multipleSelect('tags')\r\n        ->options(Tag::all()->pluck('name', 'id'))\r\n        ->customFormat(function (\$v) {\r\n            if (! \$v) {\r\n                return [];\r\n            }\r\n\r\n            // 从数据库中查出的二维数组中转化成ID\r\n            return array_column(\$v, 'id');\r\n        });\r\n});\r\n```\r\n\r\n第二种是将选项数组存储到单字段中，如果字段是字符串类型，那就需要在模型里面为该字段定义[访问器和修改器](https://laravel.com/docs/5.5/eloquent-mutators)来存储和读取了。\r\n\r\n如果选项过多，可通过ajax方式动态分页载入选项：\r\n\r\n```php\r\n\$form->multipleSelect('friends')->options(function (\$ids) {\r\n\r\n    return User::find(\$ids)->pluck('name', 'id');\r\n    \r\n})->ajax('api/users');\r\n```\r\n\r\n\r\nAPI `/admin/api/users`接口的代码：\r\n\r\n```php\r\npublic function users(Request \$request)\r\n{\r\n    \$q = \$request->get('q');\r\n\r\n    return User::where('name', 'like', \"%\$q%\")->paginate(null, ['id', 'name as text']);\r\n}\r\n\r\n```\r\n接口返回的数据结构为\r\n```\r\n{\r\n    \"total\": 4,\r\n    \"per_page\": 15,\r\n    \"current_page\": 1,\r\n    \"last_page\": 1,\r\n    \"next_page_url\": null,\r\n    \"prev_page_url\": null,\r\n    \"from\": 1,\r\n    \"to\": 3,\r\n    \"data\": [\r\n        {\r\n            \"id\": 9,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 21,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 42,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 48,\r\n            \"text\": \"xxx\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n\r\n<a name=\"select-table\"></a>\r\n## 表格选择器 (selectTable)\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Models\\Administrator;\r\n\r\n\$form->selectTable(\$field)\r\n\t->title('弹窗标题')\r\n\t->dialogWidth('50%') // 弹窗宽度，默认 800px\r\n\t->from(UserTable::make(['id' => \$form->getKey()])) // 设置渲染类实例，并传递自定义参数\r\n\t->model(Administrator::class, 'id', 'name'); // 设置编辑数据显示\r\n\t\r\n// 上面的代码等同于\r\n\$form->selectTable(\$field)\r\n\t->from(UserTable::make(['id' => \$form->getKey()])) // 设置渲染类实例，并传递自定义参数\r\n\t->options(function (\$v) { // 设置编辑数据显示\r\n\t\tif (! \$v) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\t\r\n\t\treturn Administrator::find(\$v)->pluck('name', 'id');\r\n\t});\r\n```\r\n\r\n定义渲染类如下，需要继承`Dcat\\Admin\\Grid\\LazyRenderable`\r\n\r\n> 这里使用了数据表格异步加载功能，详细用法请参考[异步加载](https://learnku.com/docs/dcat-admin/2.x/asynchronous-loading/9327)\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Renderable;\r\n\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Grid\\LazyRenderable;\r\nuse Dcat\\Admin\\Models\\Administrator;\r\n\r\nclass UserTable extends LazyRenderable\r\n{\r\n    public function grid(): Grid\r\n    {\r\n        // 获取外部传递的参数\r\n        \$id = \$this->id;\r\n        \r\n        return Grid::make(new Administrator(), function (Grid \$grid) {\r\n            \$grid->column('id');\r\n            \$grid->column('username');\r\n            \$grid->column('name');\r\n            \$grid->column('created_at');\r\n            \$grid->column('updated_at');\r\n\r\n            \$grid->quickSearch(['id', 'username', 'name']);\r\n\r\n            \$grid->paginate(10);\r\n            \$grid->disableActions();\r\n\r\n            \$grid->filter(function (Grid\\Filter \$filter) {\r\n                \$filter->like('username')->width(4);\r\n                \$filter->like('name')->width(4);\r\n            });\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/7bcd285175c8f097149ad4f6a75506fc667bacec42db1.gif)\r\n\r\n### 设置选中后将保存到表单的字段和显示的字段\r\n\r\n```php\r\n\$form->selectTable(\$field)\r\n\t->from(UserTable::make(['id' => \$form->getKey()]))\r\n\t->options(function (\$v) { // 设置编辑数据显示\r\n\t\tif (! \$v) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\t\r\n\t\treturn Administrator::find(\$v)->pluck('name', 'id');\r\n\t})\r\n\t->pluck('name', 'id'); // 第一个参数为显示的字段，第二个参数为选中后将保存到表单的字段\r\n\t\r\n// 上面的代码也可以简化为\r\n\$form->selectTable(\$field)\r\n\t->from(UserTable::make(['id' => \$form->getKey()]))\r\n\t->model(Administrator::class, 'id', 'name'); // 设置编辑数据显示\r\n```\r\n\r\n<a name=\"listbox\"></a>\r\n## 多选盒 (listbox)\r\n\r\n使用方法和`multipleSelect`类似。\r\n\r\n> 注入这个字段的数据（从数据库查出来的）可以是一个以`,`隔开的字符串，也可以是`json`字符串或`array`数组。\r\n\r\n```php\r\n\$form->listbox(\$column[, \$label])->options([1 => 'foo', 2 => 'bar', 'val' => 'Option name']);\r\n```\r\n\r\n<a name=\"textarea\"></a>\r\n## 长文本 (textarea)\r\n```php\r\n\$form->textarea(\$column[, \$label])->rows(10);\r\n```\r\n\r\n<a name=\"radio\"></a>\r\n## 单选 (radio)\r\n```php\r\n\$form->radio(\$column[, \$label])->options(['m' => 'Female', 'f'=> 'Male'])->default('m');\r\n```\r\n\r\n<a name=\"checkbox\"></a>\r\n## 多选 (checkbox)\r\n\r\n`options()`方法用来设置选择项:\r\n```php\r\n\$form->checkbox(\$column[, \$label])\r\n\t->options([1 => 'foo', 2 => 'bar', 'val' => 'Option name'])\r\n\t->saving(function (\$value) {\r\n\t\t// 转化成json字符串保存到数据库\r\n\t\treturn json_encode(\$value);\r\n\t});\r\n```\r\n\r\n启用选中全部功能\r\n\r\n```php\r\n\$form->checkbox('column')->canCheckAll();\r\n```\r\n\r\n<a name=\"autocomplete\"></a>\r\n## autocomplete\r\n\r\n此表单可以在填写表单时进行对表单值进行搜索，并把结果展示在下拉列表中，用法如下\r\n\r\n```php\r\n\$form->autocomplete(\$column[, \$label])->options(['foo', 'bar', ...]);\r\n\r\n// 设置分组名称\r\n\$form->autocomplete(\$column[, \$label])->groups([\r\n    [\r\n        'label' => 'group name',\r\n        'options' => ['foo', 'bar', ...],\r\n    ],\r\n]);\r\n```\r\n\r\n效果如下\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/8cf35c9cc8c53e0f328019eecbb0d4a4667bacfb3b1f1.png)\r\n\r\n### 从远程API获取数据\r\n\r\n也可以从远程API中获取数据\r\n```php\r\n// ajax 函数的第一个参数为 ajax url, 第二个参数为 valueField（可选）, 第三个参数为 groupField（可选）\r\n\$form->autocomplete(\$column[, \$label])->ajax('/countries', 'name', 'region');\r\n```\r\n\r\n远程API 服务端的请求参数为query，示例代码如下：\r\n```php\r\nclass CountryController extends AdminController\r\n{\r\n    public function search()\r\n    {\r\n        \$countries = Country::when(request('query'), function (\$query, \$value) {\r\n            \$query->where('name', 'like', \"%{\$value}%\");\r\n        })->get();\r\n\r\n        return Admin::json(\$countries->toArray());\r\n    }\r\n}\r\n```\r\n\r\n### 自定义 autocomplete 的设置：\r\n详细设置请参考： [devbridge/jQuery-Autocomplete](https://github.com/devbridge/jQuery-Autocomplete)\r\n```\r\n\$js = <<<JS\r\n    function (suggestion) {\r\n        alert('You selected: ' + suggestion.value + ', ' + suggestion.data);\r\n    }\r\nJS;\r\n\r\n\$form->autocomplete(\$column[, \$label])->configs([\r\n    'minChars' => 5,\r\n    'noCache' => true,\r\n    'onSelect' => JavaScript::make(\$js),\r\n]);\r\n```\r\n\r\nconfigs 同样也支持闭包：\r\n```\r\n\$form->autocomplete(\$column[, \$label])->configs(function(\$model, \$value){\r\n    return [\r\n        ....\r\n    ];\r\n});\r\n```\r\n\r\n### 表单联动\r\nautocomplete 的联动逻辑和select的刚好相反。\r\ndepends 需要写在受影响的字段，不限上级字段类型，上级字段的值将同时上传到API。\r\n```\r\n\$form->select('region')->options([\r\n    'asia',\r\n    'Africa',\r\n    'America',\r\n    'Europe',\r\n]);\r\n\r\n\$form->autocomplete('country')->ajax('/countries', 'name', 'region');\r\n\r\n// 将会发出 /states?query={query}&region={region}&country={country}  的请求\r\n\$form->autocomplete('addr')->ajax('/states', 'name')->depends(['region', 'country']);\r\n```\r\n\r\n\r\n\r\n\r\n<a name=\"email\"></a>\r\n## 邮箱 (email)\r\n```php\r\n\$form->email(\$column[, \$label]);\r\n```\r\n\r\n<a name=\"password\"></a>\r\n## 密码 (password)\r\n```php\r\n\$form->password(\$column[, \$label]);\r\n```\r\n\r\n<a name=\"url\"></a>\r\n## 链接 (url)\r\n```php\r\n\$form->url(\$column[, \$label]);\r\n```\r\n\r\n<a name=\"ip\"></a>\r\n## IP地址 (ip)\r\n```php\r\n\$form->ip(\$column[, \$label]);\r\n```\r\n\r\n<a name=\"mobile\"></a>\r\n## 手机 (mobile)\r\n```php\r\n\$form->mobile(\$column[, \$label])->options(['mask' => '999 9999 9999']);\r\n```\r\n\r\n<a name=\"color\"></a>\r\n## 颜色选择器 (color)\r\n\r\n```php\r\n\$form->color(\$column[, \$label]);\r\n```\r\n\r\n<a name=\"time\"></a>\r\n## 时间 (time)\r\n```php\r\n\$form->time(\$column[, \$label]);\r\n\r\n// 设置时间格式，更多格式参考http://momentjs.com/docs/#/displaying/format/\r\n\$form->time(\$column[, \$label])->format('HH:mm:ss');\r\n```\r\n\r\n<a name=\"date\"></a>\r\n## 日期 (date)\r\n```php\r\n\$form->date(\$column[, \$label]);\r\n\r\n// 设置日期格式，更多格式参考http://momentjs.com/docs/#/displaying/format/\r\n\$form->date(\$column[, \$label])->format('YYYY-MM-DD');\r\n```\r\n\r\n<a name=\"datetime\"></a>\r\n## 时间日期 (datetime)\r\n```php\r\n\$form->datetime(\$column[, \$label]);\r\n\r\n// 设置日期格式，更多格式参考http://momentjs.com/docs/#/displaying/format/\r\n\$form->datetime(\$column[, \$label])->format('YYYY-MM-DD HH:mm:ss');\r\n```\r\n\r\n<a name=\"timeRange\"></a>\r\n## 时间范围 (timeRange)\r\n`\$startTime`、`\$endTime`为开始和结束时间字段:\r\n```php\r\n\$form->timeRange(\$startTime, \$endTime, 'Time Range');\r\n```\r\n\r\n<a name=\"dateRange\"></a>\r\n## 日期范围 (dateRange)\r\n`\$startDate`、`\$endDate`为开始和结束日期字段:\r\n```php\r\n\$form->dateRange(\$startDate, \$endDate, 'Date Range');\r\n```\r\n\r\n<a name=\"datetimeRange\"></a>\r\n## 时间日期范围 (datetimeRange)\r\n`\$startDateTime`、`\$endDateTime`为开始和结束时间日期:\r\n```php\r\n\$form->datetimeRange(\$startDateTime, \$endDateTime, 'DateTime Range');\r\n```\r\n\r\n## 范围 (range)\r\n\r\n```php\r\n\$form->range('start_column', 'end_column', '范围');\r\n```\r\n\r\n<a name=\"file\"></a>\r\n## 文件上传 (file)\r\n\r\n使用文件上传功能之前需要先完成上传配置。文件上传配置以及内置方法请参考:[图片/文件上传](https://learnku.com/docs/dcat-admin/1.x/picture-file-upload/8106).\r\n\r\n> 文件或图片上传表单字段请不要在模型中设置**访问器**和**修改器**拼接域名，如有相关需求可参考[文件/图片域名拼接](https://learnku.com/docs/dcat-admin/1.x/picture-file-upload/8106#withhost)。\r\n\r\n文件上传目录在文件`config/admin.php`中的`upload.file`中配置，如果目录不存在，需要创建该目录并开放写权限。\r\n```php\r\n\$form->file(\$column[, \$label]);\r\n\r\n// 修改文件上传路径和文件名\r\n\$form->file(\$column[, \$label])->move(\$dir, \$name);\r\n\r\n// 并设置上传文件类型\r\n\$form->file(\$column[, \$label])->rules('mimes:doc,docx,xlsx');\r\n\r\n// 添加文件删除按钮\r\n\$form->file(\$column[, \$label])->removable();\r\n```\r\n\r\n<a name=\"image\"></a>\r\n## 图片上传 (image)\r\n\r\n使用图片上传功能之前需要先完成上传配置，图片上传配置以及内置方法请参考:[图片/文件上传](https://learnku.com/docs/dcat-admin/1.x/picture-file-upload/8106)。\r\n\r\n> 文件或图片上传表单字段请不要在模型中设置**访问器**和**修改器**拼接域名，如有相关需求可参考[文件/图片域名拼接](https://learnku.com/docs/dcat-admin/1.x/picture-file-upload/8106#withhost)。\r\n\r\n图片上传目录在文件`config/admin.php`中的`upload.image`中配置，如果目录不存在，需要创建该目录并开放写权限。\r\n\r\n可以使用压缩、裁切、添加水印等各种方法,需要先安装[intervention/image](http://image.intervention.io/getting_started/installation)。更多使用方法请参考[[Intervention](http://image.intervention.io/getting_started/introduction)]：\r\n```php\r\n\$form->image(\$column[, \$label]);\r\n\r\n// 修改图片上传路径和文件名\r\n\$form->image(\$column[, \$label])->move(\$dir, \$name);\r\n\r\n// 剪裁图片\r\n\$form->image(\$column[, \$label])->crop(int \$width, int \$height, [int \$x, int \$y]);\r\n\r\n// 加水印\r\n\$form->image(\$column[, \$label])->insert(\$watermark, 'center');\r\n```\r\n\r\n<a name=\"multipleImage\"></a>\r\n## 多图和多文件上传 (multipleImage)\r\n\r\n使用图片上传功能之前需要先完成上传配置，图片上传配置以及内置方法请参考:[图片/文件上传](https://learnku.com/docs/dcat-admin/1.x/picture-file-upload/8106)。\r\n\r\n> 注入这个字段的数据（从数据库查出来的）可以是一个以`,`隔开的字符串，也可以是`json`字符串或`array`数组。\r\n\r\n```php\r\n// 多图\r\n\$form->multipleImage(\$column[, \$label]);\r\n\r\n// 限制最大上传数量\r\n\$form->multipleImage(\$column[, \$label])->limit(3);\r\n\r\n// 多文件\r\n\$form->multipleFile(\$column[, \$label]);\r\n\r\n// 限制最大上传数量\r\n\$form->multipleFile(\$column[, \$label])->limit(5);\r\n```\r\n\r\n多图/文件上传的时候提交的数据是一个`array`数组，你可以通过以下方式把数据在保存进数据库之前改为你想要的格式：\r\n```php\r\n// 转化为json格式保存到数据库\r\n\$form->multipleFile(\$column[, \$label])->saving(function (\$paths) {\r\n    // 可以转化为由 , 隔开的字符串格式\r\n    // return implode(',', \$paths);\r\n    \r\n    // 也可以转化为json\r\n    return json_encode(\$paths);\r\n});\r\n```\r\n\r\n当然，如果你想保存为其他任意格式都是可以的，只是如果要保存其他格式，需要通过用`customFormat`方法把数据转化为一维数组展示，如：\r\n```php\r\n\$form->multipleFile('images')\r\n    ->customFormat(function (\$paths) {\r\n        return collect(\$paths)->map(function (\$value) {\r\n        \treturn explode('|', \$value);\r\n        })->flatten()->toArray();\r\n    })\r\n    ->saving(function (\$paths) {\r\n        return implode('|', \$paths);\r\n    });\r\n```\r\n启用可排序功能\r\n\r\n```php\r\n\$form->multipleImage('images')->sortable();\r\n```\r\n\r\n\r\n<a name=\"editor\"></a>\r\n## 富文本编辑器 (editor)\r\n\r\n系统集成了`TinyMCE`编辑器作为内置编辑器。\r\n\r\n\r\n#### 基本使用\r\n```php\r\n\$form->editor(\$column[, \$label]);\r\n```\r\n\r\n#### 设置语言包\r\n\r\n默认支持简体中文和英文两种语言，如需其他语言可以通过以下方式设置语言包地址。\r\n\r\n```php\r\n\$form->editor('content')->languageUrl(url('TinyMCE/langs/de.js'));\r\n```\r\n\r\n#### 编辑器配置\r\n\r\n具体配置等的使用可以参考[官方文档](https://www.tiny.cloud/docs)或[中文文档](http://tinymce.ax-z.cn/)\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Support\\JavaScript;\r\n\r\n\$form->editor('content')->options([\r\n    'toolbar' => [],\r\n    'setup' => JavaScript::make(\r\n        <<<JS\r\nfunction (editor) {\r\n    console.log('编辑器初始化成功', editor)\r\n}\r\nJS\r\n    ),\r\n]);\r\n```\r\n\r\n#### 设置高度\r\n\r\n默认值为`400`\r\n\r\n```php\r\n\$form->editor('content')->height('600');\r\n```\r\n\r\n\r\n#### 只读\r\n\r\n```php\r\n\$form->editor('content')->readOnly();\r\n\r\n// 或\r\n\$form->editor('content')->disable();\r\n```\r\n\r\n#### 图片上传\r\n\r\n设置图片上传`disk`配置，默认上传到`admin.upload.disk`指定的配置\r\n\r\n```php\r\n// 上传到oss\r\n\$form->editor('content')->disk('oss');\r\n```\r\n\r\n设置图片上传目录，默认为`tinymce/images`\r\n```php\r\n\$form->editor('content')->imageDirectory('editor/images');\r\n```\r\n\r\n自定义上传接口，接口返回格式需要是`{\"location\": \"图片url\"}`\r\n```php\r\n\$form->editor('content')->imageUrl('editor/upload-image');\r\n```\r\n\r\n\r\n#### 全局设置\r\n\r\n如果你需要对编辑器进行全局设置，可以在`app\\Admin\\bootstrap.php`加上以下代码\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Form\\Field\\Editor;\r\n\r\nEditor::resolving(function (Editor \$editor) {\r\n    // 设置默认配置\r\n    \$editor->options([...]);\r\n    \r\n    // 设置编辑器图片默认上传到七牛云\r\n    \$editor->disk('qiniu');\r\n});\r\n```\r\n\r\n\r\n\r\n<a name=\"markdown\"></a>\r\n## Markdown编辑器 (markdown)\r\n\r\n系统集成了`editor-md`编辑器作为内置Markdown编辑器。\r\n\r\n\r\n#### 基本使用\r\n```php\r\n\$form->markdown(\$column[, \$label]);\r\n```\r\n\r\n#### 设置语言包\r\n\r\n默认支持简体中文和英文两种语言，如需其他语言可以通过以下方式设置语言包地址。\r\n\r\n```php\r\n\$form->markdown('content')->languageUrl(admin_asset('@admin/dcat/plugins/editor-md/languages/zh-tw.js'));\r\n```\r\n\r\n#### 编辑器配置\r\n\r\n具体配置等的使用可以参考[官方文档](https://pandao.github.io/editor.md/)\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Support\\JavaScript;\r\n\r\n\$form->markdown('content')->options([\r\n    'onpreviewing' => JavaScript::make(\r\n        <<<JS\r\nfunction() {\r\n\t// console.log(\"onpreviewing =>\", this, this.id, this.settings);\r\n\t// on previewing you can custom css .editormd-preview-active\r\n}\r\nJS\r\n    ),\r\n]);\r\n```\r\n\r\n#### 设置高度\r\n\r\n默认值为`500`\r\n\r\n```php\r\n\$form->markdown('content')->height('600');\r\n```\r\n\r\n\r\n#### 只读\r\n\r\n```php\r\n\$form->markdown('content')->readOnly();\r\n\r\n// 或\r\n\$form->markdown('content')->disable();\r\n```\r\n\r\n\r\n#### 图片上传\r\n\r\n设置图片上传`disk`配置，默认上传到`admin.upload.disk`指定的配置\r\n\r\n```php\r\n// 上传到oss\r\n\$form->markdown('content')->disk('oss');\r\n```\r\n\r\n设置图片上传目录，默认为`markdown/images`\r\n```php\r\n\$form->markdown('content')->imageDirectory('markdown/images');\r\n```\r\n\r\n自定义上传接口，接口返回格式需要是`{\"success\": 1, \"url\": \"图片url\"}`\r\n```php\r\n\$form->markdown('content')->imageUrl('markdown/upload-image');\r\n```\r\n\r\n#### 全局设置\r\n\r\n如果你需要对编辑器进行全局设置，可以在`app\\Admin\\bootstrap.php`加上以下代码\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Form\\Field\\Markdown;\r\n\r\nMarkdown::resolving(function (Markdown \$markdown) {\r\n    // 设置默认配置\r\n    \$markdown->options([...]);\r\n    \r\n    // 设置编辑器图片默认上传到七牛云\r\n    \$markdown->disk('qiniu');\r\n});\r\n```\r\n\r\n\r\n<a name=\"switch\"></a>\r\n## 开关 (switch)\r\n\r\n使用\r\n```php\r\n\$form->switch(\$column[, \$label]);\r\n```\r\n\r\n开关表单保存到数据库的默认值为`1`和`0`，如果需要更改保存到数据库的值，可以这样使用\r\n\r\n```php\r\n\$form->switch(\$column[, \$label])\r\n\t->customFormat(function (\$v) {\r\n\t\treturn \$v == '打开' ? 1 : 0;\r\n\t})\r\n\t->saving(function (\$v) {\r\n\t\treturn \$v ? '打开' : '关闭';\r\n\t});\r\n```\r\n\r\n\r\n<a name=\"map\"></a>\r\n## 地图 (map)\r\n\r\n地图控件，用来选择经纬度,`\$latitude`, `\$longitude`为经纬度字段。\r\n\r\n使用这个功能需要在 `config/admin.php` 文件中修改 `map_provider` 的值（目前支持的地图为：\"tencent\",\"amap\", \"google\", \"yandex\", \"baidu\")，不同地图需要自己申请相应的 KEY 并在 .env 文件中配置，然后需要在`app/Admin/bootstrap.php`中加入以下代码\r\n```php\r\nForm\\Field\\Map::requireAssets();\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$form->map(\$latitude, \$longitude, \$label);\r\n```\r\n\r\n\r\n<a name=\"slider\"></a>\r\n## 滑动条 (slider)\r\n可以用来数字类型字段的选择，比如年龄：\r\n```php\r\n\$form->slider(\$column[, \$label])->options(['max' => 100, 'min' => 1, 'step' => 1, 'postfix' => 'years old']);\r\n```\r\n更多options请参考:https://github.com/IonDen/ion.rangeSlider#settings\r\n\r\n\r\n<a name=\"display\"></a>\r\n## 仅显示 (display)\r\n只显示字段，不做任何操作：\r\n```php\r\n\$form->display(\$column[, \$label]);\r\n\r\n\r\n//更复杂的显示\r\n\$form->display(\$column[, \$label])->with(function (\$value) {\r\n    return \"<img src=\"\$value\" />\";\r\n});\r\n```\r\n\r\n\r\n<a name=\"currency\"></a>\r\n## 单位符号 (currency)\r\n```php\r\n\$form->currency(\$column[, \$label]);\r\n\r\n// 设置单位符号\r\n\$form->currency(\$column[, \$label])->symbol('￥');\r\n```\r\n\r\n<a name=\"number\"></a>\r\n## 数字 (number)\r\n```php\r\n\$form->number(\$column[, \$label]);\r\n```\r\n\r\n<a name=\"rate\"></a>\r\n## 费率 (rate)\r\n```php\r\n\$form->rate(\$column[, \$label]);\r\n```\r\n\r\n<a name=\"divider\"></a>\r\n## 分割线 (divider)\r\n```php\r\n\$form->divider();\r\n```\r\n\r\n<a name=\"html\"></a>\r\n## 自定义内容 (html)\r\n插入html内容，参数可以是实现了`Htmlable`、`Renderable`或者实现了`__toString()`方法的类\r\n```php\r\n\$form->html('你的html内容', \$label = '');\r\n```\r\n\r\n<a name=\"tags\"></a>\r\n## 标签 (tags)\r\n插入逗号(,)隔开的字符串`tags`\r\n```php\r\n\$form->tags('keywords');\r\n```\r\n\r\n`tags`同样支持`ManyToMany`的关系，示例如下：\r\n\r\n```php\r\n\$form->tags('tags', '文章标签')\r\n    ->pluck('name', 'id') // name 为需要显示的 Tag 模型的字段，id 为主键\r\n    ->options(Tag::all());// 下拉框选项\r\n```\r\n\r\n注意：处理`ManyToMany`关系时必须调用`pluck`方法，指定显示的字段名和主键。\r\n此外 `options` 方法传入一个`Collection`对象时，`options`会自动调用该对象的`pluck`方法转为`['主键名' => '显示字段名']` 数组，作为下拉框选项。或者可以直接使用`['主键名' => '显示字段名']`这样的数组作为参数。\r\n\r\n`tags`还支持`saving`方法用于处理提交的数据，示例如下：\r\n\r\n```php\r\n\$form->tags('tags', '文章标签')\r\n    ->pluck('name', 'id')\r\n    ->options(Tag::all())\r\n    ->saving(function (\$value) {\r\n        return \$value;\r\n    });\r\n```\r\n\r\n`saving` 方法接收一个「参数为 tags 的提交值，返回值为修改后的 tags 提交值」的闭包，可以用于实现自动创建新 tag 或其它功能。\r\n\r\n\r\n\r\n如果选项过多，可通过ajax方式动态分页载入选项：\r\n\r\n```php\r\n\$form->tags('friends')->options(function (\$ids) {\r\n    return User::find((array) \$ids)->pluck('name', 'id');\r\n    \r\n})->ajax('api/users');\r\n```\r\n\r\nAPI `/admin/api/users`接口的代码：\r\n\r\n```php\r\npublic function users(Request \$request)\r\n{\r\n    \$q = \$request->get('q');\r\n\r\n    return User::where('name', 'like', \"%\$q%\")->paginate(null, ['id', 'name as text']);\r\n}\r\n```\r\n接口返回的数据结构为\r\n```\r\n{\r\n    \"total\": 4,\r\n    \"per_page\": 15,\r\n    \"current_page\": 1,\r\n    \"last_page\": 1,\r\n    \"next_page_url\": null,\r\n    \"prev_page_url\": null,\r\n    \"from\": 1,\r\n    \"to\": 3,\r\n    \"data\": [\r\n        {\r\n            \"id\": 9,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 21,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 42,\r\n            \"text\": \"xxx\"\r\n        },\r\n        {\r\n            \"id\": 48,\r\n            \"text\": \"xxx\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n\r\n\r\n<a name=\"icon\"></a>\r\n## 图标选择器 (icon)\r\n选择`font-awesome`图标\r\n```php\r\n\$form->icon('icon');\r\n```\r\n\r\n<a name=\"tree\"></a>\r\n## 树形选择器 (tree)\r\n树形结构表单\r\n\r\n```php\r\n\$form->tree('permissions')\r\n    ->nodes(Model::get()->toArray()) // 设置所有节点\r\n    ->customFormat(function (\$v) { // 格式化外部注入的值\r\n        if (!\$v) return [];\r\n\r\n        return array_column(\$v, 'id');\r\n    });\r\n\r\n// 修改节点的字段名称\r\n// 默认 “id” “name” “parent_id”\r\n\$form->tree('permissions')\r\n    ->nodes(\$permissionModel::get()->toArray())\r\n    ->setIdColumn('id')\r\n    ->setTitleColumn('title')\r\n    ->setParentColumn('parent'); \r\n    \r\n// 默认是不保存父节点的值的，因为一般来说父节点只是作为标题的形式存在\r\n// 禁止过滤父节点的值\r\n\$form->tree('permissions')\r\n    ->nodes(\$permissionModel->allNodes())\r\n    ->exceptParentNode();\r\n    \r\n// 默认收缩子节点\r\n\$form->tree('permissions')\r\n    ->nodes(\$permissionModel->allNodes())\r\n    ->expand(false);\r\n```\r\n\r\n`tree`表单默认不允许单独选中父节点，可以通过`treeState(false)`开启这个功能\r\n\r\n```php\r\n\$form->tree('xxx')\r\n    ->treeState(false) # 允许单独选择父节点\r\n    ->setTitleColumn('title')\r\n    ->nodes(...);\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/a4a58ad7395e387b017eca057515b50a667bad3006a49.gif)\r\n\r\n\r\n\r\n<a name=\"table\"></a>\r\n## 表格表单 (table)\r\n\r\n如果某一个字段存储的是json格式的二维数组，可以使用table表单组件来实现快速的编辑：\r\n\r\n```php\r\n\$form->table('extra', function (NestedForm \$table) {\r\n    \$table->text('key');\r\n    \$table->text('value');\r\n    \$table->text('desc');\r\n});\r\n```\r\n同时在模型里面给这个字段增加访问器和修改器:\r\n```php\r\npublic function getExtraAttribute(\$extra)\r\n{\r\n    return array_values(json_decode(\$extra, true) ?: []);\r\n}\r\n\r\npublic function setExtraAttribute(\$extra)\r\n{\r\n    \$this->attributes['extra'] = json_encode(array_values(\$extra));\r\n}\r\n```\r\n这个组件类似于hasMany组件，不过是用来处理单个字段的情况，适用于简单的二维数据。\r\n\r\n\r\n<a name=\"onemany\"></a>\r\n## 一对多 (hasMany)\r\n\r\n一对多内嵌表格，用于处理一对多的关系，下面是个简单的例子：\r\n\r\n有两张表是一对多关系：\r\n\r\n```sql\r\nCREATE TABLE `demo_painters` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `bio` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `demo_paintings` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `painter_id` int(10) unsigned NOT NULL,\r\n  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `body` text COLLATE utf8_unicode_ci NOT NULL,\r\n  `completed_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`),\r\n  KEY painter_id (`painter_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n```\r\n\r\n表的模型为：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models\\Demo;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Painter extends Model\r\n{\r\n    public function paintings()\r\n    {\r\n        return \$this->hasMany(Painting::class, 'painter_id');\r\n    }\r\n}\r\n```\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models\\Demo;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Painting extends Model\r\n{\r\n    protected \$fillable = ['title', 'body', 'completed_at'];\r\n\r\n    public function painter()\r\n    {\r\n        return \$this->belongsTo(Painter::class, 'painter_id');\r\n    }\r\n}\r\n```\r\n\r\n构建表单代码如下：\r\n```php\r\nuse App\\Models\\Demo\\Painter;\r\n\r\n// 这里需要显式地指定关联关系\r\n\$builder = Painter::with('paintings');\r\n\r\n// 如果你使用的是数据仓库，则可以这样指定关联关系\r\n// \$repository = new Painter(['paintings']);\r\n\r\nreturn Form::make(\$builder, function (Form \$form) {\r\n    \$form->display('id', 'ID');\r\n    \r\n    \$form->text('username')->rules('required');\r\n    \$form->textarea('bio')->rules('required');\r\n    \r\n    \$form->hasMany('paintings', function (Form\\NestedForm \$form) {\r\n        \$form->text('title');\r\n        \$form->textarea('body');\r\n        \$form->datetime('completed_at');\r\n    });\r\n    \r\n    \$form->display('created_at', 'Created At');\r\n    \$form->display('updated_at', 'Updated At');\r\n    \r\n    // 也可以设置label\r\n    \r\n    \$form->hasMany('paintings', '画作', function (Form\\NestedForm \$form) {\r\n        ...\r\n    });\r\n});\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d649255149f414a4acdfd48d8ceb55f9667bad43ad211.png)\r\n\r\n\r\n<a name=\"has-many-table\"></a>\r\n### 表格模式 (table)\r\n\r\n如果你想要显示表格模式，可以这样使用\r\n\r\n```php\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\n\$form->hasMany('paintings', function (Form\\NestedForm \$form) {\r\n     ...\r\n})->useTable();\r\n```\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/238005def4731c25c8fcdba578f5050b667bad5818b23.png)\r\n\r\n\r\n<a name=\"embeds\"></a>\r\n## 内嵌 (embeds)\r\n\r\n> 内嵌表单不支持图片和文件上传表单。\r\n\r\n用于处理`mysql`的`JSON`类型字段数据或者`mongodb`的`object`类型数据，也可以将多个field的数据值以`JSON`字符串的形式存储在`mysql`的字符串类型字段中\r\n\r\n比如`orders`表中的`JSON`或字符串类型的`extra`字段，用来存储多个field的数据，先定义model:\r\n```php\r\nclass Order extends Model\r\n{\r\n    protected \$casts = [\r\n        'extra' => 'json',\r\n    ];\r\n}\r\n```\r\n然后在form中使用：\r\n```php\r\n\$form->embeds('extra', function (\$form) {\r\n\r\n    \$form->text('extra1')->rules('required');\r\n    \$form->email('extra2')->rules('required');\r\n    \$form->mobile('extra3');\r\n    \$form->datetime('extra4');\r\n\r\n    \$form->dateRange('extra5', 'extra6', '范围')->rules('required');\r\n\r\n});\r\n\r\n// 自定义标题\r\n\$form->embeds('extra', '附加信息', function (\$form) {\r\n    ...\r\n});\r\n```\r\n\r\n回调函数里面构建表单元素的方法调用和外面是一样的。", 'order' => 3, 'created_at' => "2024-06-26 13:55:40", 'updated_at' => "2024-06-26 13:55:40", 'slug' => "use-of-fields"],
            ['id' => 38, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "字段扩展", 'content' => "# 表单字段扩展\r\n\r\n\r\n## 扩展自定义组件\r\n\r\n在开始扩展表单组件之前需要先了解[动态监听元素生成 (init)](https://learnku.com/docs/dcat-admin/2.x/js-component/8087#1dae4a)功能，表单组件的`JS`代码建议都使用`Dcat.init`方法监听并初始化，否则可能无法兼容`Form::hasMany`以及`Form::array`等动态生成字段的表单类型。\r\n\r\n### 集成富文本编辑器wangEditor\r\n\r\n[wangEditor](http://www.wangeditor.com/)是一个优秀的国产的轻量级富文本编辑器，如果`dcat-admin`自带的基于`ckeditor`的编辑器组件使用上有问题，可以通过下面的步骤可以集成它，并覆盖掉默认的`editor`：\r\n\r\n> 为了方便演示，示例中直接使用CDN链接。实际开发中需要先下载前端库文件[wangEditor](https://github.com/wangfupeng1988/wangEditor/releases)到服务器，解压到目录`public/vendor/wangEditor-4.7.1`。\r\n\r\n新建组件类`app/Admin/Extensions/Form/WangEditor.php`。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Form;\r\n\r\nuse Dcat\\Admin\\Form\\Field;\r\n\r\nclass WangEditor extends Field\r\n{\r\n    protected \$view = 'admin.wang-editor';\r\n}\r\n```\r\n\r\n新建视图文件`resources/views/admin/wang-editor.blade.php`：\r\n```html\r\n<div class=\"{{\$viewClass['form-group']}}\">\r\n\r\n    <label class=\"{{\$viewClass['label']}} control-label\">{{\$label}}</label>\r\n\r\n    <div class=\"{{\$viewClass['field']}}\">\r\n\r\n        @include('admin::form.error')\r\n\r\n        <div {!! \$attributes !!} style=\"width: 100%; height: 100%;\">\r\n            <p>{!! \$value !!}</p>\r\n        </div>\r\n\r\n        <input type=\"hidden\" name=\"{{\$name}}\" value=\"{{ old(\$column, \$value) }}\" />\r\n\r\n        @include('admin::form.help-block')\r\n\r\n    </div>\r\n</div>\r\n\r\n<!-- script标签加上 \"init\" 属性后会自动使用 Dcat.init() 方法动态监听元素生成 -->\r\n<script require=\"@wang-editor\" init=\"{!! \$selector !!}\">\r\n    var E = window.wangEditor\r\n\t// id 变量是 Dcat.init() 自动生成的，是一个唯一的随机字符串\r\n    var editor = new E('#' + id);\r\n    editor.config.zIndex = 0\r\n    editor.config.uploadImgShowBase64 = true\r\n    editor.config.onchange = function (html) {\r\n        \$this.parents('.form-field').find('input[type=\"hidden\"]').val(html);\r\n    }\r\n    editor.create()\r\n</script>\r\n```\r\n\r\n然后注册进`dcat-admin`，在`app/Admin/bootstrap.php`中添加以下代码：\r\n\r\n```php\r\n<?php\r\n\r\nuse App\\Admin\\Extensions\\Form\\WangEditor;\r\nuse Dcat\\Admin\\Form;\r\n\r\n// 注册前端组件别名\r\nAdmin::asset()->alias('@wang-editor', [\r\n    // 为了方便演示效果，这里直接加载CDN链接，实际开发中可以下载到服务器加载\r\n    'js' => ['https://cdn.jsdelivr.net/npm/wangeditor@4.7.1/dist/wangEditor.min.js'],\r\n]);\r\n\r\nForm::extend('editor', WangEditor::class);\r\n```\r\n\r\n调用:\r\n\r\n```php\r\n\$form->editor('body');\r\n```\r\n\r\n### 集成富文本编辑器ckeditor\r\n\r\n先下载[ckeditor](http://ckeditor.com/download) 并解压到/public目录，比如放在`/public/packages/`目录下。\r\n\r\n然后新建扩展文件`app/Admin/Extensions/Form/CKEditor.php`:\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Form;\r\n\r\nuse Dcat\\Admin\\Form\\Field;\r\n\r\nclass CKEditor extends Field\r\n{\r\n    protected \$view = 'admin.ckeditor';\r\n}\r\n```\r\n\r\n新建view `resources/views/admin/ckeditor.blade.php`:\r\n```html\r\n<div class=\"{{\$viewClass['form-group']}}\">\r\n\r\n    <label class=\"{{\$viewClass['label']}} control-label\">{{\$label}}</label>\r\n\r\n    <div class=\"{{\$viewClass['field']}}\">\r\n\r\n        @include('admin::form.error')\r\n\r\n        <textarea name=\"{{ \$name}}\" placeholder=\"{{ \$placeholder }}\" {!! \$attributes !!} >{!! \$value !!}</textarea>\r\n\r\n        @include('admin::form.help-block')\r\n\r\n    </div>\r\n</div>\r\n\r\n<script require=\"@ckeditor\" init=\"{!! \$selector !!}\">\r\n    \$this.ckeditor();\r\n</script>\r\n```\r\n\r\n然后在`app/Admin/bootstrap.php`中引入扩展：\r\n```php\r\nuse App\\Admin\\Extensions\\Form\\CKEditor;\r\nuse Dcat\\Admin\\Form;\r\n\r\n// 注册前端组件别名\r\nAdmin::asset()->alias('@ckeditor', [\r\n    'js' => [\r\n        '/packages/ckeditor/ckeditor.js',\r\n        '/packages/ckeditor/adapters/jquery.js',\r\n    ],\r\n]);\r\n\r\nForm::extend('ckeditor', CKEditor::class);\r\n```\r\n\r\n然后就能在form中使用了:\r\n```php\r\n\$form->ckeditor('content');\r\n```\r\n\r\n### 集成PHP editor\r\n\r\n\r\n通过下面的步骤来扩展一个基于[codemirror](http://codemirror.net/index.html)的PHP代码编辑器，效果参考[PHP mode](http://codemirror.net/mode/php/)。\r\n\r\n先将[codemirror](http://codemirror.net/codemirror.zip)库下载并解压到前端资源目录下，比如放在`public/packages/codemirror-5.20.2`目录下。\r\n\r\n新建组件类`app/Admin/Extensions/PHPEditor.php`:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Form;\r\n\r\nuse Dcat\\Admin\\Form\\Field;\r\n\r\nclass PHPEditor extends Field\r\n{\r\n    protected \$view = 'admin.php-editor';\r\n}\r\n\r\n```\r\n\r\n> {tip} 类中的静态资源也同样可以从外部引入，参考[Editor.php](https://github.com/jqhph/dcat-admin/blob/master/src/Form/Field/Editor.php)\r\n\r\n创建视图`resources/views/admin/php-editor.blade.php`:\r\n\r\n```html\r\n<div class=\"{{\$viewClass['form-group']}}\">\r\n\r\n    <label class=\"{{\$viewClass['label']}} control-label\">{{\$label}}</label>\r\n\r\n    <div class=\"{{\$viewClass['field']}}\">\r\n\r\n        @include('admin::form.error')\r\n\r\n        <textarea class=\"{{ \$class }}\"   {!! \$attributes !!} >{!! \$value !!}</textarea>\r\n\r\n        <input type=\"hidden\" name=\"{{\$name}}\" value=\"{{ old(\$column, \$value) }}\" />\r\n\r\n        @include('admin::form.help-block')\r\n    </div>\r\n</div>\r\n\r\n<script require=\"@phpeditor\" init=\"{!! \$selector !!}\">\r\n    var Editor = CodeMirror.fromTextArea(document.getElementById(id), {\r\n        lineNumbers: true,\r\n        mode: \"text/x-php\",\r\n        extraKeys: {\r\n            \"Tab\": function(cm){\r\n                cm.replaceSelection(\"    \" , \"end\");\r\n            }\r\n        }\r\n    });\r\n    Editor.on(\"change\", function (Editor, changes) {\r\n        let val = Editor.getValue();\r\n        //console.log(val);\r\n        \$this.parents('.form-field').find('input[name=\"hidden\"]').val(val);\r\n    });\r\n</script>\r\n```\r\n\r\n最后找到文件`app/Admin/bootstrap.php`,如果文件不存在，请更新`dcat-admin`，然后新建该文件,添加下面代码：\r\n\r\n```\r\n<?php\r\n\r\nuse App\\Admin\\Extensions\\Form\\PHPEditor;\r\nuse Dcat\\Admin\\Form;\r\n\r\nAdmin::asset()->alias('@phpeditor', [\r\n    'js' => [\r\n        '/packages/codemirror-5.20.2/lib/codemirror.js',\r\n        '/packages/codemirror-5.20.2/addon/edit/matchbrackets.js',\r\n        '/packages/codemirror-5.20.2/mode/htmlmixed/htmlmixed.js',\r\n        '/packages/codemirror-5.20.2/mode/xml/xml.js',\r\n        '/packages/codemirror-5.20.2/mode/javascript/javascript.js',\r\n        '/packages/codemirror-5.20.2/mode/css/css.js',\r\n        '/packages/codemirror-5.20.2/mode/clike/clike.js',\r\n        '/packages/codemirror-5.20.2/mode/php/php.js',\r\n    ],\r\n    'css' => '/packages/codemirror-5.20.2/lib/codemirror.css',\r\n]);\r\n\r\nForm::extend('php', PHPEditor::class);\r\n```\r\n\r\n这样就能在[model-form](model-form.md)中使用PHP编辑器了：\r\n\r\n```\r\n\$form->php('code');\r\n```\r\n\r\n通过这种方式，可以添加任意你想要添加的`form`组件。\r\n\r\n\r\n## 常用方法\r\n\r\n表单组件是`Dcat Admin`中最为复杂的组件，下面列一些在扩展表单组件中可能需要用到的方法\r\n\r\n\r\n### 处理用户输入的表单值 (prepareInputValue)\r\n\r\n通过`prepareInputValue`方法可以处理用户输入的表单值，默认不做任何处理。此方法在`Form`表单的`saving`事件触发之后，表单字段的`saving`方法之前执行\r\n\r\n> {tip} 这个功能类似`Laravel model`中的**修改器**。\r\n\r\n```php\r\nclass PHPEditor extends Field\r\n{\r\n\t...\r\n\t\r\n\t// 把用户输入的表单值转化为 string 格式保存到数据库\r\n\tprotected function prepareInputValue(\$value)\r\n\t{\r\n\t\treturn (string) \$value;\r\n\t}\r\n}\r\n```\r\n\r\n### 处理待显示的字段值 (formatFieldData)\r\n\r\n通过`formatFieldData`方法可以处理处理待显示的字段值。此方法在表单字段的`customFormat`方法之前执行\r\n\r\n> {tip} 这个功能类似`Laravel model`中的**访问器**。\r\n\r\n```php\r\nclass PHPEditor extends Field\r\n{\r\n\t...\r\n\t\r\n\t// 把字段值转化为数组格式\r\n\t// \$data是当前表单的编辑数据，数据格式是 array\r\n\tprotected function formatFieldData(\$data)\r\n\t{\r\n\t    // 获取到当前字段值\r\n\t\t\$value = parent::formatFieldData(\$data);\r\n\t\t\r\n\t\t// 处理字段值\r\n\t\t...\r\n\t\t\r\n\t\treturn \$value;\r\n\t}\r\n}\r\n```\r\n\r\n### 获取元素CSS选择器 (getElementClassSelector)\r\n\r\n表单组件类实例化后会根据字段名称生成一个`css class`，然后传递到模板中，我们通常可以通过这个`class`获取到当前表单的元素对象\r\n\r\n模板\r\n```html\r\n<div class=\"{{\$viewClass['form-group']}}\">\r\n\r\n    <div class=\"{{ \$viewClass['label'] }} control-label\">\r\n        <span>{!! \$label !!}</span>\r\n    </div>\r\n\r\n    <div class=\"{{\$viewClass['field']}}\">\r\n\r\n        @include('admin::form.error')\r\n\r\n        <input type=\"hidden\" name=\"{{\$name}}\"/>\r\n\r\n        <select style=\"width: 100%;\" name=\"{{\$name}}\" {!! \$attributes !!} >\r\n           <option value=\"\"></option>\r\n\t\t   @foreach(\$options as \$select => \$option)\r\n\t\t\t   <option value=\"{{\$select}}\" {{ Dcat\\Admin\\Support\\Helper::equal(\$select, \$value) ?'selected':'' }}>{{\$option}}</option>\r\n\t\t   @endforeach\r\n        </select>\r\n\r\n        @include('admin::form.help-block')\r\n\r\n    </div>\r\n</div>\r\n\r\n\r\n<script require=\"...\" init=\"{!! \$selector !!}\">\r\n    // 这里的 \$selector 即是当前字段的 css选择器\r\n    \$this.select2(\$configs);\r\n</script>\r\n```\r\n\r\n### JS代码\r\n\r\n为了让扩展的表单组件能够兼容`HasMany`、`array`以及`Table`表单，我们必须使用[动态监听元素生成 (init)](https://learnku.com/docs/dcat-admin/2.x/js-component/8087#1dae4a)功能\r\n\r\n\r\n```html\r\n<div class=\"{{\$viewClass['form-group']}}\">\r\n    ...\r\n</div>\r\n\r\n\r\n<script require=\"...\" init=\"{!! \$selector !!}\">\r\n    \$this.select2(\$configs);\r\n</script>\r\n```", 'order' => 4, 'created_at' => "2024-06-26 13:56:10", 'updated_at' => "2024-06-26 13:56:10", 'slug' => "field-management"],
            ['id' => 39, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "数据源", 'content' => "# 表单数据源\r\n\r\n## 模型与数据仓库\r\n\r\n数据仓库(`Repository`)是一个可以提供特定接口对数据进行读写操作的类，通过数据仓库的引入，可以让页面的构建不再关心数据读写功能的具体实现。只需要实现特定的操作接口即可轻松切换数据源，关于数据仓库的详细用法请参考文档[数据仓库](https://learnku.com/docs/dcat-admin/1.x/basic-use/8123)。\r\n\r\n\r\n## 数据来自模型\r\n\r\n> 如果你的数据来自`Model`，那么你也可以直接使用`Model`实例，底层会自动把`Model`转化为数据仓库实例。\r\n\r\n\r\n\r\n当数据源支持模型时，只需创建一个非常简单的`Repository`类既可：\r\n\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse App\\Models\\Movie as MovieModel;\r\n\r\nclass Movie extends EloquentRepository\r\n{\r\n    // 这里定义你的模型类名\r\n    protected \$eloquentClass = MovieModel::class;\r\n    \r\n    // 通过这个方法可以指定表单页查询的字段，默认\"*\"\r\n    public function getFormColumns()\r\n    {\r\n        return [\$this->getKeyName(), 'name', 'title', 'created_at'];\r\n    }\r\n}\r\n```\r\n使用：\r\n```php\r\nuse App\\Admin\\Repositories\\Movie;\r\n\r\n\$form = new Form(new Movie);\r\n\r\n...\r\n```\r\n\r\n## 数据来自外部API\r\n\r\n下面以`豆瓣电影`的API为例子，来展示`Repository`的表单数据读写操作相关接口的用法：\r\n\r\n```php\r\n<?php\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\Repository;\r\nuse Dcat\\Admin\\Form;\r\n\r\nclass ComingSoon extends Repository\r\n{\r\n    protected \$api = 'https://api.douban.com/v2/movie/coming_soon';\r\n    \r\n    // 返回你的id字段名称，默认“id”\r\n    protected \$keyName = '_id';\r\n\r\n    // 查询编辑页数据\r\n    // 这个方法需要返回一个数组\r\n    public function edit(Form \$form)\r\n    {\r\n        // 获取id\r\n        \$id = \$form->builder()->getResourceId();\r\n\r\n        \$data = file_get_contents(\"http://api.douban.com/v2/movie/subject/\$id\");\r\n\r\n        return json_decode(\$data, true);\r\n    }\r\n    \r\n    // 这个方法用于在修改数据前查询原记录\r\n    // 如果使用了文件上传表单，当文件发生变更时会根据这个原始记录自动删除旧文件\r\n     // 如果不需要此数据返回空数组即可\r\n    public function updating(Form \$form)\r\n    {\r\n        // 获取id\r\n        \$id = \$form->builder()->getResourceId();\r\n        \r\n        return [];\r\n    }\r\n\r\n    // 修改操作\r\n    // 返回一个bool类型的数据\r\n    public function update(Form \$form)\r\n    {\r\n        // 获取id\r\n        \$id = \$form->builder()->getResourceId();\r\n\r\n        // 获取要修改的数据\r\n        \$attributes = \$form->updates();\r\n\r\n        // TODO\r\n        // 这里写你的修改逻辑\r\n        \r\n        return true;\r\n    }\r\n\r\n    // 这个方法用于在修改数据前查询原始数据\r\n    // 如果使用了文件上传表单，会根据这个数据自动删除文件\r\n    // 如果不需要此数据返回空数组即可\r\n    public function deleting(Form \$form)\r\n    {\r\n        \$id = \$form->builder()->getResourceId();\r\n        \r\n        \$id = explode(',', \$id);\r\n\r\n//        \$data = file_get_contents(\"http://api.douban.com/v2/movie/subject/\$id\");\r\n//\r\n//        return json_decode(\$data, true);\r\n\r\n        return [];\r\n    }\r\n\r\n    // 删除数据\r\n    // \$deletingData 是由 getDataWhenDeleting 方法返回的数据\r\n    public function destroy(Form \$form, \$deletingData)\r\n    {\r\n        // 注意这里的id可能是多个\r\n        \$id = \$form->builder()->getResourceId();\r\n        \r\n        // 当使用批量删除功能时，这里的id是用“,”隔开的字符串\r\n        \$id = explode(',', \$id);\r\n\r\n        // TODO\r\n//        var_dump(\$id, \$deletingData);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n```", 'order' => 5, 'created_at' => "2024-06-26 13:56:51", 'updated_at' => "2024-06-26 13:56:51", 'slug' => "data-source"],
            ['id' => 40, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "表单弹窗", 'content' => "# 表单弹窗\r\n\r\n\r\n## 数据表单弹窗\r\n\r\n通过`Form::dialog`方法可以快速构建一个基于数据表单的表单弹窗，仅需增加数行代码。\r\n\r\n> 表单弹窗的实现原理是：通过`create`和`edit`页面获取构建好的表单`HTML`字符，然后使用弹窗插件把这部分`HTML`字符渲染出来。\r\n如果期间需要加载新的`js`脚本，则会等待脚本加载完毕再执行表单初始化`js`代码。\r\n\r\n### 简单示例\r\n\r\n#### 开启表单弹窗\r\n```php\r\n<?php use App\\Http\\Controllers\\Controller;\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass ModalFormController extends Controller\r\n{\r\n    public function index(Content \$content)\r\n    {\r\n        return \$content\r\n            ->header('Modal Form')\r\n            ->body(\$this->build());\r\n    }\r\n\r\n    protected function build()\r\n    {\r\n        Form::dialog('新增角色')\r\n            ->click('.create-form') // 绑定点击按钮\r\n            ->url('auth/roles/create') // 表单页面链接，此参数会被按钮中的 “data-url” 属性替换。。\r\n            ->width('700px') // 指定弹窗宽度，可填写百分比，默认 720px\r\n            ->height('650px') // 指定弹窗高度，可填写百分比，默认 690px\r\n            ->success('Dcat.reload()'); // 新增成功后刷新页面\r\n\r\n        Form::dialog('编辑角色')\r\n            ->click('.edit-form')\r\n            ->success('Dcat.reload()'); // 编辑成功后刷新页面\r\n\r\n        // 当需要在同个“class”的按钮中绑定不同的链接时，把链接放到按钮的“data-url”属性中即可\r\n        \$editPage = admin_base_path('auth/roles/1/edit');\r\n\r\n        return \"\r\n<div style=\"padding:30px 0\">\r\n    <span class=\"btn btn-success create-form\"> 新增表单弹窗 </span>   \r\n    <span class=\"btn btn-blue edit-form\" data-url=\"{\$editPage}\"> 编辑表单弹窗 </span>\r\n</div>\r\n\";\r\n    }\r\n\r\n}\r\n```\r\n\r\n#### 表单构建以及保存数据\r\n```php\r\n<?php use App\\Admin\\Repositories\\Role;\r\nuse Dcat\\Admin\\Controllers\\HasResourceActions;\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Layout\\Content;\r\nuse Dcat\\Admin\\Admin;\r\n\r\nclass RoleController\r\n{\r\n    use HasResourceActions;\r\n    \r\n    /**\r\n         * Edit interface.\r\n         *\r\n         * @param mixed   \$id\r\n         * @param Content \$content\r\n         *\r\n         * @return Content\r\n         */\r\n        public function edit(\$id, Content \$content)\r\n        {\r\n            return \$content\r\n                ->header(trans('admin.roles'))\r\n                ->description(trans('admin.edit'))\r\n                ->body(\$this->form()->edit(\$id));\r\n        }\r\n    \r\n        /**\r\n         * Create interface.\r\n         *\r\n         * @param Content \$content\r\n         *\r\n         * @return Content\r\n         */\r\n        public function create(Content \$content)\r\n        {\r\n            return \$content\r\n                ->header(trans('admin.roles'))\r\n                ->description(trans('admin.create'))\r\n                ->body(\$this->form());\r\n        }\r\n    \r\n    /**\r\n     * Make a form builder.\r\n     *\r\n     * @return Form\r\n     */\r\n    protected function form()\r\n    {\r\n        return Form::make(new Role(), function (Form \$form) {\r\n            \$form->display('id', 'ID');\r\n            \r\n            \$form->text('slug', trans('admin.slug'))->required()->prepareForSave(function (\$value) {\r\n                return \$value;\r\n            });\r\n            \$form->text('name', trans('admin.name'))->required();\r\n    \r\n            \$form->tree('permissions')\r\n                ->nodes(function () {\r\n                    \$permissionModel = config('admin.database.permissions_model');\r\n                    \$permissionModel = new \$permissionModel;\r\n    \r\n                    return \$permissionModel->allNodes();\r\n                })\r\n                ->customFormat(function (\$v) {\r\n                    if (!\$v) return [];\r\n    \r\n                    return array_column(\$v, 'id');\r\n                });\r\n    \r\n            \$form->display('created_at', trans('admin.created_at'));\r\n            \$form->display('updated_at', trans('admin.updated_at'));\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n#### 效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/fcec9da4de95874894667751d7799b73667badf664018.png)\r\n\r\n### 功能接口\r\n\r\n表单弹窗必须绑定一个可点击的页面元素，通过点击这个元素弹出弹窗。\r\n\r\n#### 设置弹窗标题\r\n\r\n```php\r\n\$modal = Form::dialog('标题');\r\n```\r\n\r\n#### 绑定点击按钮\r\n通过`ModalForm::click`方法可以绑定点击按钮，绑定后当点击该按钮时会弹出弹窗\r\n\r\n```php\r\nForm::dialog('标题')\r\n    ->click('#click-button');\r\n```\r\n\r\n#### 设置URL\r\n\r\n如果是创建类型的表单，则可以通过以下方法设置获取表单模板的url\r\n```php\r\nForm::dialog('新增角色')\r\n    ->click('.create-form')\r\n    ->url('auth/roles/create');\r\n```\r\n\r\n如果是编辑类型的表单，则需要多个url，因为点击每个按钮弹出弹窗的表单内容是不同的，所以每个按钮的链接也不同。\r\n\r\n这个时候通过`ModalForm::url`方法设置的一个链接已经无法满足需求了，因而需要在点击按钮的`data-url`属性上保存url：\r\n```php\r\nForm::dialog('编辑角色')\r\n    ->click('.edit-form')\r\n    ->success('Dcat.reload()'); // 编辑成功后刷新页面\r\n\r\n    // 当需要在同个“class”的按钮中绑定不同的链接时，把链接放到按钮的“data-url”属性中即可\r\n    \$editPage1 = admin_base_path('auth/roles/1/edit');\r\n    \$editPage2 = admin_base_path('auth/roles/2/edit');\r\nreturn \"\r\n<div style=\"padding:30px 0\">\r\n    <span class=\"btn btn-blue edit-form\" data-url=\"{\$editPage1}\"> 编辑表单弹窗1 </span>\r\n    <span class=\"btn btn-blue edit-form\" data-url=\"{\$editPage2}\"> 编辑表单弹窗2 </span>\r\n</div>\r\n\";\r\n```\r\n\r\n#### 表单保存成功回调\r\n\r\n通过`success`方法可以设置表单保存成功之后执行的`js`代码，在这段`js`代码作用域内有一个`response`变量，通过这个变量可以获取服务端返回的`json`数据。\r\n\r\n```php\r\nForm::dialog('编辑角色')\r\n   ->click('.edit-form')\r\n   ->success(\r\n       click('.edit-form')\r\n   ->error(\r\n       click('.edit-form')\r\n   ->saved(\r\n       click('.edit-form')\r\n    ->forceRefresh();\r\n```\r\n\r\n#### 设置弹窗宽高\r\n\r\n```php\r\nForm::dialog('编辑角色')\r\n    ->click('.edit-form')\r\n    ->dimensions('50%', '400px');\r\n    \r\n// 或\r\nForm::dialog('编辑角色')\r\n    ->click('.edit-form')\r\n    ->width('50%')\r\n    ->height('400px');\r\n```\r\n\r\n\r\n## 工具表单弹窗\r\n\r\n数据表单的弹窗功能通常需要结合一个资源控制器去实现，相对会比较复杂一点，所以系统也内置了另外一种更简便的表单弹窗功能，使用方法请参考[工具表单-弹窗](https://learnku.com/docs/dcat-admin/1.x/tools-form/8125#modal)。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/4bfa244ec40c9ed0563d3d760ecec7f7667bae031a299.png)", 'order' => 6, 'created_at' => "2024-06-26 13:57:48", 'updated_at' => "2024-06-26 13:58:29", 'slug' => "form-popup"],
            ['id' => 41, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "关联关系", 'content' => "# 表单关联关系\r\n\r\n\r\n### 一对一\r\n\r\n`users`表和`profiles`表通过`profiles.user_id`字段生成一对一关联\r\n\r\n```sql\r\nCREATE TABLE `users` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `profiles` (\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`user_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`age` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`gender` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n`updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\nPRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n```\r\n\r\n对应的数据模分别为:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Models;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    public function profile()\r\n    {\r\n        return \$this->hasOne(Profile::class);\r\n    }\r\n}\r\n\r\nclass Profile extends Model\r\n{\r\n    public function user()\r\n    {\r\n        return \$this->belongsTo(User::class);\r\n    }\r\n}\r\n```\r\n对应的数据仓库为：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse User as UserModel;\r\n\r\nclass User extends \\Dcat\\Admin\\Repositories\\EloquentRepository\r\n{\r\n    protected \$eloquentClass = UserModel::class;\r\n}\r\n```\r\n\r\n\r\n通过下面的代码可以关联在一个form里面:\r\n> {tip} 实例化数据仓库时需要传入关联模型定义的关联名称，相当于主动使用`Eloquent\\Model::with`方法。\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\User;\r\n\r\n// 注意这里实例化数据仓库`User`时必须传入\"profile\"，否则将无法关联\"profiles\"表数据\r\n\$form = Form::make(User::with('profile'), function (Form \$form) {\r\n    \$form->display('id');\r\n    \r\n    \$form->text('name');\r\n    \$form->text('email');\r\n    \r\n    \$form->text('profile.age');\r\n    \$form->text('profile.gender');\r\n    \r\n    \$form->datetime('created_at');\r\n    \$form->datetime('updated_at');\r\n});\r\n```\r\n\r\n如果你不想使用数据仓库，也可以直接使用模型\r\n```php\r\nuse App\\Admin\\Models\\User;\r\n\r\n// 注意这里是直接使用模型，没有使用数据仓库\r\n\$form = Form::make(User::with('profile'), function (Form \$form) {\r\n    \$form->display('id');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n\r\n### 一对多\r\n\r\n一对多的使用请参考文档[表单字段的使用-一对多](https://learnku.com/docs/dcat-admin/1.x/use-of-fields/8107#onemany)\r\n\r\n\r\n### 多对多\r\n\r\n\r\n下面以项目内置的`角色管理`模块的**角色绑定权限**功能为例来演示多对多关联模型的用法\r\n\r\n模型`Role`\r\n```php\r\n<?php\r\n\r\nnamespace Dcat\\Admin\\Models;\r\n\r\nuse Dcat\\Admin\\Traits\\HasDateTimeFormatter;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\r\n\r\nclass Role extends Model\r\n{\r\n    use HasDateTimeFormatter;\r\n\r\n    /**\r\n     * 定义你的关联模型.\r\n     *\r\n     * @return BelongsToMany\r\n     */\r\n    public function permissions(): BelongsToMany\r\n    {\r\n        \$pivotTable = 'admin_role_permissions'; // 中间表\r\n\r\n        \$relatedModel = Permission::class; // 关联模型类名\r\n\r\n        return \$this->belongsToMany(\$relatedModel, \$pivotTable, 'role_id', 'permission_id');\r\n    }\r\n}\r\n```\r\n\r\n```php\r\nuse Dcat\\Admin\\Models\\Permission;\r\n\r\n// 实例化数据仓库时传入 permissions，则会自动关联关联模型的数据\r\n// 这里传入 permissions 关联权限模型的数据\r\n\$repository = Role::with(['permissions']);\r\n\r\nreturn Form::make(\$repository, function (Form \$form) {\r\n    \$form->display('id', 'ID');\r\n\r\n    \$form->text('slug', trans('admin.slug'))->required();\r\n    \$form->text('name', trans('admin.name'))->required();\r\n    \r\n    // 这里的数据会自动保存到关联模型中\r\n    \$form->tree('permissions')\r\n        ->nodes(function () {\r\n            return (new Permission())->allNodes();\r\n        })\r\n        ->customFormat(function (\$v) {\r\n            if (!\$v) return [];\r\n\r\n            // 这一步非常重要，需要把数据库中查出来的二维数组转化成一维数组\r\n            return array_column(\$v, 'id');\r\n        });\r\n\r\n    ...\r\n});\r\n```\r\n\r\n如果你不想使用数据仓库，也可以直接使用模型\r\n```php\r\nuse Dcat\\Admin\\Models\\Role;\r\n\r\n// 注意这里是直接使用模型，没有使用数据仓库\r\n\$form = Form::make(Role::with('permissions'), function (Form \$form) {\r\n    \$form->display('id');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n最终效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/1476ce7c7f24af0d3dbc03b6c7785983667bae3391833.png)\r\n\r\n\r\n### 关联模型名称为驼峰风格\r\n\r\n如果你的关联模型名称的命名是**驼峰**风格，那么使用的时候需要转化为**下划线**风格命名\r\n\r\n\r\n例如\r\n```php\r\nclass User extend Model\r\n{\r\n    public function userProfile()\r\n    {\r\n        return ...;\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n```php\r\nreturn Form::make(User::with(['userProfile']), function (Form \$form) {\r\n\r\n    ...\r\n    \r\n    // 注意这里必须使用下划线风格命名，否则将无法显示编辑数据\r\n    \$form->text('user_profile.postcode');\r\n    \$form->text('user_profile.address');\r\n    \r\n});\r\n```", 'order' => 7, 'created_at' => "2024-06-26 13:59:27", 'updated_at' => "2024-06-26 13:59:27", 'slug' => "relationship"],
            ['id' => 42, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "JSON表单", 'content' => "# JSON格式字段处理\r\n\r\n`dcat-admin`的表单提供了下面几个组件来处理`JSON`格式的字段，方便用来处理`JSON`格式的对象、一维数组、二维数组等对象。\r\n\r\n\r\n## 键值对象 (keyValue)\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/b2acc65fcca3700fd6db418c2e11edf2667bae9660114.png)\r\n\r\n如果你的字段存储的是不固定`键`的`{\"field\":\"value\"}`格式，可以用`keyValue`组件:\r\n\r\n```php\r\n\$form->keyValue('column_name');\r\n\r\n// 设置校验规则\r\n\$form->keyValue('column_name')->rules('required|min:5');\r\n```\r\n\r\n自定义键名以及键值标题翻译\r\n\r\n```php\r\n\$form->keyValue(...)->setKeyLabel('键名')->setValueLabel('键值');\r\n```\r\n\r\n也可以自定义默认结构，以便于新建数据时候自动带入 keyValue 数据的模板\r\n```php\r\n\$form->keyValue('price')->default(['cny' => '', 'usd' => ''])->setKeyLabel('币种')->setValueLabel('价格');\r\n```\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f015f31ffd66be957a3ad969f4cee826667baea5a593c.png)\r\n\r\n## 固定键值对象 (embeds)\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/acfa8e74bccbf62248409ed19b2c0949667baeb05b895.png)\r\n\r\n用于处理`mysql`的`JSON`类型字段数据或者`mongodb`的`object`类型数据，也可以将多个`field`的数据值以`JSON`字符串的形式存储在`mysql`的字符串类型字段中\r\n\r\n适用于有固定键值的`JSON`类型字段\r\n\r\n```php\r\n\$form->embeds('column_name', function (\$form) {\r\n\r\n    \$form->text('key1')->required();\r\n    \$form->email('key2')->required();\r\n    \$form->datetime('key3');\r\n\r\n    \$form->dateRange('key4', 'key5', '范围')->rules('required');\r\n})->saving(function (\$v) {\r\n    // 转化为json格式存储\r\n    return json_encode(\$v);\r\n});\r\n\r\n// 自定义标题\r\n\$form->embeds('column_name', '字段标题', function (\$form) {\r\n    ...\r\n});\r\n```\r\n\r\n回调函数里面构建表单元素的方法调用和外面是一样的。\r\n\r\n## 一维数组 (list)\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/0e28fb87dc638bb67e6e8db696eccd7f667baec074d2d.png)\r\n\r\n如果你的字段是用来存储`[\"foo\", \"Bar\"]`格式的一维数组, 可以使用`list`组件:\r\n\r\n```php\r\n\$form->list('column_name');\r\n\r\n// 设置校验规则\r\n\$form->list('column_name')->rules('required|min:5');\r\n\r\n// 设置最大和最小元素个数\r\n\$form->list('column_name')->max(10)->min(5);\r\n```\r\n\r\n## 二维数组 (table)\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f52cdedffdd6044c8491d89c87551a77667baecc64f6d.png)\r\n\r\n如果某一个字段存储的是`json`格式的二维数组，可以使用`table`表单组件来实现快速的编辑：\r\n\r\n```php\r\n\$form->table('column_name', function (\$table) {\r\n    \$table->text('key');\r\n    \$table->text('value');\r\n    \$table->text('desc');\r\n})->saving(function (\$v) {\r\n    return json_encode(\$v);\r\n});\r\n```\r\n\r\n这个组件类似于`hasMany`组件，不过是用来处理单个字段的情况，适用于简单的二维数据。\r\n\r\n## 二维数组 (array)\r\n\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d649255149f414a4acdfd48d8ceb55f9667baed60d29c.png)\r\n\r\n如果某一个字段存储的是`json`格式的二维数组，并且字段比较多，可以使用`array`表单组件来实现快速的编辑：\r\n\r\n```php\r\n\$form->array('column_name', function (\$table) {\r\n    \$table->text('key');\r\n    \$table->text('value');\r\n    \$table->textarea('desc');\r\n})->saveAsJson();\r\n```", 'order' => 8, 'created_at' => "2024-06-26 14:02:01", 'updated_at' => "2024-06-26 14:02:01", 'slug' => "json-form"],
            ['id' => 43, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "分步表单", 'content' => "# 分步表单\r\n\r\n## 安装\r\n\r\n前往[https://github.com/dcat-admin/form-step](https://github.com/dcat-admin/form-step)下载分步表单扩展，然后安装并启用。\r\n\r\n> 扩展安装请参考文档[扩展基本使用](https://learnku.com/docs/dcat-admin/2.x/extended-basic-usage/9691)章节。\r\n\r\n## 简单示例\r\n\r\n```php\r\nprotected function form()\r\n{\r\n    return Form::make(new Model(), function (Form \$form) {\r\n        \$form->title('分步表单');\r\n        \$form->action('step');\r\n        \$form->disableListButton();\r\n    \r\n        \$form->multipleSteps()\r\n            ->remember() // 记住表单步骤，默认不开启\r\n            ->width('950px')\r\n            ->add('基本信息', function (\$step) {\r\n                \$info = '<i class=\"fa fa-exclamation-circle\"></i> 表单字段支持前端验证和后端验证混用，前端验证支持H5表单验证以及自定义验证。';\r\n    \r\n                \$step->html(Alert::make(\$info)->info());\r\n    \r\n                \$step->text('name', '姓名')->required()->maxLength(20);\r\n                // h5 表单验证\r\n                \$step->text('age', '年龄')\r\n                    ->required()\r\n                    ->type('number')\r\n                    ->attribute('max', 150)\r\n                    ->help('前端验证');\r\n    \r\n                \$step->radio('sex', '性别')->options(['未知', '男', '女'])->default(0);\r\n    \r\n                // 后端验证\r\n                \$step->text('birthplace', '籍贯')\r\n                    ->rules('required')\r\n                    ->help('演示后端字段验证');\r\n    \r\n                \$step->url('homepage', '个人主页');\r\n    \r\n                \$step->textarea('description', '简介');\r\n    \r\n            })\r\n            ->add('兴趣爱好', function (\$step) {\r\n                \$step->tags('hobbies', '爱好')\r\n                    ->options(['唱', '跳', 'RAP', '踢足球'])\r\n                    ->required();\r\n    \r\n                \$step->text('books', '书籍');\r\n                \$step->text('music', '音乐');\r\n    \r\n                // 事件\r\n                \$step->shown(function () {\r\n                    return <<<JS\r\n    Dcat.info('兴趣爱好');\r\n    console.log('兴趣爱好', args);\r\n    JS;\r\n                });\r\n    \r\n            })\r\n            ->add('地址', function (\$step) {\r\n                \$step->text('address', '街道地址');\r\n                \$step->text('post_code', '邮政编码');\r\n                \$step->tel('tel', ' 联系电话');\r\n            })\r\n            ->done(function () use (\$form) {\r\n                \$resource = \$form->getResource(0);\r\n    \r\n                \$data = [\r\n                    'title'       => '操作成功',\r\n                    'description' => '恭喜您成为第10086位用户',\r\n                    'createUrl'   => \$resource,\r\n                    'backUrl'     => \$resource,\r\n                ];\r\n    \r\n                return view('admin::form.done-step', \$data);\r\n            });\r\n    });\r\n}\r\n```\r\n\r\n\r\n\r\n## 运行逻辑\r\n\r\n分步表单的使用很简单，运行逻辑也与普通表单没有太大区别，下面简单说说分步表单的运行逻辑。\r\n\r\n> {tip} 分步表单没有 `update` 的概念。\r\n\r\n#### 参数验证\r\n当用户点击 `下一步` 时，会向后端发起请求验证参数是否正确，如果参数不符合要求则显示错误信息，验证通过才会进入下一个步骤。\r\n\r\n#### 表单提交\r\n当进行到最后一步时，会对所有步骤的表单参数一起提交到后端并进行验证，如果参数不符合要求则显示错误信息，验证通过则保存表单数据，保存的方法与普通表单完全一致。\r\n\r\n> {tip} 最后保存表单的方法是 `Form::store`。\r\n\r\n#### 完成页面\r\n\r\n表单保存完成之后会显示完成页面，此步骤无法忽略。\r\n\r\n\r\n## 编辑表单\r\n\r\n分步表单默认是没有编辑功能的，用户输入了长步骤的表单之后不需要再分步编辑，因此如果需要对分步表单进行编辑，可以参考以下方式\r\n\r\n```php\r\nprotected function form()\r\n{\r\n    return Form::make(new MyRepository(), function (Form \$form) {\r\n        // 判断是否是编辑页面\r\n        if (\$form->isEditing()) {\r\n            \$form->text('age', '年龄')\r\n                 ->required()\r\n                 ->type('number')\r\n                 ->attribute('max', 150)\r\n                 ->help('前端验证')\r\n        \r\n            ...\r\n            \r\n            return;\r\n        }\r\n    \r\n    \r\n        \$form->multipleSteps()\r\n            ->remember()\r\n            ->width('950px')\r\n            ->add('基本信息', function (Form\\StepForm \$step) {\r\n                \$info = '<i class=\"fa fa-exclamation-circle\"></i> 表单字段支持前端验证和后端验证混用，前端验证支持H5表单验证以及自定义验证。';\r\n    \r\n                \$step->html(Alert::make(\$info)->info());\r\n    \r\n                \$step->text('name', '姓名')->required()->maxLength(20);\r\n                // h5 表单验证\r\n                \$step->text('age', '年龄')\r\n                    ->required()\r\n                    ->type('number')\r\n                    ->attribute('max', 150)\r\n                    ->help('前端验证');\r\n    \r\n                \$step->radio('sex', '性别')->options(['未知', '男', '女'])->default(0);\r\n    \r\n                ...\r\n    \r\n            })\r\n            ->add('兴趣爱好', function (Form\\StepForm \$step) {\r\n                ...\r\n            })\r\n            ->done(function () use (\$form) {\r\n                ...\r\n            });\r\n    });\r\n}\r\n```\r\n\r\n## 功能接口\r\n\r\n### 设置容器最大宽度\r\n\r\n默认 `1000px`。\r\n\r\n> {tip} 此方法只针对大屏幕，手机端页面会自动调节大小。\r\n\r\n```php\r\n\$form->multipleSteps()->width('900px');\r\n```\r\n\r\n### 记住表单数据\r\n\r\n开启此功能之后，当用户点击 `下一步` 按钮并且参数验证通过后，会把表单数据保存在 `session` 中，直到整个分步表单保存完毕之后才会销毁。\r\n\r\n> {tip} 此功能默认不开启。\r\n\r\n```php\r\n// 开启\r\n\$form->multipleSteps()->remember();\r\n\r\n// 关闭\r\n\$form->multipleSteps()->remember(false);\r\n```\r\n\r\n### 设置容器间距\r\n\r\n默认值 `30px 18px 30px`。\r\n\r\n```php\r\n\$form->multipleSteps()->padding('30px 18px 30px');\r\n```\r\n\r\n### 监听页面离开事件\r\n\r\n监听所有步骤表单页面离开事件，可添加多个。\r\n\r\n```php\r\n\$form->multipleSteps()->leaving(<<<JS\r\n     // 获取当前页面的步骤索引\r\n     var index = args.index; \r\n                 \r\n     Dcat.info(\"你将要离开第 \" + (index + 1) + \" 个页面\");\r\n     \r\n     // args变量是一个js对象，包含当前事件对象、当前步骤选项、表单对象和表单值等字段。\r\n     console.log(\"leaving\", args);\r\n     \r\n     // 获取当前事件对象\r\n     var evt = args.event;\r\n     // 获取步骤表单标题tap对象\r\n     var tab = args.tab;\r\n     // 获取动向是前往上一步还是下一步页面：\"forward\"、\"backward\"\r\n     var direction = args.direction;\r\n     // 获取当前步骤的表单JQ对象\r\n     var \$form = args.form;\r\n     // 获取当前步骤页的表单值\r\n     var formArray = args.formArray;\r\n     \r\n     // 获取指定步骤的表单JQ对象\r\n     var \$firstForm = args.getForm(0);\r\n     // 获取指定步骤的表单值\r\n     var firstFormArray = args.getFormArray(0);\r\n     \r\n     // 停止离开当前页面\r\n     return false;\r\nJS    \r\n)->leaving(...);\r\n```\r\n\r\n### 监听页面显示事件\r\n\r\n监听所有步骤表单页面显示事件，可添加多个。\r\n\r\n```php\r\n\$form->multipleSteps()->shown(<<<JS\r\n     // 获取当前页面的步骤索引\r\n     var index = args.index; \r\n                 \r\n     Dcat.info(\"当前显示的是第 \" + (index + 1) + \" 个页面\");\r\n     \r\n     // args变量的值与“leaving”事件的值相同。\r\n     console.log(\"shown\", args);\r\nJS    \r\n)->shown(...);\r\n```\r\n\r\n### 增加步骤表单\r\n\r\n步骤表单支持所有表单字段。\r\n\r\n```php\r\nuse Dcat\\Admin\\Form;\r\n\r\n\$form->multipleSteps()->add('标题', function (Form\\StepForm \$step) {\r\n\r\n    \$step->text('username')->rules('required');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n#### 监听步骤页面离开事件\r\n\r\n监听当前步骤页面离开事件，支持监听多次。\r\n\r\n```php\r\nuse Dcat\\Admin\\Form;\r\n\r\n\$form->multipleSteps()->add('基本信息', function (Form\\StepForm \$step) {\r\n    ...\r\n    \r\n    \$step->leaving(<<<JS\r\n    \r\n    Dcat.info(\"你将要离开 基本信息 页面\");\r\n    \r\n    // args变量是一个js对象，包含当前事件对象、当前步骤选项、表单对象和表单值等字段。\r\n    console.log(\"离开 基本信息\", args);\r\n    \r\n    // 获取当前事件对象\r\n    var evt = args.event;\r\n    // 获取当前页面的步骤索引\r\n    var index = args.index;\r\n    // 获取步骤表单标题tap对象\r\n    var tab = args.tab;\r\n    // 获取动向是前往上一步还是下一步页面：\"forward\"、\"backward\"\r\n    var direction = args.direction;\r\n    // 获取当前步骤的表单JQ对象\r\n    var \$form = args.form;\r\n    // 获取当前步骤页的表单值\r\n    var formArray = args.formArray;\r\n    \r\n    // 获取指定步骤的表单JQ对象\r\n    var \$firstForm = args.getForm(0);\r\n    // 获取指定步骤的表单值\r\n    var firstFormArray = args.getFormArray(0);\r\n    \r\n    // 停止离开当前页面\r\n    return false;\r\nJS    \r\n    );\r\n    \r\n    // 监听多次\r\n    \$step->leaving(...);\r\n});\r\n```\r\n\r\n#### 监听步骤页面显示事件\r\n\r\n监听当前步骤页面显示事件，支持监听多次。\r\n\r\n```php\r\nuse Dcat\\Admin\\Form;\r\n\r\n\$form->multipleSteps()->add('基本信息', function (Form\\StepForm \$step) {\r\n    ...\r\n    \r\n    \$step->shown(<<<JS\r\n    \r\n    Dcat.info(\"当前步骤是 基本信息\");\r\n    \r\n    // args变量的值与“leaving”事件的值相同。\r\n    console.log(\"显示 基本信息\", args);\r\nJS    \r\n    );\r\n    \r\n    // 监听多次\r\n    \$step->shown(...);\r\n});\r\n```\r\n\r\n### 设置完成页面\r\n\r\n当所有步骤都完成之后会显示完成页面，系统提供一个默认的完成页面，开发者也可以通过以下方法自定义完成页面要显示的内容。\r\n\r\n```php\r\nuse Dcat\\Admin\\Form;\r\n\r\n\$form->multipleSteps()->done(function (Form\\DoneStep \$done) {\r\n    \r\n    // 获取新增ID\r\n    // 由 Repository::store 返回的值\r\n    \$newId = \$done->getNewId();\r\n    \r\n    // 返回你要显示的内容，可以使一个视图也可以是一个字符串。\r\n    return view(...);\r\n});\r\n```", 'order' => 9, 'created_at' => "2024-06-26 14:04:31", 'updated_at' => "2024-06-26 14:04:31", 'slug' => "step-by-step-form"],
            ['id' => 44, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "表单验证", 'content' => "# 表单验证\r\n\r\n### rule\r\n\r\n`model-form`使用laravel的验证规则来验证表单提交的数据：\r\n\r\n```php\r\n\$form->text('title')->rules('required|min:3');\r\n\r\n// 复杂的验证规则可以在回调里面实现\r\n\$form->text('title')->rules(function (Form \$form) {\r\n    \r\n    // 如果不是编辑状态，则添加字段唯一验证\r\n    if (!\$id = \$form->model()->id) {\r\n        return 'unique:users,email_address';\r\n    }\r\n    \r\n});\r\n```\r\n\r\n也可以给验证规则自定义错误提示消息：\r\n\r\n```php\r\n\$form->text('code')->rules('required|regex:/^\\d+\$/|min:10', [\r\n    'regex' => 'code必须全部为数字',\r\n    'min'   => 'code不能少于10个字符',\r\n]);\r\n```\r\n\r\n如果要允许字段为空，首先要在数据库的表里面对该字段设置为`NULL`，然后\r\n\r\n```php\r\n\$form->text('title')->rules('nullable');\r\n```\r\n\r\n更多规则请参考[Validation](https://laravel.com/docs/5.5/validation)。\r\n\r\n### creationRules\r\n\r\n此方法用法和`Form\\Field::rule`用法完全一致，不同的是此方法只有在新增数据时才有效。\r\n\r\n> {tip} 如果调用了`creationRules`方法，则`rule`方法设置的验证规则将会被忽略。\r\n\r\n### updateRules\r\n\r\n此方法用法和`Form\\Field::rule`用法完全一致，不同的是此方法只有在更新数据时才有效。\r\n\r\n> {tip} 如果调用了`updateRules`方法，则`rule`方法设置的验证规则将会被忽略。\r\n\r\n\r\n## responseValidationMessages\r\n\r\n通过`Form::responseValidationMessages`方法可以返回自定义验证错误信息，并中断后续逻辑，用法如下：\r\n\r\n```php\r\n// 编辑提交时是“PUT”方法\r\nif (request()->getMethod() == 'PUT') {\r\n    if (...) { // 你的验证逻辑\r\n        \$form->responseValidationMessages('title', 'title格式错误');\r\n        \r\n        // 如有多个错误信息，第二个参数可以传数组\r\n        \$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n    }\r\n}\r\n\r\n\$form->text('title');\r\n\$form->text('content');\r\n```\r\n\r\n也可以在`submitted`事件中使用这个方法\r\n```php\r\n\$form->submitted(function (\$form) {\r\n    if (...) { // 你的验证逻辑\r\n        \$form->responseValidationMessages('title', 'title格式错误');\r\n        \r\n        // 如有多个错误信息，第二个参数可以传数组\r\n        \$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n    }\r\n});\r\n```\r\n\r\n## 前端验证\r\n\r\n系统继承了<a href=\"https://github.com/1000hz/bootstrap-validator\" target=\"_blank\">bootstrap-validator</a>进行前端表单验证，支持H5表单类型的验证。\r\n\r\n> {tip} 不支持H5的浏览器也可以使用前端验证，系统已经做好了兼容。大部分表单都支持前端和后端验证，两者可以同时工作不冲突，少部分表单前端验证无效。\r\n\r\n### H5验证\r\n\r\n#### required\r\n\r\n必填\r\n```php\r\n\$form->text('title')->required();\r\n```\r\n\r\n#### number\r\n\r\n只允许输入数字\r\n```php\r\n\$form->text('age')->type('number');\r\n```\r\n\r\n限制范围\r\n```php\r\n// 只允许输入 10-60 范围内的数字\r\n\$form->text('age')\r\n    ->type('number')\r\n    ->attribute('min', 10)\r\n    ->attribute('max', 60);\r\n```\r\n\r\n#### email\r\n\r\n邮箱\r\n```php\r\n\$form->email('email');\r\n```\r\n\r\n#### url\r\n\r\n链接\r\n```php\r\n\$form->text('website')->type('url');\r\n```\r\n\r\n### 其它\r\n\r\n#### minLength\r\n\r\n限制字符最小长度\r\n\r\n```php\r\n\$form->text('title')->minLength(20);\r\n\r\n// 设置错误信息\r\n\$form->text('title')->minLength(20, '最少输入20个字符');\r\n```\r\n\r\n#### maxLength\r\n\r\n限制字符最大长度\r\n```php\r\n\$form->text('title')->maxLength(50);\r\n\r\n// 设置错误信息\r\n\$form->text('title')->maxLength(50, '不能超过50个字符');\r\n```\r\n\r\n#### same\r\n\r\n限制当前字段值必须与给定字段的值相等，常用于密码确认\r\n\r\n```php\r\n\$form->password('password');\r\n\r\n\$form->password('password_confirm')->same('password');\r\n\r\n// 设置错误信息\r\n\$form->password('password_confirm')->same('password', '两次密码输入不一致');\r\n```\r\n\r\n### 自定义\r\n\r\n开发者可以通过以下方法自定义前端验证规则。\r\n\r\n\r\n\r\n在 `app/Admin/bootstrap.php` 中添加以下代码。\r\n```php\r\nuse Dcat\\Admin\\Form\\Field;\r\n\r\nField\\Text::macro('len', function (int \$length, ?string \$error = null) {\r\n    // 前端验证逻辑扩展\r\n    Admin::script(\r\n                <<<'JS'\r\nDcat.validator.extend('len', function (\$el) {\r\n    return \$el.val().length != \$el.attr('data-len');\r\n});\r\nJS\r\n        );\r\n\r\n        // 同时添加后端验证逻辑，这个可以看需要\r\n        \$this->rules('size:'.\$length);\r\n\r\n        return \$this->attribute([\r\n            'data-len'       => \$length,\r\n            'data-len-error' => str_replace(\r\n                [':attribute', ':len'],\r\n                [\$this->label, \$length],\r\n                \$error ?: \"只能输入:len个字符\"\r\n            ),\r\n        ]);\r\n});\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$form->text('name')->len(10);\r\n```", 'order' => 10, 'created_at' => "2024-06-26 14:05:01", 'updated_at' => "2024-06-26 14:05:01", 'slug' => "form-validation"],
            ['id' => 45, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "工具表单", 'content' => "# 工具表单\r\n\r\n工具表单(`Dcat\\Admin\\Widgets\\Form`)用来构建表单和处理提交数据，可以很方便的独立处理数据，而不需要额外注册路由。\r\n\r\n\r\n### 基本使用\r\n用命令`admin:form`来生成表单类文件：\r\n\r\n```bash\r\nphp artisan admin:form Setting\r\n```\r\n将会生成表单文件`app/Admin/Forms/Setting.php`\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Widgets\\Form;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass Setting extends Form\r\n{\r\n    // 处理表单提交请求\r\n    public function handle(array \$input)\r\n    {\r\n        // dump(\$input);\r\n\r\n        // return \$this->response()->error('Your error message.');\r\n\r\n        return \$this->response()->success('Processed successfully.')->refresh();\r\n    }\r\n\r\n    // 构建表单\r\n    public function form()\r\n    {\r\n        // Since v1.6.5 弹出确认弹窗 \r\n        \$this->confirm('您确定要提交表单吗', 'content');\r\n        \r\n        \$this->text('name')->required();\r\n        \$this->email('email')->rules('email');\r\n    }\r\n\r\n    /**\r\n     * 返回表单数据，如不需要可以删除此方法\r\n     *\r\n     * @return array\r\n     */\r\n    public function default()\r\n    {\r\n        return [\r\n            'name'  => 'John Doe',\r\n            'email' => 'John.Doe@gmail.com',\r\n        ];\r\n    }\r\n}\r\n```\r\n在上面的表单类里面，在`form`方法中构建表单项，使用方法和[数据表单](https://learnku.com/docs/dcat-admin/1.x/basic-use/8089)一致，`default`方法用来给这个表单项设置默认数据。\r\n\r\n在页面中填入数据提交表单之后，请求会进入到`handle`方法中，在这里可以加入你的数据处理逻辑，处理完成之后可以通过`success`或`error`方法响应数据到前端：\r\n```php\r\n    public function handle(array \$input)\r\n    {\r\n        // \$input是你接收到的表单数据\r\n        // 在这里可以写你的处理逻辑\r\n\r\n\r\n        // 第一个参数是响应的成功信息，第二个参数是要跳转的路由\r\n        return \$this->response()->success('Processed successfully.')->refresh();\r\n    }\r\n```\r\n\r\n然后按照下面的方法将上面的表单放到你的页面中：\r\n\r\n```php\r\n<?php\r\n\r\nuse App\\Admin\\Forms\\Setting;\r\nuse App\\Http\\Controllers\\Controller;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass UserController extends Controller\r\n{\r\n    public function setting(Content \$content)\r\n    {\r\n        return \$content\r\n            ->title('网站设置')\r\n            ->body(new Card(new Setting()));\r\n    }\r\n}\r\n```\r\n\r\n### 弹出确认弹窗\r\n\r\n第二个参数可忽略\r\n\r\n```php\r\n\$this->confirm('title', 'content');\r\n```\r\n\r\n\r\n### 响应方法\r\n参考[动作以及表单响应](https://learnku.com/docs/dcat-admin/2.x/action-and-form-response/9690)章节\r\n\r\n\r\n\r\n### 自定义表单保存的后续行为\r\n\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Widgets\\Form;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass Setting extends Form\r\n{\r\n    ...\r\n    \r\n    /**\r\n \t * 设置表单保存成功后执行的JS\r\n \t * \r\n\t * @return string|void\r\n\t */\r\n\tprotected function savedScript()\r\n\t{\r\n\t    return <<<JS\r\n\t\t// data 为接口返回数据\r\n\t\tif (! data.status) {\r\n\t\t\tDcat.error(data.message);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tDcat.success(data.message);\r\n\r\n\t\tif (data.redirect) {\r\n\t\t\tDcat.reload(data.redirect)\r\n\t\t}\r\n\r\n\t\t// 中止后续逻辑（默认逻辑）\r\n\t\treturn false;\r\nJS;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置表单保存失败后执行的JS\r\n\t * \r\n\t * @return string|void\r\n\t */\r\n\tprotected function errorScript()\r\n\t{\r\n\t\treturn <<<JS\r\n\t\tvar errorData = JSON.parse(response.responseText);\r\n\t\t\r\n\t\tif (errorData) {\r\n\t\t\tDcat.error(errorData.message);\r\n\t\t} else {\r\n\t\t\tconsole.log('提交出错', response.responseText);\r\n\t\t}\r\n\t\t\r\n\t\t// 终止后续逻辑执行（默认逻辑）\r\n\t\treturn false;\r\nJS;\r\n\t}\r\n}\r\n```\r\n\r\n\r\n<a name=\"layout\"></a>\r\n### 布局\r\n\r\n\r\n`column`多列布局\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass Setting extends Form\r\n{\r\n    public function form()\r\n    {\r\n        \$this->column(6, function () {\r\n            \$this->text('text1');\r\n            \r\n            ...\r\n        });\r\n        \r\n        \$this->column(6, function () {\r\n            \$this->text('text2');\r\n            \r\n            ...\r\n        });\r\n    }    \r\n}\r\n```\r\n\r\n`tab`选项卡布局\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass Setting extends Form\r\n{\r\n    public function form()\r\n    {\r\n        \$this->tab('选项卡1', function () {\r\n            \$this->text('text1');\r\n            \r\n            ...\r\n        });\r\n        \r\n        \$this->tab('选项卡2', function () {\r\n            \$this->text('text2');\r\n            \r\n            ...\r\n        });\r\n    }    \r\n}\r\n```\r\n\r\n`row`多行布局\r\n```php\r\npublic function form()\r\n{\r\n    \$this->row(function (\$row) {\r\n        \$row->width(3)->text('text1');\r\n        \r\n        ...\r\n    });\r\n    \r\n    \$this->row(function (\$row) {\r\n        \$row->width(3)->text('text2');\r\n        \r\n        ...\r\n    });\r\n} \r\n```\r\n\r\n\r\n<a name=\"modal\"></a>\r\n### 在弹窗中显示\r\n\r\n> Since `v1.7.0` \r\n\r\n#### 基本用法\r\n\r\n使用命令生成工具表单`php artisan admin:form ResetPassword`，然后修改表单文件如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass ResetPassword extends Form\r\n{\r\n    // 处理请求\r\n    public function handle(array \$input)\r\n    {\r\n        \$password = \$input['password'] ?? null;\r\n\r\n        // 逻辑操作\r\n\r\n        return \$this->response()->success('密码修改成功');\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        \$this->password('password')->required();\r\n        // 密码确认表单\r\n        \$this->password('password_confirm')->same('password');\r\n    }\r\n\r\n    // 返回表单数据，如不需要可以删除此方法\r\n    public function default()\r\n    {\r\n        return [\r\n            'password'         => '',\r\n            'password_confirm' => '',\r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\nuse App\\Admin\\Forms\\ResetPassword;\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\n\r\n\$modal = Modal::make()\r\n\t->lg()\r\n\t->title('修改密码')\r\n\t->body(ResetPassword::make())\r\n\t->button('修改密码');\r\n```\r\n\r\n#### 异步加载\r\n\r\n只需要让`Form`表单类实现`Dcat\\Admin\\Contracts\\LazyRenderable`接口即可支持异步渲染功能，修改上面创建的工具表单类如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Widgets\\Form;\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\n\r\nclass ResetPassword extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget; \r\n    \r\n    // 处理请求\r\n\tpublic function handle(array \$input)\r\n\t{\r\n\t    // 获取外部传递参数\r\n\t    \$id = \$this->payload['id'] ?? null;\r\n\t    \r\n\t\t\$password = \$input['password'] ?? null;\r\n\r\n\t\t// 逻辑操作\r\n\r\n\t\treturn \$this->response()->success('密码修改成功');\r\n\t}\r\n\r\n\tpublic function form()\r\n\t{\r\n\t    // 获取外部传递参数\r\n\t\t\$id = \$this->payload['id'] ?? null;\r\n\t    \r\n\t\t\$this->password('password')->required();\r\n\t\t// 密码确认表单\r\n\t\t\$this->password('password_confirm')->same('password');\r\n\t}\r\n\r\n\t// 返回表单数据，如不需要可以删除此方法\r\n\tpublic function default()\r\n\t{\r\n\t    // 获取外部传递参数\r\n\t\t\$id = \$this->payload['id'] ?? null;\r\n\t    \r\n\t\treturn [\r\n\t\t\t'password'         => '',\r\n\t\t\t'password_confirm' => '',\r\n\t\t];\r\n\t}\r\n}\r\n```\r\n\r\n使用代码与上面基本一致，并且我们可以用`payload`方法往表单里面传递自定义参数\r\n\r\n```php\r\nuse App\\Admin\\Forms\\ResetPassword;\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\n\r\n\$modal = Modal::make()\r\n\t->lg()\r\n\t->title('修改密码')\r\n\t->body(ResetPassword::make()->payload(['id' => '...'])) // 传递自定义参数\r\n\t->button('修改密码');\r\n```\r\n\r\n\r\n\r\n#### 表格行操作弹窗\r\n\r\n\r\n下面通过一个数据表格修改密码的行操作功能来展示弹窗结合工具表单的用法：\r\n\r\n\r\n使用命令生成工具表单`php artisan admin:form ResetPassword`，然后修改表单文件如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Models\\Administrator;\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Widgets\\Form;\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\n\r\nclass ResetPassword extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget; // 使用异步加载功能\r\n    \r\n    // 处理请求\r\n    public function handle(array \$input)\r\n    {\r\n        // 获取外部传递参数\r\n        \$id = \$this->payload['id'] ?? null;\r\n        \r\n        // 表单参数\r\n        \$password = \$input['password'] ?? null;\r\n\r\n        if (! \$id) {\r\n            return \$this->response()->error('参数错误');\r\n        }\r\n\r\n        \$user = Administrator::query()->find(\$id);\r\n\r\n        if (! \$user) {\r\n            return \$this->response()->error('用户不存在');\r\n        }\r\n\r\n        \$user->update(['password' => bcrypt(\$password)]);\r\n\r\n        return \$this->response()->success('密码修改成功');\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        // 获取外部传递参数\r\n\t\t//\$id = \$this->payload['id'] ?? null;\r\n        \r\n        \$this->password('password')->required();\r\n        // 密码确认表单\r\n        \$this->password('password_confirm')->same('password');\r\n    }\r\n\r\n    // 返回表单数据，如不需要可以删除此方法\r\n    public function default()\r\n    {\r\n        return [\r\n            'password'         => '',\r\n            'password_confirm' => '',\r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n然后运行`php artisan admin:action`命令，选择选项`2`，生成数据表格行操作类，并修改如下：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Grid;\r\n\r\nuse App\\Admin\\Forms\\ResetPassword as ResetPasswordForm;\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\nuse Dcat\\Admin\\Grid\\RowAction;\r\n\r\nclass ResetPassword extends RowAction\r\n{\r\n    protected \$title = '修改密码';\r\n    \r\n    public function render()\r\n    {\r\n        // 实例化表单类并传递自定义参数\r\n        \$form = ResetPasswordForm::make()->payload(['id' => \$this->getKey()]);\r\n        \r\n        return Modal::make()\r\n        \t->lg()\r\n        \t->title(\$this->title)\r\n        \t->body(\$form)\r\n        \t->button(\$this->title);\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\nuse App\\Admin\\Actions\\Grid\\ResetPassword;\r\n\r\n\$grid->actions([new ResetPassword()]);\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/4bfa244ec40c9ed0563d3d760ecec7f7667bafbd89f46.png)\r\n\r\n\r\n<a name=\"batch-modal\"></a>\r\n#### 表格批量操作弹窗\r\n\r\n如果你想在批量操作按钮中使用表单弹窗，可以参考以下例子：\r\n\r\n\r\n这里我们仍然沿用上面用到的`App\\Admin\\Forms\\ResetPassword`表单，并修改如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Models\\Administrator;\r\nuse Dcat\\Admin\\Widgets\\Form;\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\n\r\nclass ResetPassword extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget;\r\n    \r\n    // 处理请求\r\n    public function handle(array \$input)\r\n    {\r\n\t    // id转化为数组\r\n\t    \$id = explode(',', \$input['id'] ?? null);\r\n\t    \$password = \$input['password'] ?? null;\r\n\r\n\t    if (! \$id) {\r\n\t\t    return \$this->response()->error('参数错误');\r\n\t    }\r\n\r\n\t    \$users = Administrator::query()->find(\$id);\r\n\r\n\t    if (\$users->isEmpty()) {\r\n\t\t    return \$this->response()->error('用户不存在');\r\n\t    }\r\n\r\n\t    // 这里改为循环批量修改\r\n\t    \$users->each(function (\$user) use (\$password) {\r\n\t \t    \$user->update(['password' => bcrypt(\$password)]);\r\n\t    });\r\n\r\n\t    return \$this->response()->success('密码修改成功');\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        \$this->password('password')->required();\r\n        // 密码确认表单\r\n        \$this->password('password_confirm')->same('password');\r\n   \r\n        // 设置隐藏表单，传递用户id\r\n        \$this->hidden('id')->attribute('id', 'reset-password-id');\r\n    }\r\n   \r\n    // 返回表单数据，如不需要可以删除此方法\r\n    public function default()\r\n    {\r\n        return [\r\n            'password'         => '',\r\n            'password_confirm' => '',\r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n然后运行`php artisan admin:action`命令，选择选项`1`，生成数据表格批量操作类，并修改如下：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Grid;\r\n\r\nuse App\\Admin\\Forms\\ResetPassword as ResetPasswordForm;\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\nuse Dcat\\Admin\\Grid\\BatchAction;\r\n\r\nclass BatchResetPassword extends BatchAction\r\n{\r\n    protected \$title = '修改密码';\r\n    \r\n    public function render()\r\n    {\r\n        // 实例化表单类\r\n\t\t\$form = ResetPasswordForm::make();\r\n\t\t\r\n\t\treturn Modal::make()\r\n\t\t\t->lg()\r\n\t\t\t->title(\$this->title)\r\n\t\t\t->body(\$form)\r\n\t\t\t// 因为此处使用了表单异步加载功能，所以一定要用 onLoad 方法\r\n\t\t\t// 如果是非异步方式加载表单，则需要改成 onShow 方法\r\n\t\t\t->onLoad(\$this->getModalScript())\r\n\t\t\t->button(\$this->title);\r\n    }\r\n\r\n    protected function getModalScript()\r\n    {\r\n        // 弹窗显示后往隐藏的id表单中写入批量选中的行ID\r\n        return <<<JS\r\n// 获取选中的ID数组\r\nvar key = {\$this->getSelectedKeysScript()}\r\n\r\n\$('#reset-password-id').val(key);\r\nJS;\r\n\t}\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\nuse App\\Admin\\Actions\\Grid\\BatchResetPassword;\r\n\r\n\$grid->batchActions([new BatchResetPassword()]);\r\n```", 'order' => 11, 'created_at' => "2024-06-26 14:06:03", 'updated_at' => "2024-06-26 14:06:03", 'slug' => "tools-form"],
            ['id' => 46, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "事件以及表单响应", 'content' => "# 表单回调\r\n\r\n`Form`目前提供了下面几个方法来接收回调函数：\r\n\r\n### creating\r\n\r\n在新增页面调用（非提交操作）\r\n\r\n```php\r\n\$form->creating(function (Form \$form) {\r\n    if (...) { // 验证逻辑\r\n\t\t\$form->responseValidationMessages('title', 'title格式错误');\r\n\t\t\r\n\t\t// 如有多个错误信息，第二个参数可以传数组\r\n\t\t\$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n\t}\r\n});\r\n```\r\n\r\n### editing\r\n\r\n在编辑页面调用（非提交操作）\r\n\r\n```php\r\n\$form->editing(function (Form \$form) {\r\n    if (...) { // 验证逻辑\r\n\t\t\$form->responseValidationMessages('title', 'title格式错误');\r\n\t\t\r\n\t\t// 如有多个错误信息，第二个参数可以传数组\r\n\t\t\$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n\t}\r\n});\r\n```\r\n\r\n### submitted\r\n\r\n在表单提交前调用，在此事件中可以修改、删除用户提交的数据或者中断提交操作\r\n\r\n```php\r\n\$form->submitted(function (Form \$form) {\r\n    // 获取用户提交参数\r\n    \$title = \$form->title;\r\n    \r\n    // 上面写法等同于\r\n    \$title = \$form->input('title');\r\n    \r\n    // 删除用户提交的数据\r\n    \$form->deleteInput('title');\r\n    \r\n    // 中断后续逻辑\r\n    return \$form->response()->error('服务器出错了~');\r\n});\r\n```\r\n\r\n### saving\r\n保存前回调，在此事件中可以修改、删除用户提交的数据或者中断提交操作\r\n\r\n```php\r\n\$form->saving(function (Form \$form) {\r\n    // 判断是否是新增操作\r\n    if (\$form->isCreating()) {\r\n    \r\n    }\r\n    \r\n    // 删除用户提交的数据\r\n    \$form->deleteInput('title');\r\n    \r\n    // 中断后续逻辑\r\n    return \$form->response()->error('服务器出错了~');\r\n});\r\n```\r\n\r\n### saved\r\n\r\n保存后回调，此事件新增和修改操作共用，通过第二个参数`\$result`可以判断数据是否保存成功。\r\n\r\n> {tip} 新增页面下，`\$result`的值是新增记录的自增ID\r\n\r\n```php\r\n\$form->saved(function (Form \$form, \$result) {\r\n    // 判断是否是新增操作\r\n    if (\$form->isCreating()) {\r\n    \t// 自增ID\r\n    \t\$newId = \$result;\r\n    \t// 也可以这样获取自增ID\r\n    \t\$newId = \$form->getKey();\r\n    \t\r\n    \tif (! \$newId) {\r\n    \t\treturn \$form->error('数据保存失败');\r\n    \t}\r\n    \t\r\n    \treturn;\r\n    }\r\n    \r\n    // 修改操作\r\n});\r\n```\r\n> {tip} `\$form->repository()->model()`为当前新增或编辑后的eloquent\r\n\r\n```php\r\n\$form->saved(function (Form \$form, \$result) {\r\n    // 在表單保存後獲取eloquent\r\n    \$form->model()->update(['data' => 'new']);\r\n});\r\n```\r\n\r\n### deleting\r\n\r\n删除前回调\r\n\r\n```php\r\n\$form->deleting(function (Form \$form) {\r\n    // 获取待删除行数据，这里获取的是一个二维数组\r\n\t\$data = \$form->model()->toArray();\r\n});\r\n```\r\n\r\n### deleted\r\n\r\n删除后回调，通过第二个参数`\$result`可以判断数据是否删除成功。\r\n\r\n```php\r\n\$form->deleted(function (Form \$form, \$result) {\r\n\t// 获取待删除行数据，这里获取的是一个二维数组\r\n\t\$data = \$form->model()->toArray();\r\n\t\r\n\t// 通过 \$result 可以判断数据是否删除成功\r\n\tif (! \$result) {\r\n\t\treturn \$form->response()->error('数据删除失败');\r\n\t}\r\n\r\n    // 返回删除成功提醒，此处跳转参数无效\r\n    return \$form->response()->success('删除成功');\r\n});\r\n```\r\n\r\n### uploading\r\n\r\n图片、文件上传事件\r\n\r\n> {tip} 文件上传是一个独立的api请求，这个事件内`redirect`方法是无效的。\r\n\r\n```php\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Form\\Field;\r\nuse Dcat\\Admin\\Contracts\\UploadField as UploadFieldInterface;\r\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\r\n\r\n\$form->uploading(function (Form \$form, UploadFieldInterface \$field, UploadedFile \$file) {\r\n\t// \$file 即是当前上传的完整文件\r\n\t\r\n\t/* @var Field \$field */\r\n\t// 获取文件上传字段名称\r\n\t\$column = \$field->column();\r\n});\r\n```\r\n\r\n### uploaded\r\n\r\n图片、文件上传完毕事件\r\n\r\n> 文件上传是一个独立的api请求，这个事件内`redirect`方法是无效的。\r\n\r\n```php\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Form\\Field;\r\nuse Dcat\\Admin\\Contracts\\UploadField as UploadFieldInterface;\r\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\r\n\r\n\$form->uploaded(function (Form \$form, UploadFieldInterface \$field, UploadedFile \$file, \$response) {\r\n\t// \$file 即是当前上传的完整文件\r\n\t\r\n\t/* @var Field \$field */\r\n\t// 获取文件上传字段名称\r\n\t\$column = \$field->column();\r\n\t\r\n\t\$response = \$response->toArray();\r\n\t\r\n\t// 文件上传成功\r\n\tif (\$response['status']) {\r\n\t\t// 文件访问地址\r\n\t\t\$url = \$response['data']['url'];\r\n\t}\r\n});\r\n```\r\n\r\n### 获取模型中的数据\r\n```php\r\n\$form->saved(function (Form \$form) {\r\n\r\n    \$id = \$form->getKey();\r\n\r\n    \$username = \$form->model()->username;\r\n    \r\n    // 获取最终保存的数组\r\n    \$updates = \$form->updates();\r\n});\r\n```\r\n\r\n### 修改或删除用户提交的数据\r\n\r\n此功能在`saving`和`submitted`事件中有效\r\n\r\n```php\r\n\$form->select('author_id');\r\n\r\n\$form->saving(function (Form \$form) {\r\n    // 修改用户提交的数据\r\n    \$form->author_id = 1;\r\n    \r\n    // 删除、忽略用户提交的数据\r\n    \$form->deleteInput('author_id');  \r\n});\r\n```\r\n\r\n### 修改模型中的数据\r\n修改模型中的数据需要配合隐藏表单使用。举例：\r\n```php\r\n\$form->hidden('author_id');\r\n\r\n\$form->saving(function (Form \$form) {\r\n\r\n    \$form->author_id = 1;\r\n});\r\n```\r\n\r\n### 表单响应\r\n\r\n> 此方法在`creating`、`editing`事件中均不可用。\r\n\r\n详细用法请参考文档 [动作和表单响应](https://learnku.com/docs/dcat-admin/2.x/action-and-form-response/9690) 章节。\r\n\r\n\r\nredirect（局部刷新/单页刷新）\r\n```php\r\n// 跳转并提示成功信息\r\n\$form->saved(function (Form \$form) {\r\n    return \$form->response()->success('保存成功')->redirect('auth/user');\r\n});\r\n\r\n// 跳转并提示错误信息\r\n\$form->saved(function (Form \$form) {\r\n    return \$form->response()->error('系统错误')->redirect('auth/user');\r\n});\r\n```\r\n\r\n仅返回错误信息但不跳转\r\n\r\n```php\r\n\$form->saving(function (Form \$form) {\r\n    return \$form->response()->error('系统异常');\r\n});\r\n```\r\n也可以通过抛出异常的形式展示错误信息\r\n\r\n```php\r\n\$form->submitted(function (\$form) {\r\n    throw new \\Exception('禁止访问');\r\n});\r\n```\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/89a2930d3f4a9dea6ed3fa741ac0a8d2667bb00b44bf8.png)\r\n\r\n\r\n### 返回字段验证出错信息\r\n\r\n通过`responseValidationMessages`方法可以很方便的返回字段验证出错信息，而不需要使用`Laravel validation`功能。\r\n\r\n普通使用\r\n```php\r\nprotected function form()\r\n{\r\n\treturn Form::make(new Model(), function (Form \$form) {\r\n\t\tif (...) { // 验证逻辑\r\n\t\t\t\$form->responseValidationMessages('title', 'title格式错误');\r\n\t\t\t\r\n\t\t\t// 如有多个错误信息，第二个参数可以传数组\r\n\t\t\t\$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n\t\t}\r\n\t});\r\n}\r\n```\r\n\r\n在事件中使用\r\n> 此方法仅在`submitted`事件中可用\r\n\r\n```php\r\n\$form->submitted(function (Form \$form) {\r\n\t// 接收表单参数\r\n\t\$title = \$form->title;\r\n\r\n    if (...) { // 验证逻辑\r\n        \$form->responseValidationMessages('title', 'title格式错误');\r\n        \r\n        // 如有多个错误信息，第二个参数可以传数组\r\n        \$form->responseValidationMessages('content', ['content格式错误', 'content不能为空']);\r\n    }\r\n});\r\n```", 'order' => 12, 'created_at' => "2024-06-26 14:07:22", 'updated_at' => "2024-06-26 14:07:22", 'slug' => "event"],
            ['id' => 47, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "初始化", 'content' => "# 表单初始化\r\n\r\n通过`Form::resolving`方法设置的回调函数会在`Dcat\\Admin\\Form`类被实例化时触发；\r\n\r\n通过`Form::composing`方法设置的回调函数会在`render()`方法被调用时（渲染页面时）触发；\r\n\r\n开发者可以在这两个事件中改变`Form`的一些设置或行为，比如需要禁用掉某些操作，可以在`app/Admin/bootstrap.php`加入下面的代码：\r\n\r\n```php\r\nuse Dcat\\Admin\\Form;\r\n\r\nForm::resolving(function (Form \$form) {\r\n     \$form->disableEditingCheck();\r\n    \r\n     \$form->disableCreatingCheck();\r\n    \r\n     \$form->disableViewCheck();\r\n    \r\n     \$form->tools(function (Form\\Tools \$tools) {\r\n          \$tools->disableDelete();\r\n          \$tools->disableView();\r\n          \$tools->disableList();\r\n     });\r\n\r\n});\r\n```\r\n这样就不用在每一个控制器的代码中来设置了。\r\n\r\n如果全局设置后，要在其中某一个表单中开启设置，比如开启显示`继续编辑`的checkbox，在对应的实例上调用`\$form->disableEditingCheck(false);`就可以了", 'order' => 13, 'created_at' => "2024-06-26 14:08:05", 'updated_at' => "2024-06-26 14:08:05", 'slug' => "initialization"],
            ['id' => 48, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "表单布局", 'content' => "# 表单布局\r\n\r\n### 多列布局 (column)\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/bde2b75cecf514acb76eb9872c781f47667bb0a176bb3.png)\r\n\r\n类似于上图的左右两列布局方式，可以参考下面的代码来实现\r\n\r\n```php\r\n// 第一列占据1/2的页面宽度\r\n\$form->column(6, function (Form \$form) {\r\n    \$form->text('name')->required();\r\n    \$form->date('born')->required();\r\n    \$form->select('education')->options([...])->required();\r\n    \$form->text('nation')->required();\r\n    \$form->text('native')->required();\r\n    \$form->text('job')->required();\r\n    \$form->text('code')->required();\r\n    \$form->text('phone')->required();\r\n    \$form->text('work')->required();\r\n    \$form->text('census')->required();\r\n});\r\n\r\n// 第二列占据1/2的页面宽度\r\n\$form->column(6, function (Form \$form) {\r\n    \$form->image('avatar');\r\n    \$form->decimal('wages');\r\n    \$form->decimal('fund');\r\n    \$form->decimal('pension');\r\n    \$form->decimal('fee');\r\n    \$form->decimal('business');\r\n    \$form->decimal('other');\r\n    \$form->text('area')->default(0);\r\n    \$form->textarea('illness');\r\n    \$form->textarea('comment');\r\n});\r\n\r\n// 调整所有表单的宽度\r\n\$form->width(9, 2);\r\n```\r\n\r\n以上布局功能使用了`bootstrap`的栅格布局系统，所有列的宽度总和不得超出`12`，并且也支持在`hasMany`和`array`表单中使用\r\n\r\n```php\r\n\$form->hasMany('jobs', function (\$form) {\r\n     \$form->column(6, function (Form \$form) {\r\n         \$form->text('name')->required();\r\n         \$form->date('born')->required();\r\n     });\r\n     \r\n     \$form->column(6, function (Form \$form) {\r\n         \$form->image('avatar');\r\n         \$form->decimal('wages');\r\n     });\r\n});\r\n```\r\n\r\n\r\n\r\n\r\n### 多行布局 (row)\r\n\r\n使用\r\n```php\r\n\$form->row(function (Form\\Row \$form) {\r\n    \$form->width(4)->text('username')->required();\r\n\t\$form->width(3)->text('title');\r\n\t...\r\n});\r\n\r\n\$form->row(function (Form\\Row \$form) {\r\n\t...\r\n});\r\n\r\n...\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/45f481b11265e6abba75cd4ebd02e454667bb0ae81e2b.png)\r\n\r\n\r\n并且也支持在`hasMany`和`array`表单中使用\r\n\r\n```php\r\n\$form->hasMany('jobs', function (\$form) {\r\n     \$form->row(function (Form\\Row \$form) {\r\n     \t...\r\n     });\r\n     \r\n     \$form->row(function (Form\\Row \$form) {\r\n     \t...\r\n     });\r\n});\r\n```\r\n\r\n设置布局为 `horizontal`\r\n```php\r\n\$form->row(function (Form\\Row \$form) {\r\n\t\$form->horizontal();\r\n\r\n\t...\r\n});\r\n```\r\n\r\n\r\n<a name=\"tab\"></a>\r\n### 选项卡表单 (tab)\r\n\r\n如果表单元素太多,会导致表单页面太长, 这种情况下可以使用`tab`方法来分隔表单:\r\n\r\n```php\r\n\$form->tab('Basic info', function (Form \$form) {\r\n    \r\n    \$form->text('username');\r\n    \$form->email('email');\r\n    \r\n})->tab('Profile', function (Form \$form) {\r\n                       \r\n   \$form->image('avatar');\r\n   \$form->text('address');\r\n   \$form->mobile('phone');\r\n   \r\n})->tab('Jobs', function (Form \$form) {\r\n                         \r\n     \$form->hasMany('jobs', function (\$form) {\r\n         \$form->text('company');\r\n         \$form->date('start_date');\r\n         \$form->date('end_date');\r\n     });\r\n\r\n})\r\n```\r\n\r\n同时，`tab` 布局中也允许嵌套使用`column`和`row`布局\r\n\r\n```php\r\n\$form->tab('Basic info', function (Form \$form) {\r\n    \$form->column(6, function (Form\\BlockForm \$form) {\r\n\t\t\$form->display('id');\r\n\t\t\$form->text('name');\r\n\t});\r\n\r\n\t\$form->column(6, function (Form\\BlockForm \$form) {\r\n\t\t\$form->text('username');\r\n\t});\r\n})\r\n```\r\n\r\n\r\n设置默认显示的 `Tab`\r\n\r\n```php\r\n// 默认显示标题为 标题2 的 Tab\r\n\$form->getTab()->active('标题2');\r\n// 也可以指定偏移量\r\n\$form->getTab()->activeByIndex(1);\r\n\r\n\$form->tab('标题1', function (\$form) {\r\n    ...\r\n});\r\n\r\n\$form->tab('标题2', function (\$form) {\r\n    ...\r\n});\r\n```\r\n\r\n\r\n\r\n#### Fieldset布局\r\n\r\n```php\r\n\$form->fieldset('分组', function (Form \$form) {\r\n    \$form->text('company');\r\n    \$form->date('start_date');\r\n    \$form->date('end_date');\r\n});\r\n```\r\n\r\n如果想要默认收起\r\n\r\n```php\r\n\$form->fieldset('分组', function (Form \$form) {\r\n    ...\r\n})->collapsed();\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/99936be36b612d5e066f568e6e6f0b97667bb0bec49a4.png)\r\n\r\n### 分块布局 (block)\r\n\r\n如果你的表单中字段非常多，那么可以通过以下方式让你的表单分块布局，并且允许嵌套使用`column`和`row`布局\r\n\r\n```php\r\n\$form->block(8, function (Form\\BlockForm \$form) {\r\n\t// 设置标题\r\n    \$form->title('基本设置');\r\n    \r\n    // 显示底部提交按钮\r\n    \$form->showFooter();\r\n    \r\n    // 设置字段宽度\r\n    \$form->width(9, 2);\r\n\r\n    \$form->column(6, function (Form\\BlockForm \$form) {\r\n        \$form->display('id');\r\n        \$form->text('name');\r\n        \$form->email('email');\r\n        \$form->image('avatar');\r\n        \$form->password('password');\r\n    });\r\n\r\n    \$form->column(6, function (Form\\BlockForm \$form) {\r\n        \$form->text('username');\r\n        \$form->email('mobile');\r\n        \$form->textarea('description');\r\n    });\r\n});\r\n\$form->block(4, function (Form\\BlockForm \$form) {\r\n    \$form->title('分块2');\r\n\r\n    \$form->text('nickname');\r\n    \$form->number('age');\r\n    \$form->radio('status')->options(['1' => '默认', 2 => '冻结'])->default(1);\r\n\r\n    \$form->next(function (Form\\BlockForm \$form) {\r\n        \$form->title('分块3');\r\n\r\n        \$form->date('birthday');\r\n        \$form->date('created_at');\r\n    });\r\n});\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/b37ee00afe3585f6f103ac75e833fd63667bb0ca0f556.jpg)", 'order' => 14, 'created_at' => "2024-06-26 14:10:33", 'updated_at' => "2024-06-26 14:10:33", 'slug' => "table-layout"],
            ['id' => 49, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "字段翻译", 'content' => "# 表单字段翻译\r\n\r\n数据表单表单中所有使用到字段的地方都会自动读取语言包中的翻译。\r\n\r\n>  语言包的详细使用方法请参考<a>[多语言](https://learnku.com/docs/dcat-admin/1.x/basic-use/8127)</a>。\r\n\r\n### 语言包名称\r\n语言包名称需要与控制器名相对应，假如控制器名`UserProfileController`，则对应的语言包为`resources/lang/{当前语言}/user-profile.php`（需要转化为小写中划线风格）。\r\n\r\n如果想要更改语言包的名称，可以通过下面两种方式进行更改\r\n\r\n方式1\r\n```php\r\nuse Dcat\\Admin\\Http\\Controllers\\AdminController;\r\n\r\nclass UserController extends AdminController\r\n{\r\n    /**\r\n     * 指定翻译文件名称\r\n     * \r\n     * @var string \r\n     */\r\n    protected \$translation = 'user1';\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n方式2\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nAdmin::translation('user1');\r\n```\r\n\r\n\r\n\r\n### 示例\r\n现在假设语言包`resources/lang/zh_CN/user-profile.php`内容如下：\r\n```php\r\nreturn [\r\n    'fields' => [\r\n        'name'  => '名称',\r\n        'age'   => '年龄',\r\n        'class' => '班级',\r\n    ],\r\n];\r\n```\r\n\r\n控制器`UserProfileController`中设置的`Form`字段会自动读取以上翻译：\r\n```php\r\n// 不设置labael会自动读取语言包翻译\r\n\$form->display('id');\r\n\$form->text('name');\r\n\$form->text('age');\r\n\$form->text('class');\r\n```\r\n\r\n### 公共翻译\r\n当`admin_trans_field`函数找不到当前控制器中对指定字段的翻译时，会去`global.php`中查找。如果某些字段是很多数据表中都有的，可以把这些翻译写在`resources/lang/{当前语言}/global.php`文件中。\r\n```php\r\nreturn [\r\n    // 常用的字段放在 global.php 中可以所有控制器共用。\r\n    'fields' => [\r\n        'id'         => 'ID',\r\n        'created_at' => '创建时间',\r\n        'updated_at' => '更新时间',\r\n    ],\r\n];\r\n```", 'order' => 15, 'created_at' => "2024-06-26 14:11:13", 'updated_at' => "2024-06-26 14:11:13", 'slug' => "field-translation"],
            ['id' => 50, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 3, 'title' => "字段动态显示", 'content' => "# 表单字段动态显示\r\n\r\n\r\n\r\n表单字段动态显示是指，在选择表单项的指定的选项时，联动显示其他的表单项。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/3b65c7998d7e5ae17169a1285266e55d667bb165ac7c7.gif)\r\n\r\n> 此功能在[工具表单](https://learnku.com/docs/dcat-admin/2.x/tools-form/8125)中一样有效\r\n\r\n目前支持的表单联动的组件有：\r\n\r\n- `select`\r\n- `multipleSelect`\r\n- `radio`\r\n- `checkbox`\r\n\r\n## 使用方法\r\n\r\n可以将上面的组件分为单选和多选两种类型，其中`select`、`radio`为单选组件，其它为多选组件\r\n\r\n> 需要注意同个表单中不能出现同名字段，否则前面的字段会被后面的覆盖！\r\n\r\n### 单选组件\r\n\r\n下面的例子中，选择不同的国籍类型，将会切换选择不同的联动表单项：\r\n\r\n```php\r\n\$form->radio('radio')\r\n    ->when([1, 4], function (Form \$form) {\r\n        // 值为1和4时显示文本框\r\n        \$form->text('text1');\r\n        \$form->text('text2');\r\n        \$form->text('text3');\r\n    })\r\n    ->when(2, function (Form \$form) {\r\n        \$form->editor('editor');\r\n    })\r\n    ->when(3, function (Form \$form) {\r\n        \$form->image('image');\r\n    })\r\n    ->options([\r\n        1 => '显示文本框',\r\n        2 => '显示编辑器',\r\n        3 => '显示文件上传',\r\n        4 => '还是显示文本框',\r\n    ])\r\n    ->default(1);\r\n```\r\n\r\n上例中，方法`when(1, \$callback)`等效于`when('=', 1, \$callback)`, 如果用操作符`=`，则可以省略这个参数\r\n\r\n同时也支持这些操作符，`=`、`>`、`>=`、`<`、`<=`、`!=`使用方法如下：\r\n\r\n```php\r\n\$form->radio('check')\r\n    ->when('>', 1, function () {\r\n\r\n    })->when('>=', 2, function () {\r\n\r\n    });\r\n```\r\n\r\n`select` 组件的使用方法和`radio`是一样的。\r\n\r\n另外需要注意的是，如果使用动态显示功能之后表单不能使用`required`方法，应该使用`required_if`代替，如\r\n\r\n```php\r\n\$form->radio('type')\r\n    ->when([1, 4], function (Form \$form) {\r\n        \$form->text('text1')\r\n            ->rules('required_if:type,1,4') // 使用required_if\r\n            ->setLabelClass(['asterisk']); // 显示 * 号\r\n    });\r\n```\r\n\r\n### 多选组件\r\n\r\n多选组件支持两个操作符：`in`、`notIn`\r\n\r\n```php\r\n\$form->checkbox('nationality', '国籍')\r\n    ->options([\r\n        1 => '中国',\r\n        2 => '外国',\r\n    ])->when([1, 2], function (Form \$form) { \r\n\r\n        \$form->text('name', '姓名');\r\n        \$form->text('idcard', '身份证');\r\n\r\n    })->when('notIn', 2, function (Form \$form) { \r\n\r\n        \$form->text('username', '姓名');\r\n        \$form->text('passport', '护照');\r\n\r\n    });\r\n```\r\n\r\n`multipleSelect`组件的使用方法和`checkbox`是一样的。\r\n\r\n\r\n### 布局\r\n\r\n表单动态显示功能支持结合`column`以及`tab`布局功能一起使用，用法如下\r\n\r\n\r\n`tab`布局\r\n```php\r\n\$form->tab('Radio', function (Form \$form) {\r\n    \$form->display('title')->value('单选框动态展示');\r\n\r\n    \$form->radio('radio')\r\n        ->when([1, 4], function (Form \$form) {\r\n            \$form->text('text1');\r\n            \$form->text('text2');\r\n        })\r\n        ->when(2, function (Form \$form) {\r\n            \$form->editor('editor');\r\n        })\r\n        ->options(\$this->options)\r\n        ->default(1);\r\n});\r\n```\r\n\r\n`column`布局\r\n```php\r\n\$form->column(6, function (Form \$form) {\r\n    \$form->radio('radio')\r\n        ->when([1, 4], function (Form \$form) {\r\n            \$form->text('text1');\r\n            \$form->text('text2');\r\n        })\r\n        ->when(2, function (Form \$form) {\r\n            \$form->editor('editor');\r\n        })\r\n        ->options(\$this->options)\r\n        ->default(1);\r\n});\r\n```", 'order' => 16, 'created_at' => "2024-06-26 14:12:56", 'updated_at' => "2024-06-26 14:12:56", 'slug' => "field-dynamic-display"],
            ['id' => 51, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 4, 'title' => "基本使用", 'content' => "# 数据详情基本使用\r\n\r\n`Dcat\\Admin\\Show`用来显示数据详情，先来个例子，数据库中有posts表：\r\n\r\n```sql\r\nCREATE TABLE `posts` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `author_id` int(10) unsigned NOT NULL ,\r\n  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `content` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `rate` int(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `release_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n```\r\n对应的数据模型为`App\\Models\\Post`，数据仓库为`App\\Admin\\Repositories\\Post`，下面的代码可以显示posts表的数据详情：\r\n\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers;\r\n\r\nuse App\\Http\\Controllers\\Controller;\r\nuse App\\Admin\\Repositories\\Post;\r\nuse Dcat\\Admin\\Layout\\Content;\r\nuse Dcat\\Admin\\Show;\r\nuse Dcat\\Admin\\Admin;\r\n\r\nclass PostController extends Controller\r\n{\r\n    public function show(\$id, Content \$content)\r\n    {\r\n        return \$content->header('Post')\r\n            ->description('详情')\r\n            ->body(Show::make(\$id, new Post(), function (Show \$show) {\r\n                \$show->id('ID');\r\n                \$show->title('标题');\r\n                \$show->content('内容');\r\n                \$show->rate();\r\n                \$show->created_at();\r\n                \$show->updated_at();\r\n                \$show->release_at();\r\n            }));\r\n    }\r\n}\r\n```\r\n\r\n## 基本使用方法\r\n\r\n### HTML内容转义(unescape)\r\n为了防止`XSS`攻击, 默认输出的内容都会使用HTML转义，如果你不想转义输出`HTML`，可以调用`unescape`方法：\r\n\r\n```php\r\n\$show->avatar()->unescape()->as(function (\$avatar) {\r\n\r\n    return \"<img src='{\$avatar}' />\";\r\n\r\n});\r\n```\r\n\r\n### 字段宽度\r\n字段宽度默认值为“3”，可以设置1-12之间的数字。\r\n\r\n```php\r\n\$show->created_at->width(4);\r\n```\r\n\r\n### 面板的样式和标题\r\n```php\r\n\$show->panel()\r\n    ->style('danger')\r\n    ->title('post基本信息...');\r\n```\r\nstyle的取值可以是primary、info、danger、warning、default\r\n\r\n### 工具栏\r\n面板右上角默认有三个按钮编辑、删除、列表，可以分别用下面的方式关掉它们：\r\n\r\n```php\r\n\$show->panel()\r\n    ->tools(function (\$tools) {\r\n        \$tools->disableEdit();\r\n        \$tools->disableList();\r\n        \$tools->disableDelete();\r\n        // 显示快捷编辑按钮\r\n        \$tools->showQuickEdit();\r\n    });\r\n```\r\n\r\n#### 自定义复杂工具按钮\r\n\r\n请参考文档[数据详情动作](https://learnku.com/docs/dcat-admin/1.x/data-detail-action/8451)\r\n\r\n### 多列布局\r\n\r\n使用\r\n\r\n> Since `v1.3.4`\r\n\r\n```php\r\n\$show->row(function (Show\\Row \$show) {\r\n    \$show->width(3)->id;\r\n    \$show->width(3)->name;\r\n    \$show->width(5)->email;\r\n});\r\n\r\n\$show->row(function (Show\\Row \$show) {\r\n    \$show->width(5)->email_verified_at;\r\n    \$show->created_at;\r\n    \$show->updated_at;\r\n});\r\n\r\n\$show->row(function (Show\\Row \$show) {\r\n    \$show->width(3)->field('profile.first_name');\r\n    \$show->field('profile.last_name');\r\n    \$show->width(3)->field('profile.postcode');\r\n});\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/1244966e24932193b3150a07241dae3e667bb1b4823f9.png)", 'order' => 1, 'created_at' => "2024-06-26 14:14:26", 'updated_at' => "2024-06-26 14:14:26", 'slug' => "basic-use"],
            ['id' => 52, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 4, 'title' => "字段显示", 'content' => "# 字段显示\r\n\r\n### HTML\r\n\r\n> Since `v1.7.0`\r\n\r\n通过`html`方法可以在详情页插入一段不显示`label`的`HTML`代码\r\n\r\n```php\r\n// 传入字符串\r\n\$show->html('<br/>');\r\n\r\n// 传入视图\r\n\$show->html(view(...));\r\n\r\n// 传入闭包\r\n\$show->html(function () {\r\n\t// 获取字段信息\r\n\t\$id = \$this->id;\r\n\t\$username = \$this->username;\r\n\t\r\n\treturn view(..., ['id' => \$id]);\r\n});\r\n```\r\n\r\n### 分隔线\r\n如果要在字段之间添加一条分隔线：\r\n\r\n```php\r\n\$show->divider();\r\n```\r\n\r\n### 换行\r\n如果要在字段之间使用换行：\r\n\r\n```php\r\n\$show->newline();\r\n```\r\n\r\n### 修改显示内容\r\n用下面的方法修改显示内容\r\n\r\n```php\r\n\$show->title()->as(function (\$title) {\r\n    // 获取当前行的其他字段\r\n    \$username = \$this->username;\r\n\r\n    return \"<{\$title}> {\$username}\";\r\n});\r\n\r\n\$show->contents()->as(function (\$content) {\r\n    return \"<pre>{\$content}</pre>\";\r\n});\r\n```\r\n\r\n### 帮助方法\r\n帮助方法与数据表格字段帮助方法使用一致，可参考[帮助方法](https://learnku.com/docs/dcat-admin/1.x/basic-use/8142#help)。\r\n\r\n\r\n### 内置显示扩展方法\r\n下面是通过as方法内置实现的几个常用的显示样式：\r\n\r\n#### view\r\n`view`方法可以引入一个视图文件。\r\n```php\r\n// 模板中接收以下三个变量：\r\n// name 字段名称\r\n// value 字段值\r\n// model 当前行数据\r\n\$show->content->view('admin.fields.content');\r\n```\r\n\r\n#### explode\r\n`explode`方法可以把字符串分割为数组。\r\n```php\r\n\$show->tag->explode()->label();\r\n\r\n// 可以指定分隔符，默认\",\"\r\n\$show->tag->explode('|')->label();\r\n```\r\n\r\n#### prepend\r\n\r\n`prepend` 方法用于给 `string` 或 `array` 类型的值前面插入内容。\r\n\r\n```php\r\n// 当字段值是一个字符串\r\n\$show->email->prepend('mailto:');\r\n\r\n// 当字段值是一个数组\r\n\$show->arr->prepend('first item');\r\n```\r\n\r\n从`v1.2.5`版本开始，`prepend`方法允许传入闭包参数\r\n```php\r\n\$show->email->prepend(function (\$value, \$original) {\r\n    // \$value 是当前字段值\r\n    // \$original 是当前字段从数据库中查询出来的原始值\r\n    \r\n    // 获取其他字段值\r\n    \$username = \$this->username;\r\n    \r\n    return \"[{\$username}]\";\r\n});\r\n```\r\n\r\n\r\n#### append\r\n\r\n\r\n`append` 方法用于给 `string` 或 `array` 类型的值后面插入内容。\r\n\r\n```php\r\n// 当字段值是一个字符串\r\n\$show->email->append('@gmail.com');\r\n\r\n// 当字段值是一个数组\r\n\$show->arr->append('last item');\r\n```\r\n\r\n从`v1.2.5`版本开始，`append`方法允许传入闭包参数\r\n```php\r\n\$show->email->prepend(function (\$value, \$original) {\r\n    // \$value 是当前字段值\r\n    // \$original 是当前字段从数据库中查询出来的原始值\r\n    \r\n    // 获取其他字段值\r\n    \$username = \$this->username;\r\n    \r\n    return \"[{\$username}]\";\r\n});\r\n```\r\n\r\n#### image\r\n字段avatar的内容是图片的路径或者url，可以将它显示为图片：\r\n\r\n```php\r\n\$show->avatar()->image();\r\n```\r\nimage()方法的参数参考Field::image()\r\n\r\n#### file\r\n字段document的内容是文件的路径或者url，可以将它显示为文件：\r\n\r\n```php\r\n\$show->avatar()->file();\r\n```\r\nfile()方法的参数参考Field::file()\r\n\r\n#### link\r\n字段homepage的内容是url链接，可以将它显示为HTML链接：\r\n\r\n```php\r\n\$show->homepage()->link();\r\n```\r\nlink()方法的参数参考Field::link()\r\n\r\n#### label\r\n将字段tag的内容显示为label：\r\n\r\n```php\r\n\$show->tag()->label();\r\n```\r\nlabel()方法的参数参考Field::label()\r\n\r\n#### badge\r\n将字段rate的内容显示为badge：\r\n\r\n```php\r\n\$show->rate()->badge();\r\n```\r\nbadge()方法的参数参考Field::badge()\r\n\r\n#### using\r\n如果字段gender的取值为f、m，分别需要用女、男来显示\r\n\r\n```php\r\n\$show->gender()->using(['f' => '女', 'm' => '男']);\r\n```\r\n\r\n#### dot\r\n\r\n通过`dot`方法可以在列文字前面加上一个带颜色的圆点\r\n\r\n> `Since v1.2.5` 支持`Dcat\\Admin\\Color`类中内置的所有颜色\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$show->state\r\n\t->using([1 => '未处理', 2 => '已处理', ...])\r\n\t->dot(\r\n\t\t[\r\n\t\t\t1 => 'primary',\r\n\t\t\t2 => 'danger',\r\n\t\t\t3 => 'success',\r\n\t\t\t4 => Admin::color()->info(),\r\n\t\t], \r\n\t    'primary' // 第二个参数为默认值\r\n\t);\r\n```\r\n\r\n#### 显示文件尺寸\r\n如果字段数据是表示文件大小的字节数，可以通过调用filezise方法来显示更有可读性的文字\r\n\r\n```php\r\n\$show->field('file_size')->filesize();\r\n```\r\n这样数值199812019将会显示为190.56 MB", 'order' => 2, 'created_at' => "2024-06-26 14:15:29", 'updated_at' => "2024-06-26 14:15:29", 'slug' => "field-display"],
            ['id' => 53, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 5, 'title' => "基本使用", 'content' => "# 模型树\r\n\r\n这个功能可以实现一个树状组件，可以用拖拽的方式实现数据的层级、排序等操作，下面是基本的用法。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/c642c85fd1addc20faaf8c2f7fe54c17667bb3ad0b115.png)\r\n\r\n\r\n## 表结构和模型\r\n要使用`model-tree`，要遵守约定的表结构：\r\n\r\n> {tip} `parent_id`字段一定要默认为`0`！！！\r\n\r\n```sql\r\nCREATE TABLE `demo_categories` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `parent_id` int(11) NOT NULL DEFAULT '0',\r\n  `order` int(11) NOT NULL DEFAULT '0',\r\n  `title` varchar(50) COLLATE utf8_unicode_ci NOT NULL,\r\n  # 此字段非必须\r\n  # `depth` tinyint(4) COLLATE utf8_unicode_ci NOT NULL DEFAULT 1,\r\n  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\r\n```\r\n上面的表格结构里面有三个必要的字段`parent_id`、`order`、`title`,其它字段没有要求。\r\n\r\n对应的模型为`app/Models/Category.php`:\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models\\Demo;\r\n\r\nuse Dcat\\Admin\\Traits\\ModelTree;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Category extends Model\r\n{\r\n    use ModelTree;\r\n\r\n    protected \$table = 'demo_categories';\r\n}\r\n```\r\n表结构中的三个字段`parent_id`、`order`、`title`的字段名也是可以修改的：\r\n\r\n> {tip} 为了便于阅读，这里不再展示 `Repository` 代码。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models\\Demo;\r\n\r\nuse Dcat\\Admin\\Traits\\ModelTree;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Category extends Model\r\n{\r\n    use ModelTree;\r\n\r\n    protected \$table = 'demo_categories';\r\n    \r\n    // 父级ID字段名称，默认值为 parent_id\r\n    protected \$parentColumn = 'pid';\r\n    \r\n    // 排序字段名称，默认值为 order\r\n    protected \$orderColumn = 'sort';\r\n    \r\n    // 标题字段名称，默认值为 title\r\n    protected \$titleColumn = 'name';\r\n\t\r\n\t// Since v2.1.6-beta，定义depthColumn属性后，将会在数据表保存当前行的层级\r\n\tprotected \$depthColumn = 'depth';\r\n}\r\n```\r\n\r\n## 使用方法\r\n然后就是在页面中使用`model-tree`了：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers\\Demo;\r\n\r\nuse App\\Models\\Category;\r\nuse Dcat\\Admin\\Layout\\Row;\r\nuse Dcat\\Admin\\Layout\\Content;\r\nuse Dcat\\Admin\\Tree;\r\nuse Dcat\\Admin\\Http\\Controllers\\AdminController;\r\n\r\nclass CategoryController extends AdminController\r\n{\r\n    public function index(Content \$content)\r\n    {\r\n        return \$content->header('树状模型')\r\n            ->body(function (Row \$row) {\r\n                \$tree = new Tree(new Category);\r\n                \r\n                \$row->column(12, \$tree);\r\n            });\r\n    }\r\n}\r\n```\r\n可以通过下面的方式来修改行数据的显示：\r\n```php\r\n\$tree = new Tree(new Category);\r\n\r\n\$tree->branch(function (\$branch) {\r\n    \$src = config('admin.upload.host') . '/' . \$branch['logo'] ;\r\n    \$logo = \"<img src='\$src' style='max-width:30px;max-height:30px' class='img'/>\";\r\n\r\n    return \"{\$branch['id']} - {\$branch['title']} \$logo\";\r\n});\r\n```\r\n在回调函数中返回的字符串类型数据，就是在树状组件中的每一行的显示内容，`\$branch`参数是当前行的数据数组。\r\n\r\n### 修改模型查询条件\r\n\r\n如果要修改模型的查询，用下面的方式\r\n```php\r\n\$tree->query(function (\$model) {\r\n    return \$model->where('type', 1);\r\n});\r\n```\r\n\r\n### 限制最大层级数\r\n\r\n默认 `5`\r\n\r\n```php\r\n\$tree->maxDepth(3);\r\n```\r\n\r\n### 展开子节点数据\r\n\r\n\r\n```php\r\n\$tree->expand();\r\n```\r\n### 收起所有子节点数据\r\n\r\n\r\n```php\r\n\$tree->expand(false);\r\n```\r\n\r\n### 快速创建\r\n\r\n默认新增按钮为跳转页面创建表单，使用快速创建可改为异步创建表单\r\n\r\n```php\r\n\$tree->disableCreateButton();\r\n```\r\n\r\n## 自定义行操作\r\n\r\n```php\r\nuse Dcat\\Admin\\Tree;\r\n\r\n\$tree->actions(function (Tree\\Actions \$actions) {\r\n    if (\$actions->row->id > 5) {\r\n        \$actions->disableDelete(); // 禁用删除按钮\r\n    }\r\n\r\n    // 添加新的action\r\n    \$actions->append(...);\r\n});\r\n\r\n// 批量添加action\r\n\$tree->actions([\r\n    new Action1(),\r\n    \"<div>...</div>\",\r\n    ...\r\n]);\r\n```\r\n\r\n自定义复杂操作，请参考文档[模型树动作](https://learnku.com/docs/dcat-admin/1.x/model-tree/8452)\r\n\r\n## 自定义工具栏按钮\r\n\r\n请参考文档[模型树动作](https://learnku.com/docs/dcat-admin/1.x/model-tree/8452)", 'order' => 1, 'created_at' => "2024-06-26 14:22:45", 'updated_at' => "2024-06-26 14:22:45", 'slug' => "basic-use"],
            ['id' => 54, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 4, 'title' => "关联关系", 'content' => "# 关联关系\r\n\r\n## 一对一\r\n`users`表和上面的`posts`表为一对一关联关系，通过`posts.author_id`字段关联，`users`和`post`表结构如下：\r\n\r\n```sql\r\nCREATE TABLE `posts` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `author_id` int(10) unsigned NOT NULL ,\r\n  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `content` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `rate` int(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `release_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `users` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n```\r\n模型定义为：\r\n\r\n```php\r\nclass User extends Model\r\n{\r\n}\r\n\r\nclass Post extends Model\r\n{\r\n    public function author()\r\n    {\r\n        return \$this->belongsTo(User::class, 'author_id');\r\n    }\r\n}\r\n```\r\n数据仓库定义为：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse User as UserModel;\r\n\r\nclass User extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = UserModel::class;\r\n}\r\n```\r\n\r\n那么可以用下面的方式显示`post`所属的用户的详细：\r\n\r\n```php\r\nuse App\\Models\\User;\r\n\r\n\$show->relation('author', function (\$model) {\r\n    return Show::make(\$model->author_id, new User(), function (Show \$show) {\r\n        // 设置路由\r\n\t\t\$show->setResource('/users');\r\n    \r\n        \$show->id();\r\n        \$show->name();\r\n        \$show->email();\r\n    });\r\n});\r\n```\r\n\r\n> 为了能够正常使用这个面板右上角的工具，必须用`setResource`方法设置用户资源的url访问路径。\r\n\r\n如果你的关联模型还需要有其他的条件查询，则可以参考以下方式\r\n```php\r\nuse App\\Models\\User;\r\n\r\n\$show->relation('author', function (\$model) {\r\n    // 模型设置查询条件\r\n    \$userModel = User::where('state', \$model->state);\r\n\r\n    return Show::make(\$model->author_id, \$userModel, function (Show \$show) {\r\n        // 设置路由\r\n\t\t\$show->setResource('/users');\r\n    \r\n        \$show->id();\r\n        \$show->name();\r\n        \$show->email();\r\n    });\r\n});\r\n```\r\n### 简单方式\r\n如果你只是简单的展示关联表信息，也可以这么写\r\n\r\n```php\r\n// 如果你用的是模型，可以这样指定关联关系\r\n\$model = Post::with('author');\r\n\r\n// 如果你用的是数据仓库，可以这样指定关联关系\r\n// \$repository = new Post(['author']);\r\n\r\nreturn Show::make(\$id, \$model, function (Show \$show) {\r\n    \$show->field('author.id', '作者ID');\r\n    \$show->field('author.name', '作者名称');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n如果你的关联模型名称的命名是**驼峰**风格，那么使用的时候需要转化为**下划线**风格命名\r\n\r\n```php\r\n// 注意这里必须使用下划线风格命名，否则将无法显示编辑数据\r\n\$show->field('user_profile.postcode');\r\n\$show->field('user_profile.address');\r\n```\r\n\r\n\r\n\r\n## 一对多\r\n一对多会以[数据表格](https://learnku.com/docs/dcat-admin/1.x/basic-use/8089)的方式呈现，下面是简单的例子\r\n\r\n`posts`表和评论表`comments`为一对多关系(一条post有多条comments)，通过`comments.post_id`字段关联\r\n\r\n```sql\r\nCREATE TABLE `comments` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `post_id` int(10) unsigned NOT NULL,\r\n  `content` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\r\n```\r\n模型定义为：\r\n\r\n```php\r\nclass Post extends Model\r\n{\r\n    public function comments()\r\n    {\r\n        return \$this->hasMany(Comment::class);\r\n    }\r\n}\r\n\r\nclass Comment extends Model\r\n{\r\n}\r\n```\r\n数据仓库定义为：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse Comment as CommentModel;\r\n\r\nclass Comment extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = CommentModel::class;\r\n}\r\n```\r\n\r\n那么评论的显示通过下面的代码实现：\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\Comment;\r\n\r\n\$show->relation('comments', function (\$model) {\r\n    \$grid = new Grid(new Comment);\r\n    \r\n    \$grid->model()->where('post_id', \$model->id);\r\n    \r\n\t// 设置路由\r\n    \$grid->setResource('comments');\r\n\r\n    \$grid->id();\r\n    \$grid->content()->limit(10);\r\n    \$grid->created_at();\r\n    \$grid->updated_at();\r\n\r\n    \$grid->filter(function (\$filter) {\r\n        \$filter->like('content')->width('300px');\r\n    });\r\n    \r\n    return \$grid;\r\n});\r\n```\r\n\r\n注意：为了能够正常使用这个数据表格的功能，必须用`setResource()`方法设置`comments`资源的url访问路径\r\n\r\n## 多对多\r\n\r\n多对多会以[数据表格](model-grid.md)的方式呈现，下面是简单的例子\r\n\r\n角色表`roles`和权限表`permissions`为多对多关系，通过中间表`role_permissions`关联\r\n\r\n```sql\r\nCREATE TABLE `roles` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `slug` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `admin_roles_name_unique` (`name`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n\r\nCREATE TABLE `permissions` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `slug` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `http_method` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\r\n  `http_path` text COLLATE utf8mb4_unicode_ci,\r\n  `order` int(11) NOT NULL DEFAULT '0',\r\n  `parent_id` int(11) NOT NULL DEFAULT '0',\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `admin_permissions_name_unique` (`name`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n\r\nCREATE TABLE `role_permissions` (\r\n  `role_id` int(11) NOT NULL,\r\n  `permission_id` int(11) NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT NULL,\r\n  `updated_at` timestamp NULL DEFAULT NULL,\r\n  KEY `admin_role_permissions_role_id_permission_id_index` (`role_id`,`permission_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n```\r\n模型定义为：\r\n\r\n```php\r\nclass Role extends Model\r\n{\r\n  public function permissions() : BelongsToMany\r\n  {\r\n      return \$this->belongsToMany(Permission::class, 'role_permissions', 'role_id', 'permission_id');\r\n  }\r\n\r\n}\r\n\r\nclass Permission extends Model\r\n{\r\n}\r\n```\r\n数据仓库定义为：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse Permission as PermissionModel;\r\n\r\nclass Permission extends EloquentRepository\r\n{\r\n    protected \$eloquentClass = PermissionModel::class;\r\n}\r\n```\r\n\r\n那么权限的显示通过下面的代码实现：\r\n\r\n```php\r\nuse App\\Admin\\Repositories\\Permission;\r\n\r\n\$show->relation('permissions', function (\$model) {\r\n    \$grid = new Grid(new Permission);\r\n\r\n    \$grid->model()->join('role_permissions', function (\$join) use (\$model) {\r\n        \$join->on('role_permissions.permission_id', 'id')\r\n            ->where('role_id', '=', \$model->id);\r\n    });\r\n\r\n    // 设置路由\r\n    \$grid->setResource('auth/permissions');\r\n\r\n    \$grid->id;\r\n    \$grid->name;\r\n    \$grid->slug;\r\n    \$grid->http_path;\r\n\r\n    \$grid->filter(function (Grid\\Filter \$filter) {\r\n        \$filter->equal('id')->width('300px');\r\n    });\r\n\r\n    return \$grid;\r\n});\r\n```", 'order' => 3, 'created_at' => "2024-06-26 14:54:41", 'updated_at' => "2024-06-26 14:54:41", 'slug' => "relationship"],
            ['id' => 55, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 4, 'title' => "字段显示扩展", 'content' => "# 详情字段显示扩展\r\n\r\n这个功能用来扩展详情字段显示, 在内置的显示方法不满足需求的情况下，可以使用这个功能来实现\r\n\r\n首先定义扩展类：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Extensions\\Show;\r\n\r\nuse Dcat\\Admin\\Show\\AbstractField;\r\n\r\nclass UnSerialize extends AbstractField\r\n{\r\n    // 这个属性设置为false则不会转义HTML代码\r\n    public \$escape = false;\r\n    \r\n    public function render(\$arg = '')\r\n    {\r\n        // 返回任意可被渲染的内容\r\n        return unserialize(\$this->value);\r\n    }\r\n}\r\n```\r\n然后在`app/Admin/bootstrap.php`中注册扩展类\r\n\r\n```php\r\nuse Dcat\\Admin\\Show\\Field;\r\nuse App\\Admin\\Extensions\\Show\\UnSerialize;\r\n\r\nField::extend('unserialize', UnSerialize::class);\r\n```\r\n然后在控制器中使用这个扩展\r\n\r\n```php\r\n\$show->column()->unserialize('xxx');\r\n```\r\n传入unserialize()方法的参数会按顺序传入UnSerialize::render()方法中。\r\n\r\n在父类`Dcat\\Admin\\Show\\AbstractField`中可以看到几个常用的属性\r\n\r\n```php\r\n/**\r\n * Field value.\r\n *\r\n * @var mixed\r\n */\r\nprotected \$value;\r\n\r\n/**\r\n * Current field model.\r\n *\r\n * @var Fluent\r\n */\r\nprotected \$model;\r\n\r\n/**\r\n * If this field show with a border.\r\n *\r\n * @var bool\r\n */\r\npublic \$border = true;\r\n\r\n/**\r\n * If this field show escaped contents.\r\n *\r\n * @var bool\r\n */\r\npublic \$escape = true;\r\n```\r\n其中`\$value`和`\$model`分别是当前字段值和当前详情内容的数据，在`render()`方法中可以用来获取你想要的数据。\r\n\r\n`\$border`用来控制当前显示内容是否需要外边框，`\$escape`分别用来设置当前显示内容要不要HTML转义。", 'order' => 4, 'created_at' => "2024-06-26 14:55:24", 'updated_at' => "2024-06-26 14:55:24", 'slug' => "field-display-extension"],
            ['id' => 56, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 4, 'title' => "初始化", 'content' => "# 数据详情初始化\r\n\r\n通过`Show::resolving`方法设置的回调函数会在`Dcat\\Admin\\Show`类被实例化时触发；\r\n\r\n通过`Show::composing`方法设置的回调函数会在`render()`方法被调用时触发；\r\n\r\n开发者可以在这两个事件中改变`Show`的一些设置或行为，比如需要禁用掉某些操作，可以在`app/Admin/bootstrap.php`加入下面的代码：\r\n\r\n```php\r\nuse Dcat\\Admin\\Show;\r\n\r\nShow::resolving(function (Show \$show) {\r\n\r\n     \$show->showQuickEdit();\r\n   \r\n});\r\n```", 'order' => 5, 'created_at' => "2024-06-26 14:55:50", 'updated_at' => "2024-06-26 14:55:50", 'slug' => "initialization"],
            ['id' => 57, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 4, 'title' => "字段翻译", 'content' => "# 数据详情字段翻译\r\n\r\n与数据表格字段翻译的使用基本一致，可参考[数据表格字段翻译](https://learnku.com/docs/dcat-admin/1.x/field-translation/8104)。", 'order' => 6, 'created_at' => "2024-06-26 14:56:26", 'updated_at' => "2024-06-26 14:56:26", 'slug' => "field-translation"],
            ['id' => 58, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 6, 'title' => "基本使用", 'content' => "# 数据仓库\r\n\r\n\r\n数据仓库(`Repository`)是`Dcat Admin`中对数据增删改查操作接口的具体实现，通过`Repository`的介入可以让页面的构建不再关心数据读写功能的具体实现，开发者通过实现`Repository`接口即可对数据进行读写操作。\r\n\r\n> {tip} 当然为了方便系统也保留了直接使用 `Model` 的功能，底层会自动把`Model`转化为数据仓库实例，毕竟大多数时候直接使用 `Model` 也能满足我们的需求。\r\n\r\n\r\n\r\n数据表格`Grid`、数据表单`Form`、数据详情`Show`、`Tree` 等组件不再直接依赖于`Model`，而是依赖于提供更简单清晰的接口的数据仓库，下面是`Repository`的所有接口：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Dcat\\Admin\\Contracts;\r\n\r\nuse Dcat\\Admin\\Form;\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Show;\r\nuse Illuminate\\Support\\Collection;\r\n\r\ninterface Repository\r\n{\r\n    /**\r\n     * 获取主键名称.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getKeyName();\r\n\r\n    /**\r\n     * 获取创建时间字段.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCreatedAtColumn();\r\n\r\n    /**\r\n     * 获取更新时间字段.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getUpdatedAtColumn();\r\n\r\n    /**\r\n     * 是否使用软删除.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isSoftDeletes();\r\n\r\n    /**\r\n     * 获取Grid表格数据.\r\n     *\r\n     * @param Grid\\Model \$model\r\n     *\r\n     * @return \\Illuminate\\Contracts\\Pagination\\LengthAwarePaginator|Collection|array\r\n     */\r\n    public function get(Grid\\Model \$model);\r\n\r\n    /**\r\n     * 获取编辑页面数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function edit(Form \$form);\r\n\r\n    /**\r\n     * 获取详情页面数据.\r\n     *\r\n     * @param Show \$show\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function detail(Show \$show);\r\n\r\n    /**\r\n     * 新增记录.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function store(Form \$form);\r\n\r\n    /**\r\n     * 查询更新前的行数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function updating(Form \$form);\r\n\r\n    /**\r\n     * 更新数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return bool\r\n     */\r\n    public function update(Form \$form);\r\n\r\n    /**\r\n     * 删除数据.\r\n     *\r\n     * @param Form  \$form\r\n     * @param array \$deletingData\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function delete(Form \$form, array \$deletingData);\r\n\r\n    /**\r\n     * 查询删除前的行数据.\r\n     *\r\n     * @param Form \$form\r\n     *\r\n     * @return array|\\Illuminate\\Contracts\\Support\\Arrayable\r\n     */\r\n    public function deleting(Form \$form);\r\n}\r\n\r\n```\r\n\r\n如果你的数据是多层级结构，则还需要实现以下接口\r\n```php\r\n<?php\r\n\r\nnamespace Dcat\\Admin\\Contracts;\r\n\r\ninterface TreeRepository\r\n{\r\n    /**\r\n     * 获取主键字段名称.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getPrimaryKeyColumn();\r\n\r\n    /**\r\n     * 获取父级ID字段名称.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getParentColumn();\r\n\r\n    /**\r\n     * 获取标题字段名称.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getTitleColumn();\r\n\r\n    /**\r\n     * 获取排序字段名称.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getOrderColumn();\r\n\r\n    /**\r\n     * 保存层级数据排序.\r\n     *\r\n     * @param array \$tree\r\n     * @param int   \$parentId\r\n     */\r\n    public function saveOrder(\$tree = [], \$parentId = 0);\r\n\r\n    /**\r\n     * 设置数据查询回调.\r\n     *\r\n     * @param \\Closure|null \$query\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withQuery(\$queryCallback);\r\n\r\n    /**\r\n     * 获取层级数据.\r\n     *\r\n     * @return array\r\n     */\r\n    public function toTree();\r\n}\r\n```\r\n\r\n## Repository接口\r\n\r\n### getKeyName\r\n此接口要求返回数据的主键字段名称，需要返回`string`类型值。\r\n```php\r\n    public function getKeyName()\r\n    {\r\n        return 'id';\r\n    }\r\n```\r\n\r\n### getCreatedAtColumn\r\n此接口要求返回数据的`created_at`字段名称，如果没有值可以返回空字符串或`null`值。\r\n```php\r\n    // 如果没有值可以返回空字符串或`null`值\r\n    public function getCreatedAtColumn()\r\n    {\r\n        return 'created_at';\r\n    }\r\n```\r\n\r\n### getUpdatedAtColumn\r\n此接口要求返回数据的`updated_at`字段名称，如果没有值可以返回空字符串或`null`值。\r\n```php\r\n    // 如果没有值可以返回空字符串或`null`值\r\n    public function getCreatedAtColumn()\r\n    {\r\n        return 'updated_at';\r\n    }\r\n```\r\n\r\n### isSoftDeletes\r\n此接口要求返回数据是否支持软删除，请返回一个`bool`类型的值。\r\n```php\r\n    public function isSoftDeletes()\r\n    {\r\n        return true;\r\n    }\r\n```\r\n\r\n<a name=\"get\"></a>\r\n### get\r\n此接口要求返回数据表格`Grid`的数据，用于数据表格展示，要求返回一个`array`、`Illuminate\\Support\\Collection`或`LengthAwarePaginator`类型值。\r\n\r\n#### 分页\r\n当数据需要分页时要求返回一个`\\Illuminate\\Contracts\\Pagination\\LengthAwarePaginator`类型值：\r\n```php\r\n    public function get(Grid\\Model \$model)\r\n    {\r\n        // 获取当前页数\r\n        \$currentPage = \$model->getCurrentPage();\r\n        // 获取每页显示行数\r\n        \$perPage = \$model->getPerPage();\r\n\r\n        // 获取筛选参数\r\n        \$city = \$model->filter()->input(Grid\\Filter\\Scope::QUERY_NAME, '广州');\r\n\r\n        \$start = (\$currentPage - 1) * \$perPage;\r\n\r\n        \$client = new \\GuzzleHttp\\Client();\r\n\r\n        \$response = \$client->get(\"{\$this->api}?{\$this->apiKey}&city=\$city&start=\$start&count=\$perPage\");\r\n        \$data = json_decode((string)\$response->getBody(), true);\r\n\r\n        return \$model->makePaginator(\r\n            \$data['total'] ?? 0, // 传入总记录数\r\n            \$data['subjects'] ?? [] // 传入数据二维数组\r\n        );\r\n    }\r\n```\r\n\r\n#### 不分页\r\n如果不需要分页，则直接返回一个`array`或`Illuminate\\Support\\Collection`类型值即可。\r\n```php\r\n    public function get(Grid\\Model \$model)\r\n    {\r\n        return [\r\n            ['id' => 1, 'name' => 'n1'],\r\n            ['id' => 2, 'name' => 'n2']\r\n        ];\r\n    }\r\n```\r\n\r\n注意，`grid`需要禁用分页\r\n```php\r\n\$grid->disablePagination()\r\n```\r\n\r\n### edit\r\n此接口要求返回表单编辑页面的数据，用于显示数据表单编辑页面，需要返回`array`类型值。\r\n```php\r\n    public function edit(Form \$form): array\r\n    {\r\n        // 获取数据主键值\r\n        \$id = \$form->getKey();\r\n    \r\n        return ['id' => 1, 'name' => 'n1'];\r\n    }\r\n```\r\n\r\n### detail\r\n此接口要求返回数据详情页面的数据，用于显示数据详情，需要返回`array`类型值。\r\n```php\r\n    public function detail(Show \$show): array\r\n    {\r\n        // 获取数据主键值\r\n        \$id = \$show->getId();\r\n    \r\n        return ['id' => 1, 'name' => 'n1'];\r\n    }\r\n```\r\n\r\n### store\r\n此接口用于新增一条记录，可以返回`int`、`string`或`bool`类型值。\r\n```php\r\n    public function store(Form \$form)\r\n    {\r\n        // 获取待新增的数据\r\n        \$attributes = \$form->updates();\r\n        \r\n        // 执行你的新增逻辑\r\n    \r\n        // 返回新增记录id或bool值\r\n        return 1;\r\n    }\r\n```\r\n\r\n### updating\r\n此接口用于数据表单修改数据时查询原始记录，需要返回`array`或`Model`类型值。\r\n\r\n> {tip} 此接口只有某些特殊字段会用到，如图片、文件上传字段，当更改了图片或文件时可以根据这个接口查出的数据删除旧文件。所以如果你的表单中没有用到此类特殊字段，此接口可以返回一个空数组。\r\n\r\n```php\r\n    public function updating(Form \$form)\r\n    {\r\n        // 获取数据主键值\r\n        \$id = \$form->getKey();\r\n    \r\n        return ['id' => 1, 'name' => 'n1'];\r\n    }\r\n```\r\n\r\n### update\r\n此接口用于数据表单修改记录，可以返回`int`、`string`或`bool`类型值。\r\n```php\r\n    public function update(Form \$form)\r\n    {\r\n        // 获取待编辑的数据\r\n        \$attributes = \$form->updates();\r\n        \r\n        // 执行你的编辑逻辑\r\n    \r\n        // 返回成功\r\n        return true;\r\n    }\r\n```\r\n\r\n### deleting\r\n此接口用于删除数据时查询原始记录，需要返回二维数组，或Collection model。\r\n\r\n```php\r\n    public function deleting(Form \$form): array\r\n    {\r\n        // 当批量删除时id为多个\r\n        \$id = explode(',', \$form->getKey());\r\n        \r\n        // 执行你的逻辑\r\n    \r\n        // 注意这里需要返回二维数组\r\n        return [\r\n            ['id' => 1, 'name' => 'h1'],\r\n        ];\r\n        \r\n        // 也可以返回collection\r\n        return Model::find(\$id);\r\n    }\r\n```\r\n\r\n\r\n### delete\r\n单行/批量删除数据方法，成功返回`true`，失败返回`false`。\r\n\r\n```php\r\n    public function delete(Form \$form, array \$deletingData)\r\n    {\r\n        // 当批量删除时id为多个\r\n        \$id = explode(',', \$form->getKey());\r\n        \r\n        // \$deletingData 是 getDataWhenDeleting 接口返回的数据\r\n        \r\n        // 执行你的逻辑\r\n    \r\n        return true;\r\n    }\r\n```\r\n\r\n## TreeRepository接口\r\n\r\n### getPrimaryKeyColumn\r\n\r\n此接口用于返回数据的主键字段名称，需要返回`string`类型值。\r\n\r\n```php\r\n    public function getPrimaryKeyColumn()\r\n    {\r\n        return \$this->getKeyName();\r\n    }\r\n```\r\n\r\n### getParentColumn\r\n\r\n此接口用于返回数据的父ID字段名称，需要返回`string`类型值。\r\n\r\n```php\r\n    public function getParentColumn()\r\n    {\r\n        return 'parent_id';\r\n    }\r\n```\r\n\r\n\r\n### getTitleColumn\r\n\r\n此接口用于返回数据标题字段名称，需要返回`string`类型值。\r\n\r\n```php\r\n    public function getTitleColumn()\r\n    {\r\n        return 'title';\r\n    }\r\n```\r\n\r\n### getOrderColumn\r\n\r\n此接口用于返回数据排序字段名称，需要返回`string`类型值。\r\n\r\n> {tip} 此字段不是必须的，如果你的数据不支持或不需要排序，请返回空值！\r\n\r\n```php\r\n    public function getOrderColumn()\r\n    {\r\n        return 'order';\r\n    }\r\n```\r\n\r\n### saveOrder\r\n\r\n此接口用于保存层级数据的排序，并且接收两个参数\r\n\r\n+ `\$tree` `array` 此字段是一个已分好层级的数组\r\n+ `\$parentId` `int` 此字段主要用于递归时传递父ID使用\r\n\r\n> {tip} 如果你的数据不支持 `MySQL`，可参考 `Dcat\\Admin\\Traits\\ModelTree::saveOrder` 方法自行实现。\r\n\r\n```php\r\n\$tree = [\r\n\t[\r\n\t\t'id'        => 1,\r\n\t\t'title'     => 'title',\r\n\t\t'parent_id' => 0,\r\n\t\t\r\n\t\t'children' => [\r\n\t\t\t[\r\n\t\t\t\t'id'        => 2,\r\n\t\t\t\t'title'     => 'child1',\r\n\t\t\t\t'parent_id' => 1,\r\n\t\t\t],\r\n\t\t\t[\r\n\t\t\t\t'id'        => 3,\r\n\t\t\t\t'title'     => 'child2',\r\n\t\t\t\t'parent_id' => 1,\r\n\t\t\t],\r\n\t\t],\r\n\t]\r\n];\r\n\r\n// 保存排序，内层逻辑请自行实现\r\n\$repository->saveOrder(\$tree);  \r\n```\r\n\r\n### withQuery\r\n\r\n此接口需结合 `toTree` 接口使用，接收一个参数：主要用于设置数据查询操作的相关回调或参数。\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Contracts\\Repository;\r\nuse Dcat\\Admin\\Contracts\\TreeRepository;\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\nclass Category implements Repository, TreeRepository\r\n{\r\n    protected \$queryCallbacks = [];\r\n    \r\n    public function withQuery(\$queryCallback)\r\n    {\r\n        \$this->queryCallbacks[] = \$queryCallback;\r\n        \r\n        return \$this;\r\n\t}\r\n\t\r\n\tpublic function toTree()\r\n\t{\r\n\t    // 这里演示的代码只是为了说明 withQuery 方法的作用\r\n\t    \$client = ...;\r\n\t    \r\n\t    foreach (\$this->queryCallbacks as \$callback) {\r\n\t    \t\$callback(\$client);\r\n\t    }\r\n\t    \r\n\t    return Helper::buildNestedArray(\$client->get());\r\n\t}\r\n}   \r\n```\r\n\r\n### toTree\r\n\r\n此接口主要用于查询数据并分好层级返回，需要返回 `array` 类型值。\r\n\r\n```php\r\n\tpublic function toTree()\r\n\t{\r\n\t    \$client = ...;\r\n\t    \r\n\t    foreach (\$this->queryCallbacks as \$callback) {\r\n\t    \t\$callback(\$client);\r\n\t    }\r\n\t    \r\n\t    return Helper::buildNestedArray(\$client->get());\r\n\t}\r\n```\r\n\r\n## 模型\r\n`Dcat Admin`已经内置了对`Eloquent model`的支持，如果你的数据源是支持`Model`的，那么只需继承`Dcat\\Admin\\Repositories\\EloquentRepository`类即可实现对数据的`CURD`操作，如：\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\EloquentRepository;\r\nuse App\\Models\\Movie as MovieModel;\r\n\r\nclass Movie extends EloquentRepository\r\n{\r\n    // 这里设置你的模型类名即可\r\n    protected \$eloquentClass = MovieModel::class;\r\n    \r\n    // 通过这个方法可以指定查询的字段，默认\"*\"\r\n    public function getGridColumns()\r\n    {\r\n        return [\$this->getKeyName(), 'name', 'title', 'created_at'];\r\n    }\r\n    \r\n    // 通过这个方法可以指定表单页查询的字段，默认\"*\"\r\n    public function getFormColumns()\r\n    {\r\n        return [\$this->getKeyName(), 'name', 'title', 'created_at'];\r\n    }\r\n    \r\n   // 通过这个方法可以指定数据详情页查询的字段，默认\"*\"\r\n    public function getDetailColumns()\r\n    {\r\n        return ['*'];\r\n    }\r\n    \r\n}\r\n```\r\n\r\n## QueryBuilder\r\n\r\n如果你的数据支持`QueryBuilder`查询，但不方便建模型类（比如需要动态查表数据），则可以继承`Dcat\\Admin\\Repositories\\QueryBuilderRepository`类。\r\n\r\n> {tip} 注意，`QueryBuilderRepository`默认是不支持`Model`的关联模型、软删除、模型树以及字段排序等功能，如果需要这些功能，请自定实现上述相关接口即可。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Repositories;\r\n\r\nuse Dcat\\Admin\\Repositories\\QueryBuilderRepository;\r\n\r\nclass MyRepository extends QueryBuilderRepository\r\n{\r\n    // 设置你的主键名称\r\n    protected \$keyName = 'id';\r\n    \r\n    // 设置创建时间字段\r\n    protected \$createdAtColumn = 'created_at';\r\n    \r\n     // 设置更新时间字段\r\n    protected \$updatedAtColumn = 'updated_at';\r\n    \r\n    // 返回表名\r\n    public function getTable()\r\n    {\r\n        return 'your_table_name';\r\n    }\r\n    \r\n    // 返回你的主键名称\r\n    public function getKeyName()\r\n    {\r\n        return \$this->keyName;\r\n    }\r\n    \r\n    // 通过这个方法可以指定查询的字段，默认\"*\"\r\n    public function getGridColumns()\r\n    {\r\n        return [\$this->getKeyName(), 'name', 'title', 'created_at'];\r\n    }\r\n    \r\n    // 通过这个方法可以指定表单页查询的字段，默认\"*\"\r\n    public function getFormColumns()\r\n    {\r\n        return [\$this->getKeyName(), 'name', 'title', 'created_at'];\r\n    }\r\n    \r\n   // 通过这个方法可以指定数据详情页查询的字段，默认\"*\"\r\n    public function getDetailColumns()\r\n    {\r\n        return ['*'];\r\n    }\r\n}\r\n```", 'order' => 1, 'created_at' => "2024-06-26 14:57:09", 'updated_at' => "2024-06-26 14:57:09", 'slug' => "basic-use"],
            ['id' => 59, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 7, 'title' => "基本使用", 'content' => "# 动作基本使用\r\n\r\n开发者通过 `Action` 动作类可以非常方便的开发出一个含有特定功能的操作，可以非常方便的让用户与服务器产生交互。\r\n\r\n例如，页面上需要一个按钮，用户点击之后可以向服务器发起请求，通过弹窗展示当前登录用户的信息，那么这个功能按钮就可以用 `Action` 来开发。\r\n\r\n## 示例\r\n\r\n下面我们就开始开发一个用于查看登录用户信息的按钮：\r\n\r\n\r\n### 使用命令创建Action类\r\n首先需要先创建 `Action` 类，运行命令\r\n\r\n```bash\r\nphp artisan admin:action\r\n```\r\n\r\n运行成功之后会看到命令窗口出现如下信息，让开发者选择一个 `Action` 类的类型，这里我们输入 `0` 就行\r\n\r\n>  `default`类型的动作类，可以用在页面的任意位置。\r\n\r\n```bash\r\n Which type of action would you like to make?:\r\n  [0] default\r\n  [1] grid-batch\r\n  [2] grid-row\r\n  [3] grid-tool\r\n  [4] form-tool\r\n  [5] show-tool\r\n  [6] tree-tool\r\n > 0 # 输入 0\r\n \r\n```\r\n\r\n接着输入 `Action` 类名称，这里需要输入 `大驼峰` 风格的英文字母\r\n\r\n```bash\r\n\r\n Please enter a name of action class:\r\n > ShowCurrentAdminUser\r\n\r\n```\r\n\r\n类名输入完成之后会出现以下信息让开发者输入类的命名空间，默认的命名空间是 `App\\Admin\\Actions`，这里我们直接按回车跳过就行了\r\n\r\n```bash\r\n\r\n Please enter the namespace of action class [App\\Admin\\Actions]:\r\n >\r\n\r\n```\r\n\r\n这样一个 `Action` 类就创建完成了，刚刚创建的类路径是 `app/Admin/Actions/ShowCurrentAdminUser.php`\r\n\r\n\r\n### 使用\r\n\r\n修改 `Action` 类如下\r\n\r\n> 如果你的动作类中需要通过构造方法传递参数，则一定要给构造方法的所有参数都设置一个默认值！\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions;\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Widgets\\Table;\r\nuse Dcat\\Admin\\Actions\\Action;\r\nuse Dcat\\Admin\\Actions\\Response;\r\nuse Dcat\\Admin\\Traits\\HasPermissions;\r\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass ShowCurrentAdminUser extends Action\r\n{\r\n    /**\r\n     * 按钮标题\r\n     *\r\n     * @var string\r\n     */\r\n    protected \$title = '个人信息';\r\n\r\n    /**\r\n     * @var string\r\n     */\r\n    protected \$modalId = 'show-current-user';\r\n\r\n    /**\r\n     * 处理当前动作的请求接口，如果不需要请直接删除\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return Response\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        // 获取当前登录用户模型\r\n        \$user = Admin::user();\r\n        // 这里我们用表格展示模型数据\r\n        \$table = Table::make(\$user->toArray());\r\n\r\n        return \$this->response()\r\n            ->success('查询成功')\r\n            ->html(\$table);\r\n    }\r\n\r\n    /**\r\n     * 处理响应的HTML字符串，附加到弹窗节点中\r\n     *\r\n     * @return string\r\n     */\r\n    protected function handleHtmlResponse()\r\n    {\r\n        return <<<'JS'\r\nfunction (target, html, data) {\r\n    var \$modal = \$(target.data('target')); \r\n    \r\n    \$modal.find('.modal-body').html(html)\r\n    \$modal.modal('show')\r\n} \r\nJS;\r\n    }\r\n\r\n    /**\r\n     * 设置HTML标签的属性\r\n     *\r\n     * @return void\r\n     */\r\n    protected function setupHtmlAttributes()\r\n    {\r\n        // 添加class\r\n        \$this->addHtmlClass('btn btn-primary');\r\n\r\n        // 保存弹窗的ID\r\n        \$this->setHtmlAttribute('data-target', '#'.\$this->modalId);\r\n\r\n        parent::setupHtmlAttributes();\r\n    }\r\n\r\n    /**\r\n     * 设置按钮的HTML，这里我们需要附加上弹窗的HTML\r\n     *\r\n     * @return string|void\r\n     */\r\n    public function html()\r\n    {\r\n        // 按钮的html\r\n        \$html = parent::html();\r\n\r\n        return <<<HTML\r\n{\$html}        \r\n<div class=\"modal fade\" id=\"{\$this->modalId}\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\r\n        <h4 class=\"modal-title\">{\$this->title()}</h4>\r\n      </div>\r\n      <div class=\"modal-body\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\nHTML;\r\n    }\r\n\r\n    /**\r\n     * 确认弹窗信息，如不需要可以删除此方法 \r\n     *\r\n     * @return string|void\r\n     */\r\n    public function confirm()\r\n    {\r\n        // return ['Confirm?', 'contents'];\r\n    }\r\n\r\n    /**\r\n     * 动作权限判断，返回false则表示无权限，如果不需要可以删除此方法\r\n     *\r\n     * @param Model|Authenticatable|HasPermissions|null \$user\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function authorize(\$user): bool\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 通过这个方法可以设置动作发起请求时需要附带的参数，如果不需要可以删除此方法\r\n     *\r\n     * @return array\r\n     */\r\n    protected function parameters()\r\n    {\r\n        return [];\r\n    }\r\n}\r\n```\r\n\r\n\r\n修改完之后就可以开始使用了\r\n\r\n```php\r\n<?php\r\n\r\nuse App\\Admin\\Actions\\ShowCurrentAdminUser;\r\n\r\nclass IndexController\r\n{\r\n\tpublic function index(Content \$content)\r\n\t{\r\n\t    return \$content->body(ShowCurrentAdminUser::make());\r\n\t}\r\n}\r\n```\r\n\r\n效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/71eaa886eb181bf365b62de2b224b20c667bbc04b17df.png)\r\n\r\n\r\n## 属性\r\n\r\n`Dcat\\Admin\\Actions\\Action` 类可用属性说明\r\n\r\n| 属性名      | 类型     | 默认值     | 描述     |\r\n| ---------- | -------- |---------- | -------- |\r\n| title | `string`  |  | 标题 |\r\n| selectorPrefix | `public` `string` | `.admin-action-` | 目标元素的`Css`选择器 |\r\n| method | `string` | `POST`  | 与服务器交互的请求方法 |\r\n| event | `string` | `click` | 目标元素绑定的事件，默认为点击事件 |\r\n| disabled | `bool` | `false` | 是否渲染动作元素，设置`true`则不渲染 |\r\n| allowHandler | `bool` | `true` | 当此属性设置为`false`，则无论`Action`中是否包含`handle`方法都不会向服务器发起请求 |\r\n\r\n\r\n## 方法\r\n\r\n`Dcat\\Admin\\Actions\\Action` 类方法说明\r\n\r\n### 创建实例 (make)\r\n\r\n此方法是一个静态方法，用于实例化动作类\r\n\r\n```php\r\n\$action = MyAction::make(\$param1, \$param2...);\r\n```\r\n\r\n### 处理请求 (handle)\r\n\r\n当`Action`类中包含此方法之时，目标元素会被绑定通过`event`属性设置的事件（默认为`click`）。如果事件被触发，则会向服务器发起请求，而`handle`方法则可以处理并响应此请求。\r\n \r\n> 如果没有此方法，则目标元素不会被绑定事件。\r\n\r\n### 响应 (response)\r\n\r\n此方法用于获取`Response`对象，然后响应前端发起的请求，此方法仅在`handle`方法内有效。\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Actions\\Action;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass MyAction extends Action\r\n{\r\n    public function handle(Request \$request) \r\n    {\r\n        return \$this->response()->success('成功！');\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n#### 展示成功信息\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->success('成功！');\r\n```\r\n\r\n#### 展示错误信息\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->error('出错了！');\r\n```\r\n\r\n#### 展示警告信息\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->warning('警告');\r\n```\r\n\r\n#### 跳转\r\n\r\n此方法接收一个`string`类型参数，可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n```php\r\n\$this->response()->redirect('auth/users');\r\n```\r\n\r\n#### 跳转 (location)\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->location('auth/users');\r\n```\r\n\r\n#### 刷新当前页面\r\n\r\n此方法可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n```php\r\n\$this->response()->refresh();\r\n```\r\n\r\n#### 下载\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->download('auth/users?_export_=1');\r\n```\r\n\r\n#### 返回HTML\r\n\r\n此方法可接收一个`string`、`Renderable`、`Htmlable`类型参数，可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n> 响应的`HTML`字符默认会被置入动作按钮元素上，如果需要自己控制，则覆写[handleHtmlResponse](#handleHtmlResponse)方法即可。\r\n\r\n```php\r\n\$this->response()->html('<a>a标签</a>');\r\n\r\n\$this->response()->html(view('...'));\r\n```\r\n\r\n#### 执行JS代码\r\n\r\n此方法接收一个`string`类型参数，可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n```php\r\n\$this->response()->script(\r\n\t<<<JS\r\nconsole.log('response', response, target);\t\r\nJS\t\r\n);\r\n```\r\n\r\n### 设置请求数据 (parameters)\r\n\r\n通过这个方法可以设置动作发起请求时需要附带的参数\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Actions\\Action;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass MyAction extends Action\r\n{\r\n    public function handle(Request \$request) \r\n    {\r\n        // 接收参数\r\n        \$key1 = \$request->get('key1');\r\n        \$key2 = \$request->get('key2');\r\n        \r\n        return \$this->response()->success('成功！');\r\n    }\r\n    \r\n    public function parameters()\r\n    {\r\n        return [\r\n        \t'key1' => 'value1',\r\n        \t'key2' => 'value2',    \r\n\t\t];\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 确认弹窗 (confirm)\r\n\r\n设置确认信息，此方法要求返回一个`string`类型参数。\r\n\r\n当此方法返回值不为空时会加入确认窗功能，当事件被触发时自动弹出确认框，点击确认后才会进行下一步操作。\r\n\r\n\r\n```php\r\npublic function confirm()\r\n{\r\n\treturn '你确定要删除此行内容吗？';\r\n}\r\n```\r\n\r\n显示弹窗标题和内容\r\n\r\n```php\r\npublic function confirm()\r\n{\r\n\treturn ['你确定要删除此行内容吗？', '弹窗内容'];\r\n}\r\n```\r\n\r\n### 发起请求之前执行的JS代码 (actionScript)\r\n\r\n设置动作执行的前置`js`代码，当按钮绑定的事件被触发后，发起请求之前会执行通过此方法设置的`js`代码，此方法要求返回一个`js`的匿名函数。\r\n\r\n`js`匿名函数接收以下三个参数：\r\n\r\n- `data` `object` 需要传递给接口的数据对象\r\n- `target` `object` 动作按钮的`jQuery`对象\r\n- `action` `object` 动作的管理对象\r\n\r\n```php\r\nprotected function actionScript()\r\n{\r\n\treturn <<<JS\r\nfunction (data, target, action) {\r\n    console.log('发起请求之前', data, target, action);\r\n    \r\n    // return false; 在这里return false可以终止执行后面的操作\t\r\n    \r\n    // 更改传递到接口的主键值\r\n    action.options.key = 123;\r\n}\r\nJS\t\r\n}\r\n```\r\n\r\n<a name=\"handleHtmlResponse\"></a>\r\n### 处理服务器响应的HTML代码 (handleHtmlResponse)\r\n\r\n处理服务器响应的`HTML`代码，此方法要求返回一个`js`匿名函数。\r\n\r\n```php\r\nprotected function handleHtmlResponse()\r\n{\r\n        return <<<'JS'\r\nfunction (target, html, data) {\r\n    // target 参数是动作按钮的JQ对象\r\n    // html 参数是接口返回HTML字符串\r\n    // data 参数是接口返回的完整数据的json对象\r\n\r\n    target.html(html);\r\n}\r\nJS;\r\n}\r\n```\r\n\r\n### 权限 (authorize)\r\n\r\n此方法用于判断登录用户的操作权限，默认返回`true`\r\n\r\n```php\r\nprotected function authorize(\$user): bool\r\n{\r\n\treturn \$user->can('do-action');\r\n}\r\n```\r\n\r\n### 无权限响应 (failedAuthorization)\r\n\r\n此方法用于设置鉴权失败的响应内容，如果需要则可覆写此方法\r\n\r\n```php\r\npublic function failedAuthorization()\r\n{\r\n\treturn \$this->response()->error(__('admin.deny'));\r\n}\r\n```\r\n\r\n\r\n### 隐藏或显示 (disable)\r\n\r\n设置显示或隐藏此动作\r\n\r\n```php\r\n// 隐藏\r\nMyAction::make()->disable();\r\n\r\n// 显示\r\nMyAction::make()->disable(false);\r\n```\r\n\r\n\r\n### 判断是否显示 (allowed)\r\n\r\n判断动作是否允许显示\r\n```php\r\nif (MyAction::make()->allowed()) {\r\n\t...\r\n}\r\n```\r\n\r\n### 设置主键 (setKey)\r\n\r\n设置数据主键\r\n\r\n```php\r\n\$id = ...;\r\n\r\nMyAction::make()->setKey(\$id);\r\n```\r\n\r\n### 获取主键值 (getKey)\r\n\r\n获取数据主键，此方法在`handle`方法内也同样可用\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Actions\\Action;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass MyAction extends Action\r\n{\r\n    public function handle(Request \$request) \r\n    {\r\n        \$id = \$this->getKey();\r\n        \r\n        ...\r\n        \r\n        return \$this->response()->success('成功！');\r\n    }\r\n    \r\n    public function title()\r\n    {\r\n        return \"标题 {\$this->key()}\";\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 获取目标元素样式 (getElementClass)\r\n\r\n获取动作目标元素（按钮）的`class`\r\n\r\n```php\r\n\$class = MyAction::make()->getElementClass();\r\n```\r\n\r\n### 获取目标元素的Css选择器 (selector)\r\n\r\n获取动作目标元素（按钮）的CSS选择器\r\n\r\n```php\r\n\$selector = MyAction::make()->selector();\r\n\r\nAdmin::script(\r\n\t<<<JS\r\n\t\$('\$selector').click(...);\r\nJS\t\r\n);\r\n```\r\n\r\n### 追加样式 (addHtmlClass)\r\n\r\n追加获取动作目标元素（按钮）的`class`\r\n\r\n```php\r\nMyAction::make()->addHtmlClass('btn btn-primary');\r\n\r\nMyAction::make()->addHtmlClass(['btn', 'btn-primary']);\r\n```\r\n\r\n### 设置目标元素的HTML (html)\r\n\r\n此方法用于设置动作目标元素的`HTML`代码，如有需要可以覆写\r\n\r\n```php\r\nprotected function html()\r\n{\r\n\treturn <<<HTML\r\n<a {\$this->formatHtmlAttributes()}>{\$this->title()}</a>\r\nHTML;\r\n}\r\n```\r\n\r\n### 添加JS代码 (script)\r\n\r\n此方法用于在`render`方法执行完毕之前添加`JS`代码\r\n\r\n```php\r\nprotected function script()\r\n{\r\n\treturn <<<JS\r\nconsole.log('...')\r\nJS;\r\n}\r\n```\r\n\r\n### 设置目标元素的HTML属性 (setHtmlAttribute)\r\n\r\n设置目标元素的`HTML`标签属性\r\n\r\n```php\r\nMyAction::make()->setHtmlAttribute('name', \$value);\r\n\r\n// 批量设置\r\nMyAction::make()->setHtmlAttribute(['name' => \$value]);\r\n\r\n```", 'order' => 1, 'created_at' => "2024-06-26 14:58:16", 'updated_at' => "2024-06-26 14:58:16", 'slug' => "basic-use"],
            ['id' => 60, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 7, 'title' => "数据表格", 'content' => "# 数据表格动作\r\n\r\n## 表格动作基类 (GridAction)\r\n所有数据表格相关的动作类，包括[工具栏按钮](https://learnku.com/docs/dcat-admin/1.x/toolbar/8093)(`AbstractTool`)、\r\n[行操作](https://learnku.com/docs/dcat-admin/1.x/use-and-extension-of-rows/8092)(`RowAction`)、[批量操作](https://learnku.com/docs/dcat-admin/1.x/toolbar/8093#batch)(`BatchAction`)\r\n等等操作按钮的基类都继承自`Dcat\\Admin\\Grid\\GridAction`类，而`GridAction`则继承自[动作类基类](https://learnku.com/docs/dcat-admin/1.x/basic-use/8124)(`Action`)。\r\n\r\n下面将介绍`GridAction`类中增加的方法或属性\r\n\r\n### 表格实例 (parent)\r\n\r\n通过 `parent` 属性可以获取到表格实例 (`Dcat\\Admin\\Grid`)。\r\n\r\n\r\n下面简单的演示下用法，这段代码没有任何实际意义\r\n```php\r\nuse Dcat\\Admin\\Grid\\GridAction\r\n\r\nclass MyAction extends GridAction\r\n{\r\n    public function html()\r\n    {\r\n        \$gridName = \$this->parent->getName();\r\n        \r\n        return ...;\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n### 表格页面地址 (resource)\r\n\r\n通过 `resource` 方法可以获取到表格页面的地址。\r\n\r\n下面简单的演示下用法，这段代码没有任何实际意义\r\n```php\r\nuse Dcat\\Admin\\Grid\\GridAction\r\n\r\nclass MyAction extends GridAction\r\n{\r\n    public function html()\r\n    {\r\n        // 假如你的列表页路径为 /admin/users，则这里的值为 http://域名/admin/users    \r\n        \$path = \$this->resource();\r\n        \r\n        return ...;\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n## 工具栏操作按钮基类 (AbstractTool)\r\n\r\n表格工具栏按钮基类(`Dcat\\Admin\\Grid\\Tools\\AbstractTool`)继承自`GridAction`类。\r\n\r\n下面将介绍`AbstractTool`类中增加的方法或属性\r\n\r\n### 按钮样式 (style)\r\n\r\n通过 `style` 属性可以设置工具栏按钮的类(`class`)，默认值为 `btn btn-white waves-effect`。\r\n\r\n\r\n下面简单的演示下用法\r\n```php\r\nuse Dcat\\Admin\\Grid\\AbstractTool\r\n\r\nclass MyTool extends AbstractTool\r\n{\r\n    protected \$style = 'btn btn-outline-primary waves-effect';\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n\r\n## 批量操作基类 (BatchAction)\r\n\r\n表格工具栏按钮基类(`Dcat\\Admin\\Grid\\Tools\\BatchAction`)继承自`GridAction`类。\r\n\r\n下面将介绍`BatchAction`类中增加的方法或属性\r\n\r\n### 获取选中行的主键数组 (getSelectedKeysScript)\r\n\r\n通过 `getSelectedKeysScript` 方法可以生成获取选中的行的主键数组的`JS`代码。\r\n\r\n\r\n下面简单的演示下用法\r\n```php\r\nuse Dcat\\Admin\\Grid\\BatchAction\r\n\r\nclass MyBatchAction extends BatchAction\r\n{\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public function actionScript()\r\n    {\r\n        \$warning = __('No data selected!');\r\n\r\n        return <<<JS\r\n    var key = {\$this->getSelectedKeysScript()}\r\n    \r\n    if (key.length === 0) {\r\n        Dcat.warning('{\$warning}');\r\n        return ;\r\n    }\r\n    Object.assign(data, {_key:key});\r\nJS;\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n\r\n## 行操作基类 (RowAction)\r\n\r\n表格工具栏按钮基类(`Dcat\\Admin\\Grid\\Tools\\RowAction`)继承自`GridAction`类。\r\n\r\n下面将介绍`RowAction`类中增加的方法或属性\r\n\r\n### 行数据 (row)\r\n\r\n通过 `row` 属性可以获取到当前行数据内容。\r\n\r\n下面简单的演示下用法，这段代码没有任何实际意义\r\n```php\r\nuse Dcat\\Admin\\Grid\\RowAction\r\n\r\nclass MyRowAction extends RowAction\r\n{\r\n    public function html()\r\n    {\r\n        // 获取当前行的字段值\r\n        \$username = \$this->row->username;\r\n        \r\n        // 转化为数组\r\n        \$rowArray = \$this->row->toArray();\r\n        \r\n        return ...;\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n### 主键值 (getKey)\r\n\r\n通过 `getKey` 属性方法可以获取到当前行数据的主键值(`ID`)。\r\n\r\n下面简单的演示下用法，这段代码没有任何实际意义\r\n```php\r\nuse Dcat\\Admin\\Grid\\RowAction\r\n\r\nclass MyRowAction extends RowAction\r\n{\r\n    public function html()\r\n    {\r\n        \$id = \$this->getKey();\r\n        \r\n        return ...;\r\n    }\r\n    \r\n    ...\r\n}\r\n```", 'order' => 2, 'created_at' => "2024-06-26 14:59:21", 'updated_at' => "2024-06-26 14:59:21", 'slug' => "data-table"],
            ['id' => 61, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 7, 'title' => "数据表单", 'content' => "# 数据表单动作\r\n\r\n运行命令\r\n\r\n```bash\r\nphp artisan admin:action\r\n```\r\n\r\n然后输入 `4` \r\n\r\n```bash\r\n Which type of action would you like to make?:\r\n  [0] default\r\n  [1] grid-batch\r\n  [2] grid-row\r\n  [3] grid-tool\r\n  [4] form-tool\r\n  [5] show-tool\r\n  [6] tree-tool\r\n > 4 # 输入 4\r\n \r\n```\r\n\r\n接着输入 `Action` 类名称，这里需要输入 `大驼峰` 风格的英文字母\r\n\r\n```bash\r\n\r\n Please enter a name of action class:\r\n > Copy\r\n\r\n```\r\n\r\n类名输入完成之后会出现以下信息让开发者输入类的命名空间，默认的命名空间是 `App\\Admin\\Actions\\Form`，这里使用默认的就行\r\n\r\n```bash\r\n\r\n Please enter the namespace of action class [App\\Admin\\Actions\\Form]:\r\n > \r\n\r\n```\r\n\r\n最后生成文件如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Form;\r\n\r\nuse Dcat\\Admin\\Actions\\Response;\r\nuse Dcat\\Admin\\Form\\AbstractTool;\r\nuse Dcat\\Admin\\Traits\\HasPermissions;\r\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Copy extends AbstractTool\r\n{\r\n    /**\r\n     * 按钮标题\r\n     *\r\n     * @return string\r\n     */\r\n\tprotected \$title = 'Title';\r\n\r\n    /**\r\n     * 处理请求，如果不需要接口处理，请直接删除这个方法\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return Response\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        // 获取主键\r\n        \$key = \$this->getKey();\r\n        \r\n        return \$this->response()\r\n            ->success('Processed successfully.')\r\n            ->redirect('/');\r\n    }\r\n\r\n    /**\r\n     * 如果只是a标签跳转，则在这里返回跳转链接即可\r\n     * \r\n     * @return string|void\r\n     */\r\n    protected function href()\r\n    {\r\n        // 获取主键\r\n        \$key = \$this->getKey();\r\n        \r\n        // 获取当前页其他字段\r\n        \$username = \$this->parent->model()->username;\r\n        \r\n        // return admin_url('auth/users');\r\n    }\r\n    \r\n     // 如果你想自定义动作按钮的HTML，可以重写此方法\r\n    public function html()\r\n    {\r\n        return parent::html();\r\n    }\r\n\r\n    /**\r\n     * 确认弹窗信息，如不需要可以删除此方法 \r\n     * \r\n\t * @return string|array|void\r\n\t */\r\n\tpublic function confirm()\r\n\t{\r\n\t\t// return ['Confirm?', 'contents'];\r\n\t}\r\n\r\n    /**\r\n     * 权限判断，如不需要可以删除此方法 \r\n     * \r\n     * @param Model|Authenticatable|HasPermissions|null \$user\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function authorize(\$user): bool\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 返回请求接口的参数，如不需要可以删除此方法\r\n     * \r\n     * @return array\r\n     */\r\n    protected function parameters()\r\n    {\r\n        return [];\r\n    }\r\n}\r\n\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$form->tools(function (Form\\Tools \$tools) {\r\n    \$tools->append(new Copy());\r\n});\r\n```", 'order' => 3, 'created_at' => "2024-06-26 14:59:44", 'updated_at' => "2024-06-26 14:59:44", 'slug' => "data-form"],
            ['id' => 62, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 7, 'title' => "数据详情", 'content' => "# 数据详情动作\r\n\r\n运行命令\r\n\r\n```bash\r\nphp artisan admin:action\r\n```\r\n\r\n然后输入 `5` \r\n\r\n```bash\r\n Which type of action would you like to make?:\r\n  [0] default\r\n  [1] grid-batch\r\n  [2] grid-row\r\n  [3] grid-tool\r\n  [4] form-tool\r\n  [5] show-tool\r\n  [6] tree-tool\r\n > 5 # 输入 5\r\n \r\n```\r\n\r\n接着输入 `Action` 类名称，这里需要输入 `大驼峰` 风格的英文字母\r\n\r\n```bash\r\n\r\n Please enter a name of action class:\r\n > Copy\r\n\r\n```\r\n\r\n类名输入完成之后会出现以下信息让开发者输入类的命名空间，默认的命名空间是 `App\\Admin\\Actions\\Show`，这里使用默认的就行\r\n\r\n```bash\r\n\r\n Please enter the namespace of action class [App\\Admin\\Actions\\Show]:\r\n > \r\n\r\n```\r\n\r\n最后生成文件如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Show;\r\n\r\nuse Dcat\\Admin\\Actions\\Response;\r\nuse Dcat\\Admin\\Show\\AbstractTool;\r\nuse Dcat\\Admin\\Traits\\HasPermissions;\r\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Copy extends AbstractTool\r\n{\r\n    /**\r\n     * 按钮标题\r\n     *\r\n     * @return string\r\n     */\r\n\tprotected \$title = 'Title';\r\n\r\n    /**\r\n     * 处理请求，如果不需要接口处理，请直接删除这个方法\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return Response\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        // 获取主键\r\n        \$key = \$this->getKey();\r\n        \r\n        return \$this->response()\r\n            ->success('Processed successfully.')\r\n            ->redirect('/');\r\n    }\r\n\r\n    /**\r\n     * 如果只是a标签跳转，则在这里返回跳转链接即可\r\n     * \r\n     * @return string|void\r\n     */\r\n    protected function href()\r\n    {\r\n        // 获取主键\r\n        \$key = \$this->getKey();\r\n        \r\n        // 获取当前页其他字段\r\n        \$username = \$this->parent->model()->username;\r\n        \r\n        // return admin_url('auth/users');\r\n    }\r\n    \r\n     // 如果你想自定义动作按钮的HTML，可以重写此方法\r\n    public function html()\r\n    {\r\n        return parent::html();\r\n    }\r\n\r\n    /**\r\n     * 确认弹窗信息，如不需要可以删除此方法 \r\n     * \r\n\t * @return string|array|void\r\n\t */\r\n\tpublic function confirm()\r\n\t{\r\n\t\t// return ['Confirm?', 'contents'];\r\n\t}\r\n\r\n    /**\r\n     * 权限判断，如不需要可以删除此方法 \r\n     * \r\n     * @param Model|Authenticatable|HasPermissions|null \$user\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function authorize(\$user): bool\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 返回请求接口的参数，如不需要可以删除此方法\r\n     * \r\n     * @return array\r\n     */\r\n    protected function parameters()\r\n    {\r\n        return [];\r\n    }\r\n}\r\n\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$show->tools(function (Show\\Tools \$tools) {\r\n    \$tools->append(new Copy());\r\n});\r\n```", 'order' => 4, 'created_at' => "2024-06-26 15:01:30", 'updated_at' => "2024-06-26 15:01:30", 'slug' => "data-detail-action"],
            ['id' => 63, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 7, 'title' => "模型树", 'content' => "# 模型树动作\r\n\r\n### 工具栏\r\n\r\n运行命令\r\n\r\n```bash\r\nphp artisan admin:action\r\n```\r\n\r\n然后输入 `7` \r\n\r\n```bash\r\n Which type of action would you like to make?:\r\n  [0] default\r\n  [1] grid-batch\r\n  [2] grid-row\r\n  [3] grid-tool\r\n  [4] form-tool\r\n  [5] show-tool\r\n  [6] tree-row\r\n  [7] tree-tool\r\n\r\n > 7 # 输入 7\r\n```\r\n\r\n接着输入 `Action` 类名称，这里需要输入 `大驼峰` 风格的英文字母\r\n\r\n```bash\r\n\r\n Please enter a name of action class:\r\n > Copy\r\n\r\n```\r\n\r\n类名输入完成之后会出现以下信息让开发者输入类的命名空间，默认的命名空间是 `App\\Admin\\Actions\\Tree`，这里使用默认的就行\r\n\r\n```bash\r\n\r\n Please enter the namespace of action class [App\\Admin\\Actions\\Tree]:\r\n > \r\n\r\n```\r\n\r\n最后生成文件如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Tree;\r\n\r\nuse Dcat\\Admin\\Actions\\Response;\r\nuse Dcat\\Admin\\Tree\\AbstractTool;\r\nuse Dcat\\Admin\\Traits\\HasPermissions;\r\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Copy extends AbstractTool\r\n{\r\n    /**\r\n     * 按钮标题\r\n     *\r\n     * @return string\r\n     */\r\n\tprotected \$title = 'Title';\r\n\r\n    /**\r\n     * 处理请求，如果不需要接口处理，请直接删除这个方法\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return Response\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        return \$this->response()\r\n            ->success('Processed successfully.')\r\n            ->redirect('/');\r\n    }\r\n\r\n    /**\r\n     * 如果只是a标签跳转，则在这里返回跳转链接即可\r\n     * \r\n     * @return string|void\r\n     */\r\n    protected function href()\r\n    {\r\n        // return admin_url('auth/users');\r\n    }\r\n    \r\n     // 如果你想自定义动作按钮的HTML，可以重写此方法\r\n    public function html()\r\n    {\r\n        return parent::html();\r\n    }\r\n\r\n    /**\r\n     * 确认弹窗信息，如不需要可以删除此方法 \r\n     * \r\n\t * @return string|array|void\r\n\t */\r\n\tpublic function confirm()\r\n\t{\r\n\t\t// return ['Confirm?', 'contents'];\r\n\t}\r\n\r\n    /**\r\n     * 权限判断，如不需要可以删除此方法 \r\n     * \r\n     * @param Model|Authenticatable|HasPermissions|null \$user\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function authorize(\$user): bool\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 返回请求接口的参数，如不需要可以删除此方法\r\n     * \r\n     * @return array\r\n     */\r\n    protected function parameters()\r\n    {\r\n        return [];\r\n    }\r\n}\r\n\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$tree->tools(function (Tree\\Tools \$tools) {\r\n    \$tools->add(new Copy());\r\n});\r\n```\r\n\r\n<a name=\"row-action\"></a>\r\n### 行操作\r\n\r\n运行命令\r\n\r\n```bash\r\nphp artisan admin:action\r\n```\r\n\r\n然后输入 `6` \r\n\r\n```bash\r\n Which type of action would you like to make?:\r\n  [0] default\r\n  [1] grid-batch\r\n  [2] grid-row\r\n  [3] grid-tool\r\n  [4] form-tool\r\n  [5] show-tool\r\n  [6] tree-row\r\n  [7] tree-tool\r\n\r\n > 6 # 输入 6\r\n```\r\n\r\n接着输入 `Action` 类名称，这里需要输入 `大驼峰` 风格的英文字母\r\n\r\n```bash\r\n\r\n Please enter a name of action class:\r\n > Copy\r\n\r\n```\r\n\r\n类名输入完成之后会出现以下信息让开发者输入类的命名空间，默认的命名空间是 `App\\Admin\\Actions\\Tree`，这里使用默认的就行\r\n\r\n```bash\r\n\r\n Please enter the namespace of action class [App\\Admin\\Actions\\Tree]:\r\n > \r\n\r\n```\r\n\r\n最后生成文件如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Actions\\Tree;\r\n\r\nuse Dcat\\Admin\\Tree\\RowAction;\r\nuse Dcat\\Admin\\Actions\\Response;\r\nuse Dcat\\Admin\\Traits\\HasPermissions;\r\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Copy extends RowAction\r\n{\r\n    /**\r\n     * @return string\r\n     */\r\n\tprotected \$title = 'Title';\r\n\r\n    /**\r\n     * 处理请求，如果不需要接口处理，请直接删除这个方法 \r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return Response\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n    \t// 获取主键\r\n    \t\$key = \$this->getKey();\r\n\r\n        return \$this->response()\r\n            ->success('Processed successfully.')\r\n            ->redirect('/');\r\n    }\r\n\r\n    /**\r\n     * 返回跳转地址，如果不需要可以删除\r\n     * \r\n     * @return string|void\r\n     */\r\n    protected function href()\r\n    {\r\n        // return admin_url('auth/users/'.\$this->getKey());\r\n    }\r\n\r\n    /**\r\n     * 确认弹窗信息，如果不需要可以删除 \r\n     * \r\n\t * @return string|array|void\r\n\t */\r\n\tpublic function confirm()\r\n\t{\r\n\t\t// return ['Confirm?', 'contents'];\r\n\t}\r\n\r\n    /**\r\n     * 权限判断，如果不需要可以删除  \r\n     * \r\n     * @param Model|Authenticatable|HasPermissions|null \$user\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function authorize(\$user): bool\r\n    {\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$tree->actions(new Copy());\r\n```", 'order' => 5, 'created_at' => "2024-06-26 15:02:29", 'updated_at' => "2024-06-26 15:02:29", 'slug' => "model-tree"],
            ['id' => 64, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 8, 'title' => "基本使用", 'content' => "# 多语言基本使用\r\n\r\n在`Dcat Admin`中使用多语言翻译非常方便，数据表格、数据表单、数据详情和模型树的字段都支持自动读取语言包翻译，具体可参考[表格字段翻译](https://learnku.com/docs/dcat-admin/1.x/field-translation/8104)、[表单字段翻译](https://learnku.com/docs/dcat-admin/1.x/field-translation/8115)、[数据详情字段翻译](https://learnku.com/docs/dcat-admin/1.x/field-translation/8121)。\r\n\r\n\r\n## 语言包文件\r\n\r\n语言包文件类型大概如下\r\n\r\n```bash\r\nresources/lang\r\n    ├── ...\r\n    └── en\r\n        ├── admin.php   # 系统内容语言包\r\n\t\t├── menu.php    # 菜单标题语言包\r\n        ├── global.php  # 控制器公共语言包\r\n        ├── {xxx}.php   # 控制器语言包，一个控制器对应一个语言包\r\n        └── ...         \r\n```\r\n\r\n\r\n控制器语言包名称需要与控制器名相对应，例如控制器名`UserProfileController`，则对应的语言包为`resources/lang/{当前语言}/user-profile.php`（需要转化为小写中划线风格）。\r\n\r\n\r\n\r\n## 控制器语言包内容格式\r\n\r\n控制器语言包（包括`global.php`）中的内容分为三个类别：\r\n\r\n- `fields` 数据字段的翻译，这个类别下放置数据字段的翻译\r\n- `labels` 自定义内容翻译，这个类别下是对数据字段外的内容翻译，可以是任何自定义内容\r\n- `options` 枚举选项翻译\r\n\r\n下面是例子：\r\n\r\n\r\n假设控制器语言包`user-profile.php`内容如下：\r\n```php\r\n<?php \r\n\r\nreturn [\r\n    'labels' => [\r\n        'UserProfile' => '用户中心',\r\n        'list'        => '列表',\r\n        \r\n        'pagination' => [\r\n            'range' => '从 :first 到 :last ，总共 :total 条',\r\n        ],\r\n    ],\r\n    'fields' => [\r\n        'name'      => '名称',\r\n        'published' => '发布',\r\n        'author'    => '作者',\r\n        'status'    => '状态',\r\n    ],\r\n    'options' => [\r\n        'status' => [\r\n            0 => '未激活',\r\n            1 => '已激活',\r\n        ],\r\n    ],\r\n];\r\n```\r\n\r\n则语言包可以这么使用\r\n\r\n```php\r\nclass UserProfileController extend AdminController\r\n{\r\n    // 页面标题翻译，默认会自动读取，不需要指定\r\n    public function title()\r\n    {\r\n        // labels翻译示例，最终翻译成 “用户中心”\r\n        return admin_trans_label('UserProfile');    \r\n    }\r\n\r\n    // fields和options翻译示例\r\n    public function grid()\r\n    {\r\n        \$grid = new Grid(new UserProfile());\r\n        \r\n        // 显示调用语言包翻译，这里会把 “name” 字段翻译成 “名称”\r\n        \$grid->name(admin_trans_field('name'));\r\n        \r\n        // 隐式使用语言包翻译，“author” 字段会自动翻译成 “作者”\r\n        \$grid->author;\r\n        \r\n        // 调用options翻译\r\n        \$grid->status()->using(admin_trans('user-profile.options.status'));\r\n        \r\n        return \$grid;\r\n    }\r\n}\r\n```\r\n\r\n### 语言包名称\r\n语言包名称需要与控制器名相对应，假如控制器名`UserProfileController`，则对应的语言包为`resources/lang/{当前语言}/user-profile.php`（需要转化为小写中划线风格）。\r\n\r\n如果想要更改语言包的名称，可以通过下面两种方式进行更改\r\n\r\n方式1\r\n```php\r\nuse Dcat\\Admin\\Http\\Controllers\\AdminController;\r\n\r\nclass UserController extends AdminController\r\n{\r\n    /**\r\n     * 指定翻译文件名称\r\n     * \r\n     * @var string \r\n     */\r\n    protected \$translation = 'user1';\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n方式2\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nAdmin::translation('user1');\r\n```\r\n\r\n\r\n## 使用\r\n\r\n### admin_trans_field\r\n这个函数用于翻译`fields`类别下内容，会自动找对应控制器下的翻译文件，如果翻译不存在会去找`global.php`中的翻译。\r\n```php\r\nadmin_trans_field('name');\r\n```\r\n\r\n### admin_trans_label\r\n这个函数用于翻译`labels`类别下内容，会自动找对应控制器下的翻译文件，如果翻译不存在会去找`global.php`中的翻译。\r\n```php\r\nadmin_trans_label('Posts');\r\n\r\nadmin_trans_label('pagination.range', ['first' => 1, 'last' => 1, 'total' => 0]);\r\n```\r\n\r\n### admin_trans_option\r\n这个函数用于翻译`options`类别下内容，会自动找对应控制器下的翻译文件，如果翻译不存在会去找`global.php`中的翻译。\r\n```php\r\nadmin_trans_option(1, 'status');\r\n```\r\n\r\n### admin_trans\r\n此方法与`Laravel`框架自带的`trans`方法用法没有区别，唯一的区别是：当翻译的内容找不到时，会去`global.php`中再找一次。\r\n```php\r\n// 先去 user.php 中找 first_name 的翻译，如果找不到会去 global.php 中找\r\nadmin_trans('user.first_name');\r\n```\r\n\r\n## 公共翻译文件\r\n所有常用的翻译都可以放在`resources/lang/{当前语言}/global.php`中，当控制器翻译文件不存在时会读取公共翻译文件翻译。\r\n\r\n```php\r\n<?php\r\n\r\nreturn [\r\n    'fields' => [\r\n        'id'                    => 'ID',\r\n        'name'                  => '名称',\r\n        'username'              => '用户名',\r\n        'email'                 => '邮箱',\r\n        'password'              => '密码',\r\n    ],\r\n    'labels' => [\r\n        'list'   => '列表',\r\n        'edit'   => '编辑',\r\n        'detail' => '详细',\r\n        'create' => '创建',\r\n        'root'   => '顶级',\r\n        'scaffold' => '代码生成器',\r\n    ],\r\n    'options' => [\r\n    ],\r\n];\r\n```\r\n\r\n## 默认面包屑翻译\r\n\r\n例如你的访问路径是`/admin/my-users`，控制器是`MyUserController`，那么则可以在控制器对应的翻译文件中加上\r\n\r\n```php\r\nreturn [\r\n 'labels' => [ \r\n     // 跟路由路径相同\r\n     'my-users' => '用户',\r\n ], \r\n ...\r\n];\r\n```", 'order' => 1, 'created_at' => "2024-06-26 15:03:17", 'updated_at' => "2024-06-26 15:03:17", 'slug' => "basic-use"],
            ['id' => 65, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 9, 'title' => "扩展基本使用", 'content' => "# 扩展基本使用\r\n\r\n## 基本使用\r\n\r\n### 扩展安装\r\n\r\n`Dcat Admin`中扩展支持以下三种安装方式，安装成功后均能在扩展管理页面`admin/auth/extensions`看到相关扩展信息\r\n\r\n#### 1.通过应用市场安装\r\n\r\n敬请期待...\r\n\r\n#### 2.本地安装\r\n\r\n下载扩展的`zip`压缩包，注意必须是`zip`格式，然后打开扩展管理页面`admin/auth/extensions`，然后点击表格工具栏的`本地安装`按钮上传提交即可。\r\n\r\n#### 3.composer安装\r\n\r\n根据扩展开发者文档提供的说明，直接使用composer安装即可\r\n\r\n```bash\r\ncomposer require {扩展名称}\r\n```\r\n\r\n#### 启用扩展\r\n\r\n安装之后，需要在扩展管理页面点击 `更新至xxx版本` 以及更新 `启用` 按钮之后方可正常使用\r\n\r\n\r\n## 开发扩展\r\n\r\n详细的开发教程，请参考文档 [开发扩展](https://learnku.com/docs/dcat-admin/2.x/basic-use/8128) 章节。\r\n\r\n\r\n<a name=\"service\"></a>\r\n### 服务注册与初始化\r\n\r\n> {tip} 如果你对服务提供者的概念并不熟悉，请先前往[Laravel文档 - 服务提供者](https://learnku.com/docs/laravel/8.x/providers/9362)学习。\r\n\r\n扩展的 `ServiceProvider` 类实际上是一个[服务提供者](https://learnku.com/docs/laravel/8.x/providers/9362)，唯一的区别是扩展的 `ServiceProvider` 不能重写 `boot` 方法，需要通过 `init` 代替 `boot`方法。\r\n\r\n\r\n<a name=\"version\"></a>\r\n### 版本管理\r\n\r\n每个扩展都有一个`version.php`文件，通过这个文件可以实现版本管理功能，每次发布新版本我们只需要往这个文件添加新的版本号以及相关描述即可\r\n\r\n```php\r\n<?php\r\n\r\nreturn [\r\n    // key 是版本号，注意这里不要带 v 前缀！\r\n    '1.0.0' => [\r\n        '版本描述信息，可以有多条',\r\n        '描述2...',\r\n        'create_operation_log.php', // 版本迁移文件，可以有多条\r\n    ],\r\n    \r\n    '1.0.1' => [\r\n        '版本描述信息，可以有多条',\r\n        'update_operation_log.php', // 版本迁移文件\r\n    ],\r\n    \r\n    ...\r\n];\r\n```\r\n\r\n\r\n#### 升级版本\r\n\r\n安装了新的版本代码之后，可以在扩展管理页面`admin/auth/extensions`中点击更新按钮进行升级。\r\n\r\n点击升级后如果有迁移文件则会运行迁移文件，如果有菜单则会重新创建菜单，如果有静态资源则会自动重新发布资源文件。\r\n\r\n\r\n#### 回滚版本\r\n\r\n通过命令 `php artisan admin:ext-rollback {扩展名称} {版本号}` 可以回滚到指定版本，但需要注意的是，回滚扩展会删除数据，可能会导致数据丢失，请谨慎操作！！！\r\n\r\n#### 卸载\r\n\r\n如果你的扩展已安装，通过扩展页面 `admin/auth/extensions` 可以扩展进行卸载，但需要注意的是，卸载扩展会删除数据，可能会导致数据丢失，请谨慎操作！！！\r\n\r\n\r\n如果你想完全移除扩展的代码，则直接删除 `dcat-admin-extensions` 目录下对应的扩展文件夹即可。\r\n\r\n<a name=\"view\"></a>\r\n### 视图 (view)\r\n\r\n视图的默认目录为`扩展目录/resources/view`\r\n\r\n```bash\r\n├── resources \r\n│   ├── ...\r\n│   └── views # 视图目录\r\n│       └── index.blade.php # 视图示例文件\r\n```\r\n\r\n只要把视图文件放在上述目录，系统就会自动给视图目录注册别名，别名与扩展名称相同。假设你的扩展包名称为 `dcat-admin/form-step`，则可以通过以下方式加载视图\r\n\r\n```php\r\nreturn view('dcat-admin.form-step::index');\r\n```\r\n\r\n<a name=\"assets\"></a>\r\n### 静态资源\r\n\r\n假设你的扩展包名称为 `dcat-admin/form-step`，如果你的扩展中包含静态资源如下，那么你可以通过 `FormStepServiceProvider` 上的 `\$js` 和 `\$css` 属性为你的静态资源注册别名\r\n\r\n```php\r\n└── resources \r\n    └─── assets\r\n      ├── css\r\n      │   └── index.css\r\n      └── js\r\n          └── index.js\r\n```\r\n\r\n```php\r\nclass FormStepServiceProvider extends ServiceProvider\r\n{\r\n    protected \$js = [\r\n        'js/index.js',\r\n    ];\r\n    protected \$css = [\r\n        'css/index.css',\r\n    ];\r\n}\r\n```\r\n\r\n然后就可以通过下面的方法加载静态资源\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n// 直接用你的 包名 即可引入扩展包的静态资源\r\nAdmin::requireAssets('@dcat-admin.form-step');\r\n```\r\n\r\n\r\n当然你也可以不通过 `\$js` 和 `\$css` 属性注册别名，那么也可以用下面的方法直接加载静态资源，效果是一样的\r\n\r\n```php\r\n// 上面的写法相当于\r\nAdmin::js(['@dcat-admin.form-step/js/index.js']);\r\nAdmin::css(['@dcat-admin.form-step/css/index.css']);\r\n```\r\n\r\n### 判断扩展是否启用\r\n\r\n判断扩展是否启用：`Admin::extension()->enabled('package.name')`，当扩展不存在或禁用时，返回 `false`；当扩展启用的时返回 `true`。", 'order' => 1, 'created_at' => "2024-06-26 15:03:52", 'updated_at' => "2024-06-26 15:03:52", 'slug' => "extended-basic-usage"],
            ['id' => 66, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 9, 'title' => "开发扩展", 'content' => "# 开发扩展\r\n\r\n\r\n`Dcat Admin`支持安装扩展工具来帮助丰富你的后台功能。\r\n>需要注意的是，`Laravel Admin`原有的扩展无法直接在`Dcat Admin`中使用，但大部分扩展只需要做一些微小的调整就可以正常使用了，有兴趣的同学可以自行移植。\r\n\r\n如果大家在使用的过程中有在`Dcat Admin`的基础上添加一些自己的功能或者组件，不妨做成一个`Dcat Admin`扩展，这样可以给其它`Dcat Admin`使用者提供帮助，并且在其它人的使用反馈中的提升扩展的质量。\r\n\r\n这篇文档将会以开发一个 [操作日志扩展](https://github.com/dcat-admin/operation-log) 为例，一步一步的教大家开发一个扩展，并且发布给他人使用，最终的效果参考[操作日志扩展](https://github.com/dcat-admin/operation-log)。\r\n\r\n\r\n## 开始之前\r\n\r\n在开始开发扩展之前，如果是`linux`环境，请先手动在项目根目录创建一个`dcat-admin-extensions`目录，并设置可读**可写**权限，扩展文件将会被安装在`dcat-admin-extensions`目录，请保证拥有以下几个目录的读写权限\r\n\r\n1. `项目目录/dcat-admin-extensions` 扩展的安装目录，可以根据配置参数 `admin.extensions.dir` 进行更改\r\n2. `public/vendor` 扩展静态资源发布目录\r\n3. `resources/lang` 语言包目录\r\n\r\n\r\n## 1.创建扩展\r\n\r\n`Dcat Admin`的扩展是一个标准的`composer`扩展包，可以通过`composer`安装，也可以通过系统内部的`本地安装`功能直接安装。我们可以通过命令或界面创建一个新的扩展，下面分别简单介绍一下命令和界面创建的方法\r\n\r\n\r\n1.通过命令创建扩展 \r\n\r\n```bash\r\nphp artisan admin:ext-make 扩展包名 --namespace=命名空间 --theme\r\n```\r\n\r\n命令参数说明\r\n\r\n- `name` 扩展包名称，扩展的名称是一个标准的`composer`包名，请统一使用**小写字母** + **中划线(-)**的风格命名，标准的格式如 `dcat-admin/operation-log`，前面一部分可以是个人名称，后面一部分可以是对扩展包功能的概括词语\r\n- `--namespace=` 扩展包命名空间，默认会根据包名自动生成，例如你的包名是`jiangqh/operation-log`，那么默认的命名空间是`Jiangqh/OperationLog`\r\n- `--theme` 是否为主题扩展\r\n\r\n那么在当前这个例子中我们运行一下命令生成扩展包\r\n\r\n```php\r\n# `--namespace`\r\nphp artisan admin:ext-make dcat-admin/operation-log --namespace=\"Dcat\\Admin\\OperationLog\"\r\n```\r\n\r\n2.通过管理页面创建扩展\r\n\r\n打开扩展管理页面`http://localhost/admin/auth/extensions`，然后点击表格下面第一行的**快速创建**，然后输入扩展包名和命名空间即可，在实际开发中也更推荐大家使用界面创建扩展，这样更方便\r\n\r\n\r\n扩展创建完成之后可以看到扩展文件夹下多了个`dcat-admin/extensions/dcat-admin/operation-log`目录，目录结构如下\r\n```php\r\n├── README.md\r\n├── composer.json # composer配置文件\r\n├── version.php   # 扩展包版本管理文件\r\n├── logo.png      # logo\r\n├── updates       # 扩展包每个版本对应的表迁移文件\r\n├── resources \r\n│   ├── lang    # 语言包\r\n│   ├── assets  # 静态资源\r\n│   │   ├── css\r\n│   │   │   └── index.css # css示例文件\r\n│   │   └── js\r\n│   │       └── index.js  # js示例文件\r\n│   └── views\r\n│       └── index.blade.php # 视图示例文件\r\n└── src\r\n    ├── OperationLogServiceProvider.php # 扩展包服务提供者\r\n    ├── Setting.php  # 扩展设置表单\r\n    ├── Models  # 模型目录\r\n    └── Http\r\n        ├── routes.php  # 扩展包路由文件\r\n        ├── Middleware  # 扩展包中间件文件夹\r\n        └── Controllers # 扩展包控制器\r\n            └── OperationLogController.php\r\n```\r\n\r\n然后你还可以设置扩展的`logo`以及扩展名称，设置之后会在扩展管理页面展示，让你的扩展更具容易被人记住！\r\n\r\n<a name=\"logo\"></a>\r\n### 扩展logo\r\n\r\n扩展`logo`必须放在扩展的根目录，并且文件名必须是`logo.png`，建议尺寸`100x100`。\r\n\r\n### 扩展名称\r\n\r\n扩展名称需要修改`composer.json`里面的`alias`参数，如果不设置则默认展示包名\r\n\r\n## 2.启用扩展\r\n\r\n扩展创建成功之后就可以在管理页面`http://localhost/admin/auth/extensions` 看到新创建的扩展了，效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/63a6be5ecc4f0c1e0140a12b34f1fde3667bbdabae3ec.png)\r\n\r\n然后我们分别点击扩展对应的 `更新至1.0.0版本` 以及 `启用` 按钮，就可以使这个扩展生效了。\r\n新创建的扩展会生成一个默认的控制器，在这个例子中，我们可以尝试访问`http://localhost:8000/admin/operation-log`，如果可以正常访问则说明扩展启用成功。\r\n\r\n\r\n## 3.功能开发\r\n\r\n这个扩展的功能主要是用来记录用户的操作记录，然后提供一个查看记录的页面，然后我们可以把默认创建的扩展文件中用不到的给清理掉，清理后的目录结构如下\r\n```php\r\n├── README.md\r\n├── composer.json # composer配置文件\r\n├── version.php   # 扩展包版本管理文件\r\n├── logo.png      # 扩展包logo\r\n├── updates       # 扩展包每个版本对应的表迁移文件\r\n├── resources \r\n│   └── lang  # 语言包\r\n└── src\r\n    ├── OperationLogServiceProvider.php # 扩展包服务提供者\r\n    ├── Setting.php  # 扩展设置表单\r\n    ├── Models  # 模型目录\r\n    └── Http\r\n        ├── routes.php  # 扩展包路由文件\r\n        ├── Middleware  # 扩展包中间件文件夹\r\n        └── Controllers # 扩展包控制器\r\n            └── OperationLogController.php\r\n```\r\n\r\n接下来就正式进入功能开发部分\r\n\r\n\r\n### 创建迁移文件 (migration)\r\n首先我们需要创建一个表迁移文件，运行命令 `php artisan make:migration CreateOperationLogTable`，然后写入文件内容如下\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\nuse Illuminate\\Database\\Schema\\Blueprint;\r\nuse Illuminate\\Support\\Facades\\Schema;\r\n\r\nclass CreateOperationLogTable extends Migration\r\n{\r\n    // 这里可以指定你的数据库连接\r\n    public function getConnection()\r\n    {\r\n        return config('database.connection') ?: config('database.default');\r\n    }\r\n\r\n    public function up()\r\n    {\r\n        if (! Schema::hasTable('admin_operation_log')) {\r\n            Schema::create('admin_operation_log', function (Blueprint \$table) {\r\n                \$table->bigIncrements('id')->unsigned();\r\n                \$table->bigInteger('user_id');\r\n                \$table->string('path');\r\n                \$table->string('method', 10);\r\n                \$table->string('ip');\r\n                \$table->text('input');\r\n                \$table->index('user_id');\r\n                \$table->timestamps();\r\n            });\r\n        }\r\n    }\r\n\r\n    public function down()\r\n    {\r\n        Schema::dropIfExists('admin_operation_log');\r\n    }\r\n}\r\n```\r\n\r\n然后把文件移动到 `扩展目录/updates` 目录，并重命名为 `create_opration_log_table.php`。最后我们需要修改扩展的版本管理文件 `扩展目录/version.php`，写入迁移文件的文件名，最终内容如下\r\n```php\r\n<?php\r\n\r\nreturn [\r\n    '1.0.0' => [\r\n        '版本变化描述1',\r\n        '版本变化描述2',\r\n        'create_opration_log_table.php', // 迁移文件名称，安装或更新版本时会自动执行\r\n    ],\r\n];\r\n```\r\n\r\n关于扩展的版本管理更详细的介绍，请前往[扩展 - 版本管理](extension-f.md#version)章节查看。\r\n\r\n### 模型、控制器和路由\r\n\r\n创建模型文件 `扩展目录/src/Models/OperationLog`，模型内容点击[OperationLog.php](https://github.com/dcat-admin/operation-log/blob/master/src/Models/OperationLog.php)查看；\r\n\r\n然后修改我们的控制器`扩展目录/src/Http/Controllers/OperationLogController.php`，控制器内容点击[LogController.php](https://github.com/dcat-admin/operation-log/blob/master/src/Http/Controllers/LogController.php)查看；\r\n\r\n最后需要修改我们的路由文件，尽量让你的路由不与其他路由产生冲突\r\n```php\r\nuse Dcat\\Admin\\OperationLog\\Http\\Controllers;\r\nuse Illuminate\\Support\\Facades\\Route;\r\n\r\nRoute::get('auth/operation-logs', Controllers\\OperationLogController::class.'@index')->name('dcat-admin.operation-log.index');\r\nRoute::delete('auth/operation-logs/{id}', Controllers\\OperationLogController::class.'@destroy')->name('dcat-admin.operation-log.destroy');\r\n```\r\n\r\n### 语言包\r\n\r\n在控制器中，我们可以让一些文本描述支持语言包翻译功能，在这个例子中我们以`en`以及`zh_CN`两种语言为例，在`扩展包/resources/lang`目录下分别创建`en/log.php`和`zh_CN/log.php`文件，并写入以下内容\r\n\r\n```php\r\n// en\r\nreturn [\r\n    'title' => 'Operation Log',\r\n    'setting_title' => 'Operation Log',\r\n];\r\n\r\n// zh_CN\r\nreturn [\r\n    'title' => '操作日志',\r\n    'setting_title' => '操作日志',\r\n];\r\n```\r\n\r\n最后在控制器中可以通过下面的方法访问语言包内容，关于多语言的更多用法可以参考laravel官方文档\r\n\r\n```php\r\nuse Dcat\\Admin\\OperationLog\\OperationLogServiceProvider;\r\n\r\nOperationLogServiceProvider::trans('log.title');\r\nOperationLogServiceProvider::trans('log.setting_title');\r\n```\r\n\r\n### 定义菜单\r\n\r\n接下来我们还需要给我们的扩展生成菜单，打开`扩展目录/src/OperationLogServiceProvider.php`，然后修改内容如下\r\n\r\n```php\r\nclass OperationLogServiceProvider extends ServiceProvider\r\n{\r\n    // 定义菜单\r\n    protected \$menu = [\r\n        [\r\n            'title' => 'Operation Log',\r\n            'uri'   => 'auth/operation-logs',\r\n            'icon'  => '', // 图标可以留空\r\n        ],\r\n    ];\r\n\r\n    public function settingForm()\r\n    {\r\n        return new Setting(\$this);\r\n    }\r\n}\r\n```\r\n\r\n如果你想注册带有层级关系的菜单，可以通过下面这种方式注册\r\n\r\n```php\r\n// 注册菜单\r\nprotected \$menu = [\r\n    [\r\n        'title' => 'Operation Log',\r\n        'uri'   => '',\r\n        'icon'  => 'feather icon-x', \r\n    ],\r\n    [\r\n        'parent' => 'Operation Log', // 指定父级菜单\r\n        'title'  => 'List',\r\n        'uri'    => 'auth/operation-logs',\r\n    ],\r\n];\r\n```\r\n\r\n### 测试扩展\r\n\r\n上面的步骤都完成之后，我们可以先开始测试一下上面的功能，验证下是否有错误，然后再进行后续的开发。\r\n\r\n\r\n由于刚开始创建扩展的时候，我们已经安装并启用了这个扩展，所以此处我们要先**卸载**当前扩展，再重新更新到`1.0.0`版本，这样数据表和菜单才会被创建。\r\n\r\n>  **卸载**功能会删除扩展的数据或数据表，请谨慎操作，以免造成数据丢失！！！\r\n\r\n打开扩展管理页面`http://域名/admin/auth/extensions`，找到当前扩展，鼠标移动到扩展行，点击 `卸载` 按钮并确认，然后重新点击`更新至1.0.0版本` 以及 `启用` 按钮，\r\n最后 `F5` 刷新浏览器即可看到新创建的菜单，点击菜单可访问操作日志管理页面`admin/auth/operation-logs`。\r\n\r\n\r\n### 注册中间件\r\n\r\n现在我们的扩展还需要一个中间件来记录用户的操作，创建文件 `扩展目录/src/Http/Middleware/LogOperation.php`，文件内容点击[LogOperation.php](https://github.com/dcat-admin/operation-log/blob/master/src/Http/Middleware/LogOperation.php)查看。\r\n\r\n然后我们需要注册这个中间件，让这个中间件生效，打开`扩展目录/src/OperationLogServiceProvider.php`，然后修改内容如下\r\n\r\n```php\r\nclass OperationLogServiceProvider extends ServiceProvider\r\n{\r\n    protected \$middleware = [\r\n        'middle' => [ // 注册中间件\r\n            LogOperation::class,\r\n        ],\r\n    ];\r\n\r\n    protected \$menu = [\r\n        [\r\n            'title' => 'Operation Log',\r\n            'uri'   => 'auth/operation-logs',\r\n        ],\r\n    ];\r\n\r\n    public function settingForm()\r\n    {\r\n        return new Setting(\$this);\r\n    }\r\n}\r\n```\r\n\r\n`\$middleware`属性中注册的中间件最后会合并到配置参数`admin.route.middleware`中，中间件注册支持以下三种类型注册\r\n\r\n1. `before` 中间件会在最前面，也就是最先执行\r\n2. `middle` 中间件会在`admin.auth`（登陆鉴权中）和`admin.permission`（权限判断）两个中间件**之间**执行\r\n3. `after`  中间件会在最后执行\r\n\r\n在这个例子中，操作日志记录用户操作时显然需要记录登陆用户的信息，所以中间件必须在 `admin.auth` 中间件之后执行，这样才能拿到登陆用户数据；\r\n并且无权限的操作也需要记录，所以必须在 `admin.permission` 中间件之前执行，所以只有注册为 `middle` 类型的中间件才能满足上述要求！\r\n\r\n注册完中间件之后，我们随意访问一下系统中的其他页面（除了操作日志管理页面），然后再访问操作日志管理页面，就可以看到用户的操作日志了，到这里插件基本开发完毕。\r\n\r\n### 配置参数（设置）\r\n\r\n在当前这个例子中，我们需要让用户能配置一些自定义参数（比如配置不需要记录操作日志的路由），所以我们还需要一个 `配置表单` 让用户能通过页面直接配置相关参数，\r\n我们需要在 `OperationLogServiceProvider` 类里面的 `settingForm` 返回这个配置表单的对象\r\n\r\n```php\r\nclass OperationLogServiceProvider extends ServiceProvider\r\n{\r\n    ...\r\n\r\n    // 返回配置表单对象，如果不需要保存配置参数，则请删除这个方法  \r\n    public function settingForm()\r\n    {\r\n        return new Setting(\$this);\r\n    }\r\n}\r\n```\r\n\r\n然后我们需要修改配置表单类 `扩展目录/src/Setting.php` 如下\r\n\r\n```php\r\nnamespace Dcat\\Admin\\OperationLog;\r\n\r\nuse Dcat\\Admin\\Extend\\Setting as Form;\r\nuse Dcat\\Admin\\OperationLog\\Models\\OperationLog;\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\nclass Setting extends Form\r\n{\r\n    // 返回表单弹窗标题\r\n    public function title()\r\n    {\r\n        return \$this->trans('log.title');\r\n    }\r\n\r\n    // 格式化待保存的配置参数值\r\n    protected function formatInput(array \$input)\r\n    {\r\n        // 转化为数组，注意如果这里保存的时候是数组，那么读取出来的时候也是数组\r\n        \$input['except'] = Helper::array(\$input['except']);\r\n        \$input['allowed_methods'] = Helper::array(\$input['allowed_methods']);\r\n\r\n        return \$input;\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        // 定义表单字段\r\n        \$this->tags('except');\r\n        \$this->multipleSelect('allowed_methods')\r\n            ->options(array_combine(OperationLog::\$methods, OperationLog::\$methods));\r\n        \$this->tags('secret_fields');\r\n    }\r\n}\r\n```\r\n\r\n以上设置完成之后我们就可以在扩展管理页面保存自定义参数了\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/a93d92fe4ae33cd353950b5fd1c1318a667bbdbbbc5d1.png)\r\n\r\n配置参数读取用法如下，我们可以在中间件 `LogOperation` 中使用这些参数\r\n\r\n```php\r\nuse Dcat\\Admin\\OperationLog\\OperationLogServiceProvider;\r\n\r\n// 读取配置参数\r\n\$except = OperationLogServiceProvider::setting('except');\r\n\$allowedMethods = OperationLogServiceProvider::setting('allowed_methods');\r\n\$secretFields = OperationLogServiceProvider::setting('secret_fields');\r\n```\r\n\r\n### 服务注册与初始化\r\n\r\n由于当前这个例子中没有使用到服务注册与初始化相关功能，所以这部分内容先略过，有相关需要的同学可以参考[扩展 - 服务注册与初始化](extension-f.md#service)章节。\r\n\r\n\r\n### 视图 (view)\r\n由于当前这个例子中没有使用到自定义静态资源的功能，所以这部分内容先略过，有相关需要的同学可以参考[扩展 - 视图](https://learnku.com/docs/dcat-admin/2.x/extended-basic-usage/9691#view)章节。\r\n\r\n\r\n### 静态资源\r\n\r\n由于当前这个例子中没有使用到自定义静态资源的功能，所以这部分内容先略过，有相关需要的同学可以参考[扩展 - 静态资源](https://learnku.com/docs/dcat-admin/2.x/extended-basic-usage/9691#assets)章节。\r\n\r\n\r\n### 修改 composer.json & README.md\r\n\r\n代码部分完成之后，需要修改`composer.json`里面的内容，将`description`、`keywords`、`license`、`authors`等内容替换为你的信息，然后不要忘记完善`README.md`，补充使用文档等相关信息。\r\n\r\n\r\n### 发布扩展\r\n\r\n\r\n#### 上传应用市场\r\n\r\n正式版发布后会上线应用市场功能，开发者可以把扩展发布到应用市场，然后用户就可以通过页面直接安装使用，敬请期待...\r\n\r\n\r\n<a name=\"github\"></a>\r\n#### 上传到Github\r\n先登录你的Github，创建一个仓库，然后按照页面上的提示把你的代码push上去\r\n\r\n```\r\ngit init\r\ngit remote add origin https://github.com/<your-name>/<your-repository>.git\r\ngit add .\r\ngit commit -am \"Initial commit.\"\r\ngit push origin master\r\n```\r\n\r\n<a name=\"packagist\"></a>\r\n#### 发布到Packagist.org\r\n接下来就是发布你的项目到`Packagist.org`，如果没有账号的话，先注册一个，然后打开顶部导航的`Submit`, 填入仓库地址提交\r\n\r\n默认情况下，当您推送新代码时，`Packagist.org`不会自动更新，所以，您需要创建一个GitHub服务钩子， 你也可以使用点击页面上的`Update`按钮手动更新它，但我建议自动执行这个过程\r\n\r\n提交之后，由于各地的镜像同步时间的延迟，可能在用 `composer` 安装的时候，会暂时找不到你的项目，这个时候可能需要等待同步完成\r\n\r\n发布完成之后就可以通过 `composer` 安装你的扩展了", 'order' => 2, 'created_at' => "2024-06-26 15:05:39", 'updated_at' => "2024-06-26 15:05:39", 'slug' => "basic-use"],
            ['id' => 67, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "异步加载", 'content' => "# 异步加载基本使用\r\n\r\n> Since `v1.7.0` 异步加载功能支持**静态资源按需加载**的特性，目前内置的**所有组件**都支持使用异步渲染功能，并且支持在页面的**任意位置**中使用\r\n\r\n通过异步加载功能可以让页面中的整体或局部组件使用`ajax`异步渲染，从而提高页面加载效率（例如弹窗异步加载表单）。\r\n\r\n\r\n## 基本用法\r\n\r\n下面通过一个简单的示例来演示异步加载功能的用法\r\n\r\n\r\n先定义一个异步渲染类，继承`Dcat\\Admin\\Support\\LazyRenderable`\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Renderable;\r\n\r\nuse App\\Admin\\Widgets\\Charts\\Bar;\r\nuse Dcat\\Admin\\Support\\LazyRenderable;\r\n\r\nclass PostChart extends LazyRenderable\r\n{\r\n    public function render()\r\n    {\r\n    \t// 获取外部传递的参数\r\n    \t\$id = \$this->id;\r\n        \r\n    \t// 查询数据逻辑\r\n    \t\$data = [...];\r\n    \t\r\n    \t// 这里可以返回内置组件，也可以返回视图文件或HTML字符串\r\n        return Bar::make(\$data);\r\n\t}\r\n}\r\n```\r\n\r\n然后需要把渲染类实例传入`Dcat\\Admin\\Widgets\\Lazy`对象中，才能最终实现异步渲染的效果\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\nuse Dcat\\Admin\\Widgets\\Lazy;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\npublic function index(Content \$content)\r\n{\r\n    // 实例化异步渲染类并传递自定义参数\r\n    \$chart = PostChart::make(['id' => ...]);\r\n    \r\n\treturn \$content->body(Lazy::make(\$chart));\r\n}\r\n```\r\n\r\n也可以放在内置组件中\r\n\r\n> 如果是 `Dcat\\Admin\\Widgets\\Card`、`Dcat\\Admin\\Widgets\\Box`、`Dcat\\Admin\\Widgets\\Modal`、`Dcat\\Admin\\Widgets\\Tab`等组件，则可以略过`Dcat\\Admin\\Widgets\\Lazy`组件，直接传递渲染类实例\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\npublic function index(Content \$content)\r\n{\r\n    \$chart = PostChart::make(['id' => ...]);\r\n    \r\n    // Card 组件支持直接传递 LazyRenderable 实例，可以略过 Lazy 对象\r\n\treturn \$content->body(Card::make(\$chart));\r\n}\r\n\r\n// 如果是 Modal、Box 等等都可以直接略过 Lazy\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\n\r\n\$chart = PostChart::make(['id' => ...]);\r\n \r\n\$modal = Modal::make()\r\n\t->lg()\r\n\t->title('标题')\r\n\t->delay(300) // 如果是异步渲染图表则需要设置一个延迟时间，否则可能导致图表渲染异常\r\n\t->body(\$chart);\r\n```\r\n\r\n当然也可以放置在视图或者是`HTML`代码中\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\nuse Dcat\\Admin\\Widgets\\Lazy;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\npublic function index(Content \$content)\r\n{\r\n    \$chart = Lazy::make(PostChart::make(['id' => ...]));\r\n    \r\n\treturn \$content->body(view('admin.xxx', ['chart' => \$chart]));\r\n}\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/1e95df9e8cdf05f3bea6921d0bada29b667bbe134062b.gif)\r\n\r\n\r\n### Dcat\\Admin\\Support\\LazyRenderable\r\n\r\n#### 参数传递 (payload)\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\n\r\nPostChart::make(['key1' => '值', ...]);\r\n\r\n// 也可以通过 payload 方法传递\r\nPostChart::make()->payload(['key1' => '值', ...]);\r\n```\r\n\r\n获取参数\r\n\r\n```php\r\nclass PostChart extends LazyRenderable\r\n{\r\n    protected \$title = ['#', '标题', '内容'];\r\n    \r\n    public function render()\r\n    {\r\n    \t// 获取外部传递的参数\r\n    \t\$key1 = \$this->key1;\r\n    \t\$key2 = \$this->key2;\r\n        \r\n    \t...\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### 载入JS和CSS\r\n\r\n异步加载功能同样支持**静态资源按需加载**的特性，并且用法也很简单\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Renderable;\r\n\r\nuse Dcat\\Admin\\Support\\LazyRenderable;\r\nuse Dcat\\Admin\\Admin;\r\n\r\nclass CustomView extends LazyRenderable\r\n{\r\n    // 这里写入需要加载的js和css文件路径\r\n    public static \$js = [\r\n    \t'xxx/xxx1.js',\r\n    \t'xxx/xxx2.js',     \r\n\t];\r\n    \r\n    public static \$css = [\r\n        'xxx/xxx1.css',\r\n\t\t'xxx/xxx2.css', \r\n\t];\r\n    \r\n    protected function addScript()\r\n    {\r\n        Admin::script(\r\n            <<<JS\r\n\t\tconsole.log('JS脚本都加载完了~');\r\nJS\r\n        );\r\n    }\r\n    \r\n    public function render()\r\n    {\r\n        // 添加你的 JS 代码\r\n        \$this->addScript();\r\n        \r\n     \treturn view('admin.custom', ['...']);   \r\n\t}\r\n}\r\n```\r\n\r\n模板文件代码示例，注意不要包含`body`和`html`等标签\r\n\r\n```HTML\r\n<div id=\"custom\" class=\"custom\"><h2>异步加载功能</h2></div>\r\n\r\n<script>\r\nDcat.ready(function () {\r\n    // JS 代码也可以放在模板文件中\r\n    console.log('模板文件执行js~');\r\n});\r\n</script>\r\n```\r\n\r\n\r\n### Dcat\\Admin\\Widgets\\Lazy\r\n\r\n#### onLoad\r\n\r\n通过此方法可以监听异步加载完成事件\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\nuse Dcat\\Admin\\Widgets\\Lazy;\r\n\r\n\$chart = Lazy::make(PostChart::make())->onLoad(\r\n\t<<<JS\r\nconsole.log('组件渲染完成');\t\r\nJS\r\n);\r\n```\r\n\r\n#### load\r\n\r\n此方法可以控制是否立即渲染异步组件，默认值是`true`\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\nuse Dcat\\Admin\\Widgets\\Lazy;\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$lazy = Lazy::make(PostChart::make())->load(false);\r\n\r\nAdmin::script(\r\n\t<<<JS\r\nsetTimeout(function () {\r\n\t// 3秒后自动触发异步渲染事件\r\n\t{\$lazy->getLoadScript()}\r\n}, 3000);\t\r\nJS\r\n);\r\n```\r\n\r\n#### JS事件\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\nuse Dcat\\Admin\\Widgets\\Lazy;\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$lazy = Lazy::make(PostChart::make());\r\n\r\nAdmin::script(\r\n\t<<<JS\r\n// 手动触发异步渲染事件\t\r\n\$('{\$lazy->getElementSelector()}').trigger('lazy:load');\r\n\r\n// 监听渲染完成事件\r\n\$('{\$lazy->getElementSelector()}').on('lazy:loaded', function () {\r\n\tconsole.log('组件渲染完成了')\r\n});\r\nJS\r\n);\r\n```\r\n\r\n\r\n<a name=\"lazy-table\"></a>\r\n## 异步加载数据表格\r\n\r\n如果需要异步加载数据表格，则定义渲染类时需要继承`Dcat\\Admin\\Grid\\LazyRenderable`\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Renderable;\r\n\r\nuse Dcat\\Admin\\Grid;\r\nuse Dcat\\Admin\\Grid\\LazyRenderable;\r\nuse Dcat\\Admin\\Models\\Administrator;\r\n\r\nclass UserTable extends LazyRenderable\r\n{\r\n    public function grid(): Grid\r\n    {\r\n        return Grid::make(new Administrator(), function (Grid \$grid) {\r\n            \$grid->column('id');\r\n            \$grid->column('username');\r\n            \$grid->column('name');\r\n            \$grid->column('created_at');\r\n            \$grid->column('updated_at');\r\n\r\n            \$grid->quickSearch(['id', 'username', 'name']);\r\n\r\n            \$grid->paginate(10);\r\n            \$grid->disableActions();\r\n\r\n            \$grid->filter(function (Grid\\Filter \$filter) {\r\n                \$filter->like('username')->width(4);\r\n                \$filter->like('name')->width(4);\r\n            });\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\npublic function index(Content \$content)\r\n{\r\n\t\$modal = Modal::make()\r\n\t\t->lg()\r\n\t\t->title('异步加载 - 表格')\r\n\t\t->body(UserTable::make()) // Modal 组件支持直接传递 渲染类实例\r\n\t\t->button('打开表格');\r\n\r\n\treturn \$content->body(\$modal);\r\n}\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/ca39b97d8a0a1fa62f1cb9fb47ac061c667bbe2c47669.gif)\r\n\r\n\r\n\r\n同样渲染类的实例也可以附加到 `Dcat\\Admin\\Widgets\\Card`、`Dcat\\Admin\\Widgets\\Box`、`Dcat\\Admin\\Widgets\\Tab`等组件中\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\n\r\n\$table = UserTable::make();\r\n\r\n\$card = Card::make('标题', \$table)->withHeaderBorder();\r\n```\r\n\r\n以上代码渲染`UserTable`实例时，其实是底层自动加上了`Dcat\\Admin\\Widgets\\LazyTable`类实例，以上代码等同于\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\nuse Dcat\\Admin\\Widgets\\LazyTable;\r\n\r\n\$table = LazyTable::make(UserTable::make()->simple());\r\n\r\n\$card = Card::make('标题', \$table)->withHeaderBorder();\r\n```\r\n\r\n### Dcat\\Admin\\Grid\\LazyRenderable\r\n\r\n`Dcat\\Admin\\Grid\\LazyRenderable`用于异步渲染数据表格，是`Dcat\\Admin\\Support\\LazyRenderable`的子类\r\n\r\n#### 简化模式\r\n\r\n此功能会去除简化一些数据表格默认开启的功能，默认不启用\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\LazyTable;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\npublic function index(Content \$content)\r\n{\r\n\t\$table = UserTable::make()->simple();\r\n\r\n\treturn \$content->body(LazyTable::make(\$table));\r\n}\r\n```\r\n\r\n注意，如果把渲染类实例直接注入到`Dcat\\Admin\\Widgets\\Card`、`Dcat\\Admin\\Widgets\\Box`、`Dcat\\Admin\\Widgets\\Tab`和`Dcat\\Admin\\Widgets\\Modal`等组件时，则会自动启用`simple`模式\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\n\r\n// 这里会自动启用 simple 模式\r\n\$card = Card::make('标题', UserTable::make())->withHeaderBorder();\r\n```\r\n\r\n如果你不希望启用 simple 模式，可以传入 LazyTable 实例\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\nuse Dcat\\Admin\\Widgets\\LazyTable;\r\n\r\n\$table = LazyTable::make(UserTable::make());\r\n\r\n\$card = Card::make('标题', \$table)->withHeaderBorder();\r\n```\r\n\r\n### Dcat\\Admin\\Widgets\\LazyTable\r\n\r\n#### onLoad\r\n\r\n通过此方法可以监听异步加载完成事件\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\PostChart;\r\nuse Dcat\\Admin\\Widgets\\Lazy;\r\n\r\n\$chart = Lazy::make(PostChart::make())->onLoad(\r\n\t<<<JS\r\nconsole.log('组件渲染完成');\t\r\nJS\r\n);\r\n```\r\n\r\n#### load\r\n\r\n此方法可以控制是否立即渲染异步组件，默认值是`true`\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\LazyTable;\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$lazy = LazyTable::make(UserTable::make())->load(false);\r\n\r\nAdmin::script(\r\n\t<<<JS\r\nsetTimeout(function () {\r\n\t// 3秒后自动触发异步渲染事件\r\n\t{\$lazy->getLoadScript()}\r\n}, 3000);\t\r\nJS\r\n);\r\n```\r\n\r\n#### JS事件\r\n\r\n```php\r\nuse App\\Admin\\Renderable\\UserTable;\r\nuse Dcat\\Admin\\Widgets\\LazyTable;\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$lazy = LazyTable::make(UserTable::make());\r\n\r\nAdmin::script(\r\n\t<<<JS\r\n// 手动触发异步渲染事件\t\r\n\$('{\$lazy->getElementSelector()}').trigger('table:load');\r\n\r\n// 监听渲染完成事件\r\n\$('{\$lazy->getElementSelector()}').on('table:loaded', function () {\r\n\tconsole.log('组件渲染完成了')\r\n});\r\nJS\r\n);\r\n```\r\n\r\n\r\n<a name=\"lazy-form\"></a>\r\n## 异步加载工具表单\r\n\r\n定义工具表单类，实现`Dcat\\Admin\\Contracts\\LazyRenderable`，并载入`Dcat\\Admin\\Traits\\LazyWidget`这个`trait`\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass UserProfile extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget;\r\n\r\n    public function handle(array \$input)\r\n    {\r\n        return \$this->success('保存成功');\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        \$this->text('name', trans('admin.name'))->required()->help('用户昵称');\r\n        \$this->image('avatar', trans('admin.avatar'))->autoUpload();\r\n\r\n        \$this->password('old_password', trans('admin.old_password'));\r\n\r\n        \$this->password('password', trans('admin.password'))\r\n            ->minLength(5)\r\n            ->maxLength(20)\r\n            ->customFormat(function (\$v) {\r\n                if (\$v == \$this->password) {\r\n                    return;\r\n                }\r\n\r\n                return \$v;\r\n            })\r\n            ->help('请输入5-20个字符');\r\n        \$this->password('password_confirmation', trans('admin.password_confirmation'))\r\n            ->same('password')\r\n            ->help('请输入确认密码');\r\n    }\r\n}\r\n```\r\n\r\n\r\n使用\r\n\r\n\r\n```php\r\nuse App\\Admin\\Forms\\UserProfile;\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\npublic function index(Content \$content)\r\n{\r\n\t\$modal = Modal::make()\r\n\t\t->lg()\r\n\t\t->title('异步加载 - 表单')\r\n\t\t->body(UserProfile::make()) // Modal 组件支持直接传递渲染类实例\r\n\t\t->button('打开表单');\r\n\r\n\treturn \$content->body(\$modal);\r\n}\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/8cb3591badad9f5c398af83d51c0fe10667bbe3a16478.gif)\r\n\r\n\r\n当然异步表单实例，也可以在其他组件中使用\r\n\r\n```php\r\nuse App\\Admin\\Forms\\UserProfile;\r\nuse Dcat\\Admin\\Widgets\\Lazy;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\n\r\n\$form = UserProfile::make();\r\n\r\n// 直接传递到 Card 组件中\r\n\$card = Card::make(\$form);\r\n\r\n// 等同于\r\n\$card = Card::make(Lazy::make(\$form));\r\n```\r\n\r\n\r\n### 传递自定义参数\r\n\r\n给异步表单传递参数非常简单，修改上面表单类如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass UserProfile extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget;\r\n\r\n    public function handle(array \$input)\r\n    {\r\n        // 获取外部传递的参数\r\n        \$key1 = \$this->payload['key1'] ?? null;\r\n        \$key2 = \$this->payload['key1'] ?? null;\r\n        \r\n        return \$this->success('保存成功');\r\n    }\r\n\r\n    public function form()\r\n    {\r\n        // 获取外部传递的参数\r\n\t\t\$key1 = \$this->payload['key1'] ?? null;\r\n\t\t\$key2 = \$this->payload['key1'] ?? null;\r\n        \r\n        \$this->text('name', trans('admin.name'))->required()->help('用户昵称');\r\n        \$this->image('avatar', trans('admin.avatar'))->autoUpload();\r\n\r\n        \$this->password('old_password', trans('admin.old_password'));\r\n\r\n        \$this->password('password', trans('admin.password'))\r\n            ->minLength(5)\r\n            ->maxLength(20)\r\n            ->customFormat(function (\$v) {\r\n                if (\$v == \$this->password) {\r\n                    return;\r\n                }\r\n\r\n                return \$v;\r\n            })\r\n            ->help('请输入5-20个字符');\r\n        \$this->password('password_confirmation', trans('admin.password_confirmation'))\r\n            ->same('password')\r\n            ->help('请输入确认密码');\r\n    }\r\n    \r\n    public function default()\r\n    {\r\n        // 获取外部传递的参数\r\n\t\t\$key1 = \$this->payload['key1'] ?? null;\r\n\t\t\$key2 = \$this->payload['key1'] ?? null;\r\n        \r\n        return [\r\n            'name' => '...',\r\n\t\t];\r\n    }\r\n}\r\n```\r\n\r\n传递参数代码如下\r\n\r\n```php\r\n// 传递自定义参数\r\n\$form = UserProfile::make()->payload(['key1' => '...', 'key2' => '...']);\r\n\r\n\$modal = Modal::make()\r\n\t->lg()\r\n\t->title('异步加载 - 表单')\r\n\t->body(\$form)\r\n\t->button('打开表单');\r\n```", 'order' => 1, 'created_at' => "2024-06-26 15:07:42", 'updated_at' => "2024-06-26 15:07:42", 'slug' => "asynchronous-loading"],
            ['id' => 68, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "图表", 'content' => "# 图表\r\n\r\n`Dcat Admin`引入了[apexcharts图表](https://apexcharts.com/)功能，通过`Dcat\\Admin\\Widgets\\ApexCharts\\Chart`这个类可以帮助开发者快速渲染图表。\r\n\r\n\r\n### 简单用法\r\n\r\n如果你需要构建一个图表，可以参考下面的方式\r\n\r\n> 更多类型的图表，请参考[apexcharts官方文档](https://apexcharts.com/)。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Widgets\\Charts;\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Widgets\\ApexCharts\\Chart;\r\n\r\nclass MyBar extends Chart\r\n{\r\n    public function __construct(\$containerSelector = null, \$options = [])\r\n    {\r\n        parent::__construct(\$containerSelector, \$options);\r\n\r\n        \$this->setUpOptions();\r\n    }\r\n\r\n    /**\r\n     * 初始化图表配置\r\n     */\r\n    protected function setUpOptions()\r\n    {\r\n        \$color = Admin::color();\r\n\r\n        \$colors = [\$color->primary(), \$color->primaryDarker()];\r\n\r\n        \$this->options([\r\n            'colors' => \$colors,\r\n            'chart' => [\r\n                'type' => 'bar',\r\n                'height' => 430\r\n            ],\r\n            'plotOptions' => [\r\n                'bar' => [\r\n                    'horizontal' => true,\r\n                    'dataLabels' => [\r\n                        'position' => 'top',\r\n                    ],\r\n                ]\r\n            ],\r\n            'dataLabels' => [\r\n                'enabled' => true,\r\n                'offsetX' => -6,\r\n                'style' => [\r\n                    'fontSize' => '12px',\r\n                    'colors' => ['#fff']\r\n                ]\r\n            ],\r\n            'stroke' => [\r\n                'show' => true,\r\n                'width' => 1,\r\n                'colors' => ['#fff']\r\n            ],\r\n            'xaxis' => [\r\n                'categories' => [],\r\n            ],\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 处理图表数据\r\n     */\r\n    protected function buildData()\r\n    {\r\n        // 执行你的数据查询逻辑\r\n        \$data = [\r\n            [\r\n                'data' => [44, 55, 41, 64, 22, 43, 21]\r\n            ],\r\n            [\r\n                'data' => [53, 32, 33, 52, 13, 44, 32]\r\n            ]\r\n        ];\r\n        \$categories = [2001, 2002, 2003, 2004, 2005, 2006, 2007];\r\n\r\n        \$this->withData(\$data);\r\n        \$this->withCategories(\$categories);\r\n    }\r\n\r\n    /**\r\n     * 设置图表数据\r\n     *\r\n     * @param array \$data\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withData(array \$data)\r\n    {\r\n        return \$this->option('series', \$data);\r\n    }\r\n\r\n    /**\r\n     * 设置图表类别.\r\n     *\r\n     * @param array \$data\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withCategories(array \$data)\r\n    {\r\n        return \$this->option('xaxis.categories', \$data);\r\n    }\r\n\r\n    /**\r\n     * 渲染图表\r\n     *\r\n     * @return string\r\n     */\r\n    public function render()\r\n    {\r\n        \$this->buildData();\r\n\r\n        return parent::render();\r\n    }\r\n}\r\n```\r\n\r\n使用\r\n\r\n```php\r\n<?php\r\n\r\nuse App\\Admin\\Widgets\\Charts\\MyBar;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass MyController\r\n{\r\n    public function index(Content \$content)\r\n    {\r\n        return \$content->body(\r\n            Card::make('我的图表', MyBar::make())\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/13086409386f989763e78236045e644c667bbe7851fa9.png)\r\n\r\n### 图表与后端API交互\r\n\r\n如果你的图表需要与后端API交互，可以参考以下方式\r\n\r\n> 为了方便阅读，这里的示例代码直接继承前面定义的`MyBar`类。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Widgets\\Charts;\r\n\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass MyAjaxBar extends MyBar\r\n{\r\n    protected \$id;\r\n    protected \$username;\r\n    \r\n    // 这里的参数一定要设置默认值\r\n    public function __construct(\$id = null, \$username = null) \r\n    {\r\n        parent::__construct();\r\n        \r\n        \$this->id = \$id;\r\n        \$this->username = \$username;\r\n    }\r\n    \r\n    /**\r\n     * 处理请求\r\n     * 如果你的图表类中包含此方法，则可以通过此方法处理前端通过ajax提交的获取图表数据的请求\r\n     *\r\n     * @param Request \$request\r\n     * @return mixed|void\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        // 获取 parameters 方法设置的自定义参数\r\n        \$id = \$request->get('id');\r\n        \$username = \$request->get('username');\r\n        \r\n        switch ((int) \$request->get('option')) {\r\n            case 30:\r\n                // 你的数据查询逻辑\r\n                \$data = [\r\n                    [\r\n                        'data' => [44, 55, 41, 64, 22, 43, 21]\r\n                    ],\r\n                    [\r\n                        'data' => [53, 32, 33, 52, 13, 44, 32]\r\n                    ]\r\n                ];\r\n                \$categories = [2001, 2002, 2003, 2004, 2005, 2006, 2007];\r\n\r\n                break;\r\n            case 28:\r\n                // 你的数据查询逻辑\r\n                \$data = [\r\n                    [\r\n                        'data' => [44, 55, 41, 64, 22, 43, 21]\r\n                    ],\r\n                    [\r\n                        'data' => [53, 32, 33, 52, 13, 44, 32]\r\n                    ]\r\n                ];\r\n                \$categories = [2001, 2002, 2003, 2004, 2005, 2006, 2007];\r\n\r\n                break;\r\n            case 7:\r\n            default:\r\n                // 你的数据查询逻辑\r\n                \$data = [\r\n                    [\r\n                        'data' => [44, 55, 41, 64, 22, 43, 21]\r\n                    ],\r\n                    [\r\n                        'data' => [53, 32, 33, 52, 13, 44, 32]\r\n                    ]\r\n                ];\r\n                \$categories = [2001, 2002, 2003, 2004, 2005, 2006, 2007];\r\n                break;\r\n        }\r\n\r\n        \$this->withData(\$data);\r\n        \$this->withCategories(\$categories);\r\n    }\r\n\r\n\t/**\r\n \t * 这里返回需要异步传递到 handler 方法的参数 \r\n \t * \r\n\t * @return array\r\n\t */\r\n\tpublic function parameters(): array\r\n\t{\r\n\t    return [\r\n\t        'id' \t   => \$this->id,\r\n\t        'username' => \$this->username,\r\n\t\t];\r\n\t}\r\n\r\n    /**\r\n     * 这里覆写父类的方法，不再查询数据\r\n     */\r\n    protected function buildData()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n用户点击构建下拉菜单加载不同的图表数据\r\n\r\n```php\r\n<?php\r\n\r\nuse App\\Admin\\Widgets\\Charts\\MyAjaxBar;\r\nuse Dcat\\Admin\\Widgets\\Dropdown;\r\nuse Dcat\\Admin\\Widgets\\Box;\r\nuse Dcat\\Admin\\Layout\\Row;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass MyController\r\n{\r\n    public function index(Content \$content)\r\n    {\r\n        return \$content->body(function (Row \$row) {\r\n            // 构建下拉菜单，当点击菜单时发起请求获取数据重新渲染图表\r\n            \$menu = [\r\n                '7'  => '最近7天',\r\n                '28' => '最近28天',\r\n                '30' => '最近30天',\r\n            ];\r\n            \$dropdown = Dropdown::make(\$menu)\r\n                ->button(current(\$menu))\r\n                ->click()\r\n                ->map(function (\$v, \$k) {\r\n                    // 此处设置的 data-xxx 属性会作为post数据发送到后端api\r\n                    return \"<a class='switch-bar' data-option='{\$k}'>{\$v}</a>\";\r\n                });\r\n\r\n\t\t\t// 传递自定义参数\r\n            \$id = ...;\r\n            \$username = ...;\r\n\r\n            \$bar = MyAjaxBar::make(\$id, \$username)\r\n                ->fetching('\$(\"#my-box\").loading()') // 设置loading效果\r\n                ->fetched('\$(\"#my-box\").loading(false)') // 移除loading效果\r\n                ->click('.switch-bar'); // 设置图表点击菜单则重新发起请求，且被点击的目标元素上的 data-xxx 属性会被作为post数据发送到后端API\r\n\r\n            \$box = Box::make('我的图表2', \$bar)\r\n                ->id('my-box') // 设置盒子的ID\r\n                ->tool(\$dropdown); // 设置下拉菜单按钮\r\n\r\n            \$row->column(12, \$box);\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/ea25c5c7ac930cad4ee58aa0cc0f894f667bbe83a897a.png)\r\n\r\n\r\n<a href=\"js\"></a>\r\n### 设置图表配置为可执行JS代码\r\n\r\n如果你需要在图表配置加入可执行的JS代码，可参考以下方式\r\n\r\n```php\r\nuse Dcat\\Admin\\Support\\JavaScript;\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Widgets\\ApexCharts\\Chart;\r\n\r\nclass MyBar extends Chart\r\n{\r\n    public function __construct(\$containerSelector = null, \$options = [])\r\n    {\r\n        parent::__construct(\$containerSelector, \$options);\r\n\r\n        \$this->setUpOptions();\r\n    }\r\n\r\n    /**\r\n     * 初始化图表配置\r\n     */\r\n    protected function setUpOptions()\r\n    {\r\n        \$number = 20;\r\n    \r\n        \$this->option(\r\n            'plotOptions.radialBar.dataLabels.total.formatter',\r\n            // 这个值最后段代码会作为JS代码执行\r\n            JavaScript::make(\"function () { return {\$number}; }\")\r\n        );\r\n        \r\n        ...\r\n    }\r\n    \r\n    ...   \r\n}    \r\n```", 'order' => 2, 'created_at' => "2024-06-26 15:08:57", 'updated_at' => "2024-06-26 15:08:57", 'slug' => "chart"],
            ['id' => 69, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "数据统计卡片", 'content' => "# 数据统计卡片\r\n\r\n`Dcat Admin`中内置了多种常用数据统计卡片，可以非常方便的与后端API交互，下面逐一介绍用法。\r\n\r\n## 基础卡片\r\n\r\n基础卡片(`Dcat\\Admin\\Widgets\\Metrics\\Card`)是一种默认不显示图表的卡片，也是数据卡片中最简单的一种。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/af3b9027d46d26f05cab1c3826c22262667bbee2875bc.png)\r\n\r\n\r\n### 简单示例\r\n\r\n基础卡片的使用可参考内置的`App\\Admin\\Metrics\\Examples\\TotalUsers`类。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Metrics\\Examples;\r\n\r\nuse Dcat\\Admin\\Widgets\\Metrics\\Card;\r\nuse Illuminate\\Contracts\\Support\\Renderable;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass TotalUsers extends Card\r\n{\r\n    /**\r\n     * 卡片底部内容.\r\n     *\r\n     * @var string|Renderable|\\Closure\r\n     */\r\n    protected \$footer;\r\n    \r\n    // 保存自定义参数\r\n    protected \$data = [];\r\n    \r\n    // 构造方法参数必须设置默认值\r\n    public function __construct(array \$data = []) \r\n    {\r\n        \$this->data = [];\r\n        \r\n        parent::__construct();\r\n    }\r\n\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n\r\n        // 设置标题\r\n        \$this->title('Total Users');\r\n        // 设置下拉菜单\r\n        \$this->dropdown([\r\n            '7' => 'Last 7 Days',\r\n            '28' => 'Last 28 Days',\r\n            '30' => 'Last Month',\r\n            '365' => 'Last Year',\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 处理请求.\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return void\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        // 获取外部传递的自定义参数\r\n        \$key1 = \$request->get('key1');\r\n        \r\n        switch (\$request->get('option')) {\r\n            case '365':\r\n                \$this->content(mt_rand(600, 1500));\r\n                \$this->down(mt_rand(1, 30));\r\n                break;\r\n            case '30':\r\n                \$this->content(mt_rand(170, 250));\r\n                \$this->up(mt_rand(12, 50));\r\n                break;\r\n            case '28':\r\n                \$this->content(mt_rand(155, 200));\r\n                \$this->up(mt_rand(5, 50));\r\n                break;\r\n            case '7':\r\n            default:\r\n                \$this->content(143);\r\n                \$this->up(15);\r\n        }\r\n    }\r\n    \r\n    // 传递自定义参数到 handle 方法\r\n    public function parameters() : array\r\n    {\r\n        return \$this->data;\r\n\t}\r\n\r\n    /**\r\n     * @param int \$percent\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function up(\$percent)\r\n    {\r\n        return \$this->footer(\r\n            \"<i class=\\\"feather icon-trending-up text-success\\\"></i> {\$percent}% Increase\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param int \$percent\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function down(\$percent)\r\n    {\r\n        return \$this->footer(\r\n            \"<i class=\\\"feather icon-trending-down text-danger\\\"></i> {\$percent}% Decrease\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 设置卡片底部内容\r\n     *\r\n     * @param string|Renderable|\\Closure \$footer\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function footer(\$footer)\r\n    {\r\n        \$this->footer = \$footer;\r\n\r\n        return \$this;\r\n    }\r\n\r\n    /**\r\n     * 渲染卡片内容.\r\n     *\r\n     * @return string\r\n     */\r\n    public function renderContent()\r\n    {\r\n        \$content = parent::renderContent();\r\n\r\n        return <<<HTML\r\n<div class=\"d-flex justify-content-between align-items-center mt-1\" style=\"margin-bottom: 2px\">\r\n    <h2 class=\"ml-1 font-large-1\">{\$content}</h2>\r\n</div>\r\n<div class=\"ml-1 mt-1 font-weight-bold text-80\">\r\n    {\$this->renderFooter()}\r\n</div>\r\nHTML;\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     */\r\n    public function renderFooter()\r\n    {\r\n        return \$this->toString(\$this->footer);\r\n    }\r\n}\r\n```\r\n\r\n### 基础卡片方法\r\n\r\n#### 初始化 (init)\r\n\r\n`init`方法会在卡片构造方法中被调用，可用于卡片初始化操作。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n    \r\n        // 你的初始化操作\r\n    }\r\n}\r\n```\r\n\r\n\r\n#### 设置标题 (title)\r\n\r\n通过`title`方法可以在卡片的左上角设置一个标题\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n    \r\n        \$this->title('活跃用户');\r\n    }\r\n}\r\n```\r\n\r\n#### 设置下拉菜单 (dropdown)\r\n\r\n通过`dropdown`方法可以在卡片右上角设置一个下拉菜单按钮，此功能需要结合`handle`方法一起使用才有效果。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        \$this->dropdown([\r\n            '7' => 'Last 7 Days',\r\n            '28' => 'Last 28 Days',\r\n            '30' => 'Last Month',\r\n            '365' => 'Last Year',\r\n        ]);\r\n    }\r\n}\r\n```\r\n\r\n#### 设置副标题 (subTitle)\r\n\r\n通过`subTitle`方法可以在卡片的又上角设置一个副标题。\r\n\r\n> 此方法与`dropdown`方法会有冲突，如果设置过下拉菜单按钮，就不需要设置副标题。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n    \r\n        \$this->subTitle('最近30天');\r\n    }\r\n}\r\n```\r\n\r\n#### 设置头部内容 (header)\r\n\r\n通过`header`方法可以设置卡片头部内容，此方法接受一个参数，可以是`string`、`Closure`，也可以是模板视图(`Illuminate\\Contracts\\Support\\Renderable`)。\r\n\r\n> 通过此方法设置的内容与`title`在同一个`div`容器内。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n    \r\n        \$this->header(\r\n            <<<HTML\r\n            <div>头部内容</div>        \r\nHTML            \r\n        );\r\n        \r\n        // 也可以传闭包\r\n        \$this->header(function () {\r\n            return ...;\r\n        });\r\n        \r\n        // 也可以传视图\r\n        \$this->header(view('...'));\r\n    }\r\n}\r\n```\r\n\r\n#### 设置主体内容 (content)\r\n\r\n通过`content`方法可以设置卡片的内容主体，此方法接受一个参数，可以是`string`、`Closure`，也可以是模板视图(`Illuminate\\Contracts\\Support\\Renderable`)。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->withContent('自定义内容');\r\n    }\r\n\r\n    /**\r\n     * 卡片内容\r\n     *\r\n     * @param string \$content\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withContent(\$content)\r\n    {\r\n        return \$this->content(\r\n            <<<HTML\r\n<div class=\"d-flex flex-column flex-wrap text-center\">\r\n    <h1 class=\"font-large-2 mt-2 mb-0\">{\$content}</h1>\r\n    <small>Tickets</small>\r\n</div>\r\nHTML\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n#### 设置高度 (height)\r\n\r\n通过`height`方法可以设置卡片的最小高度，默认`165`。\r\n\r\n```php\r\nprotected function init()\r\n{\r\n    parent::init();\r\n    \r\n    \$this->height(200);\r\n}\r\n```\r\n\r\n\r\n#### 传递自定义参数 (parameters)\r\n\r\n通过 `parameters` 方法可以把参数传递到 `handle` 方法\r\n\r\n```php\r\n// 传递自定义参数到 handle 方法\r\npublic function parameters() : array\r\n{\r\n\treturn [\r\n\t\t'key1' => 'value1',\r\n\t\t\r\n\t\t...\r\n\t];\r\n}\r\n```\r\n\r\n获取自定义参数\r\n```php\r\npublic function handle(Request \$request)\r\n{\r\n    // 获取自定义参数\r\n\t\$key1 = \$request->get('key1');\r\n}\r\n```\r\n\r\n#### 渲染内容 (renderContent)\r\n\r\n为了保证内容的灵活和可扩展性，系统没有对卡片内容预设任何样式(即设置什么内容就只显示什么内容，没有预设布局或其他样式)，\r\n通过`renderContent`方法即可以更改卡片默认的渲染方式。\r\n\r\n以下的例子演示了`renderContent`方法的主要功能\r\n```php\r\nuse Dcat\\Admin\\Support\\Helper;\r\n\r\nclass MyCard extend Card\r\n{\r\n    protected \$footer;\r\n    \r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        // 设置卡片内容\r\n        \$this->content(...);\r\n        // 设置卡片底部内容\r\n        \$this->footer(...);\r\n    }\r\n    \r\n    /**\r\n     * 增加此方法设置卡片底部内容\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function footer(\$footer)\r\n    {\r\n        \$this->footer = \$footer;\r\n        \r\n        return \$this;\r\n    }\r\n    \r\n    /**\r\n     * 渲染底部内容\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function renderFooter()\r\n    {\r\n        return Helper::render(\$this->footer);\r\n    }\r\n    \r\n    /**\r\n     * 渲染卡片内容\r\n     * 在这里即可加上卡片底部内容\r\n     *\r\n     * @return string\r\n     */\r\n    public function renderContent()\r\n    {\r\n        \$content = parent::renderContent();\r\n        \$footer = \$this->renderFooter();\r\n    \r\n        return <<<HTML\r\n<div class=\"card-content\">\r\n    <div class=\"row\">\r\n        {\$content}\r\n    </div>\r\n    <div class=\"metric-footer\">\r\n        {\$footer}\r\n    </div>\r\n</div>\r\nHTML;      \r\n    }\r\n}\r\n```\r\n\r\n#### 启用以及渲染图表\r\n\r\n基本卡片默认是启用图表功能的，通过`useChart`方法可以启用图表功能，调用此方法之后会实例化一个图表类，然后保存在`chart`属性当中。\r\n\r\n当图表启用之后，还需要在你的卡片内容中渲染图表，否则图表虽然被初始化了，但是仍无法显示。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n    \r\n        // 启用图表\r\n        \$this->useChart();\r\n    }\r\n    \r\n    /**\r\n     * 渲染卡片内容\r\n     * 需要在这里加上渲染图表的代码\r\n     *\r\n     * @return string\r\n     */\r\n    public function renderContent()\r\n    {\r\n        // 通过 content 方法设置的内容\r\n        \$content = parent::renderContent();\r\n        \r\n        // 渲染图表\r\n        \$chart = \$this->renderChart();\r\n        \r\n        return <<<HTML\r\n    <div class=\"my-chart\">{\$chart}</div>\r\n    {\$content}    \r\nHTML           \r\n    }\r\n}\r\n```\r\n\r\n#### 图表默认配置 (defaultChartOptions)\r\n\r\n通过`defaultChartOptions`方法可以设置图表默认配置，此方法只有启用图表之后才有效。\r\n\r\n> 这里的图表配置同样支持设置可执行`JS`代码，详细用法请参考[图表配置设置可执行JS代码](https://learnku.com/docs/dcat-admin/2.x/chart/8129#57124c)。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function defaultChartOptions()\r\n    {\r\n        // 返回图表的配置\r\n        return [\r\n            ...\r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n#### 设置图表 (chart)\r\n\r\n通过`chart`方法可以设置图表配置。\r\n\r\n> 这里的图表配置同样支持设置可执行`JS`代码，详细用法请参考[图表配置设置可执行JS代码](widgets-charts.md#js)。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chart([...]);\r\n    }\r\n}\r\n```\r\n\r\n#### 设置图表配置 (chartOption)\r\n\r\n通过`chartOption`方法可以设置图表配置，此方法一次只能设置一个参数，支持设置多维参数。\r\n\r\n> 这里的图表配置同样支持设置可执行`JS`代码，详细用法请参考[图表配置设置可执行JS代码](widgets-charts.md#js)。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartOption('stroke.curve', 'smooth');\r\n        \$this->chartOption(\r\n            'plotOptions.radialBar.dataLabels.total.formatter',\r\n            // 这个值最后段代码会作为JS代码执行\r\n            JavaScript::make(\"function () { return {\$number}; }\")\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n#### 设置图表高度 (chartHeight)\r\n\r\n通过`chartHeight`方法可以设置图表的高度，这个方法非常重要，经常需要结合`height`方法一起使用，调整卡片的整体高度。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartHeight(150);\r\n    }\r\n}\r\n```\r\n\r\n#### 设置图表上间距 (chartMarginTop)\r\n\r\n通过`chartMarginTop`方法可以设置图表与上级元素的间距，此方法接受一个`int`类型参数，可以传`负数`。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartMarginTop(-10);\r\n    }\r\n}\r\n```\r\n\r\n#### 设置图表下间距 (chartMarginBottom)\r\n\r\n通过`chartMarginBottom`方法可以设置图表与下级元素的间距，此方法接受一个`int`类型参数，可以传`负数`。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartMarginBottom(10);\r\n    }\r\n}\r\n```\r\n\r\n#### 设置图表标签 (chartLabels)\r\n\r\n通过`chartLabels`方法可以设置图表的标签(`labels`)配置。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartLabels('标签1');\r\n        \r\n        // 也可以传递数组\r\n        \$this->chartLabels(['标签1']);\r\n    }\r\n}\r\n```\r\n\r\n#### 设置图表颜色 (chartColors)\r\n\r\n通过`chartLabels`方法可以设置图表的颜色(`colors`)配置。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartColors('#4f41a1');\r\n        \r\n        // 也可以传递数组\r\n        \$this->chartColors(['#4f41a1']);\r\n    }\r\n}\r\n```\r\n\r\n#### 渲染图表 (renderChart)\r\n\r\n通过`renderChart`方法可以渲染图表。\r\n\r\n```php\r\nclass MyCard extend Card\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n    \r\n        // 启用图表\r\n        \$this->useChart();\r\n    }\r\n    \r\n    /**\r\n     * 渲染卡片内容\r\n     * 需要在这里加上渲染图表的代码\r\n     *\r\n     * @return string\r\n     */\r\n    public function renderContent()\r\n    {\r\n        // 通过 content 方法设置的内容\r\n        \$content = parent::renderContent();\r\n        \r\n        // 渲染图表\r\n        \$chart = \$this->renderChart();\r\n        \r\n        return <<<HTML\r\n    <div class=\"my-chart\">{\$chart}</div>\r\n    {\$content}    \r\nHTML           \r\n    }\r\n}\r\n```\r\n\r\n## 线性趋势图卡片 (Line)\r\n\r\n线性趋势图卡片(`Dcat\\Admin\\Widgets\\Metrics\\Line`)是一个附带了折线\\曲线图的数据统计卡片，继承自基础卡片`Dcat\\Admin\\Widgets\\Metrics\\Card`。\r\n\r\n\r\n### 示例\r\n\r\n可参考内置的`App\\Admin\\Metrics\\Examples\\NewUsers`类。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Metrics\\Examples;\r\n\r\nuse Dcat\\Admin\\Widgets\\Metrics\\Line;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass NewUsers extends Line\r\n{\r\n    /**\r\n     * @var string\r\n     */\r\n    protected \$label = 'New Users';\r\n\r\n    /**\r\n     * 初始化卡片内容\r\n     *\r\n     * @return void\r\n     */\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n\r\n        \$this->title(\$this->label);\r\n        \$this->dropdown([\r\n            '7' => 'Last 7 Days',\r\n            '28' => 'Last 28 Days',\r\n            '30' => 'Last Month',\r\n            '365' => 'Last Year',\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 处理请求\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return mixed|void\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        \$generator = function (\$len, \$min = 10, \$max = 300) {\r\n            for (\$i = 0; \$i <= \$len; \$i++) {\r\n                yield mt_rand(\$min, \$max);\r\n            }\r\n        };\r\n\r\n        switch (\$request->get('option')) {\r\n            case '365':\r\n                // 卡片内容\r\n                \$this->withContent(mt_rand(1000, 5000).'k');\r\n                // 图表数据\r\n                \$this->withChart(collect(\$generator(30))->toArray());\r\n                // 直线\r\n                break;\r\n            case '30':\r\n                // 卡片内容\r\n                \$this->withContent(mt_rand(400, 1000).'k');\r\n                // 图表数据\r\n                \$this->withChart(collect(\$generator(30))->toArray());\r\n                // 直线\r\n                break;\r\n            case '28':\r\n                // 卡片内容\r\n                \$this->withContent(mt_rand(400, 1000).'k');\r\n                // 图表数据\r\n                \$this->withChart(collect(\$generator(28))->toArray());\r\n                // 直线\r\n                break;\r\n            case '7':\r\n            default:\r\n                // 卡片内容\r\n                \$this->withContent('89.2k');\r\n                // 图表数据\r\n                \$this->withChart([28, 40, 36, 52, 38, 60, 55,]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置图表数据.\r\n     *\r\n     * @param array \$data\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withChart(array \$data)\r\n    {\r\n        return \$this->chart([\r\n            'series' => [\r\n                [\r\n                    'name' => \$this->label,\r\n                    'data' => \$data,\r\n                ],\r\n            ],\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 设置卡片内容.\r\n     *\r\n     * @param string \$content\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withContent(\$content)\r\n    {\r\n        return \$this->content(\r\n            <<<HTML\r\n<div class=\"d-flex justify-content-between align-items-center mt-1\" style=\"margin-bottom: 2px\">\r\n    <h2 class=\"ml-1 font-large-1\">{\$content}</h2>\r\n    <span class=\"mb-0 mr-1 text-80\">{\$this->label}</span>\r\n</div>\r\nHTML\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n### 方法\r\n\r\n#### 设置线条为直线 (chartStraight)\r\n\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Metrics\\Line;\r\n\r\nclass MyCard extend Line\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartStraight();\r\n    }\r\n}\r\n```\r\n\r\n#### 设置线条为曲线 (chartSmooth)\r\n\r\n默认显示的是曲线。\r\n\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Metrics\\Line;\r\n\r\nclass MyCard extend Line\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->chartSmooth();\r\n    }\r\n}\r\n```\r\n\r\n## 圆环图卡片 (Donut)\r\n\r\n圆环图卡片(`Dcat\\Admin\\Widgets\\Metrics\\Donut`)是一个附带了圆环图的数据统计卡片，继承自基础卡片`Dcat\\Admin\\Widgets\\Metrics\\Card`。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/cffcae0c742e7d75794e38b550e7e6d3667bbf0ec3b86.png)\r\n\r\n### 示例\r\n\r\n可参考内置的`App\\Admin\\Metrics\\Examples\\NewDevices`类。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Metrics\\Examples;\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Widgets\\Metrics\\Donut;\r\n\r\nclass NewDevices extends Donut\r\n{\r\n    protected \$labels = ['Desktop', 'Mobile'];\r\n\r\n    /**\r\n     * 初始化卡片内容\r\n     */\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n\r\n        \$color = Admin::color();\r\n        \$colors = [\$color->primary(), \$color->alpha('blue2', 0.5)];\r\n\r\n        \$this->title('New Devices');\r\n        \$this->subTitle('Last 30 days');\r\n        \$this->chartLabels(\$this->labels);\r\n        // 设置图表颜色\r\n        \$this->chartColors(\$colors);\r\n    }\r\n\r\n    /**\r\n     * 渲染模板\r\n     *\r\n     * @return string\r\n     */\r\n    public function render()\r\n    {\r\n        \$this->fill();\r\n\r\n        return parent::render();\r\n    }\r\n\r\n    /**\r\n     * 写入数据.\r\n     *\r\n     * @return void\r\n     */\r\n    public function fill()\r\n    {\r\n        \$this->withContent(44.9, 28.6);\r\n\r\n        // 图表数据\r\n        \$this->withChart([44.9, 28.6]);\r\n    }\r\n\r\n    /**\r\n     * 设置图表数据.\r\n     *\r\n     * @param array \$data\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withChart(array \$data)\r\n    {\r\n        return \$this->chart([\r\n            'series' => \$data\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 设置卡片头部内容.\r\n     *\r\n     * @param mixed \$desktop\r\n     * @param mixed \$mobile\r\n     *\r\n     * @return \$this\r\n     */\r\n    protected function withContent(\$desktop, \$mobile)\r\n    {\r\n        \$blue = Admin::color()->alpha('blue2', 0.5);\r\n\r\n        \$style = 'margin-bottom: 8px';\r\n        \$labelWidth = 120;\r\n\r\n        return \$this->content(\r\n            <<<HTML\r\n<div class=\"d-flex pl-1 pr-1 pt-1\" style=\"{\$style}\">\r\n    <div style=\"width: {\$labelWidth}px\">\r\n        <i class=\"fa fa-circle text-primary\"></i> {\$this->labels[0]}\r\n    </div>\r\n    <div>{\$desktop}</div>\r\n</div>\r\n<div class=\"d-flex pl-1 pr-1\" style=\"{\$style}\">\r\n    <div style=\"width: {\$labelWidth}px\">\r\n        <i class=\"fa fa-circle\" style=\"color: \$blue\"></i> {\$this->labels[1]}\r\n    </div>\r\n    <div>{\$mobile}</div>\r\n</div>\r\nHTML\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 方法\r\n\r\n#### 设置内容宽度 (contentWidth)\r\n\r\n通过`contentWidth`方法可以设置文本内容以及图表内容的宽度，默认为`[6, 6]`。\r\n\r\n> {tip} 这里的宽度是一个`1-12`之间的一个值。\r\n\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Metrics\\Line;\r\n\r\nclass MyCard extend Line\r\n{\r\n    protected function init()\r\n    {\r\n        parent::init();\r\n        \r\n        \$this->contentWidth(4, 8);\r\n    }\r\n}\r\n```\r\n\r\n\r\n## 柱状图卡片 (Bar)\r\n\r\n\r\n柱状图卡片(`Dcat\\Admin\\Widgets\\Metrics\\Bar`)是一个附带了柱状图的数据统计卡片，继承自基础卡片`Dcat\\Admin\\Widgets\\Metrics\\Card`。\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/bab5a9fc1cea01d36430229d4a4fa6ab667bbf29bb313.png)\r\n\r\n\r\n### 示例\r\n\r\n可参考内置的`App\\Admin\\Metrics\\Examples\\NewDevices`类。\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Metrics\\Examples;\r\n\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Widgets\\Metrics\\Bar;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass Sessions extends Bar\r\n{\r\n    /**\r\n     * 初始化卡片内容\r\n     */\r\n    public function init()\r\n    {\r\n        parent::init();\r\n\r\n        \$color = Admin::color();\r\n\r\n        \$dark35 = \$color->dark35();\r\n\r\n        // 卡片内容宽度\r\n        \$this->contentWidth(5, 7);\r\n        // 标题\r\n        \$this->title('Avg Sessions');\r\n        // 设置下拉选项\r\n        \$this->dropdown([\r\n            '7' => 'Last 7 Days',\r\n            '28' => 'Last 28 Days',\r\n            '30' => 'Last Month',\r\n            '365' => 'Last Year',\r\n        ]);\r\n        // 设置图表颜色\r\n        \$this->chartColors([\r\n            \$dark35,\r\n            \$dark35,\r\n            \$color->primary(),\r\n            \$dark35,\r\n            \$dark35,\r\n            \$dark35\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 处理请求\r\n     *\r\n     * @param Request \$request\r\n     *\r\n     * @return mixed|void\r\n     */\r\n    public function handle(Request \$request)\r\n    {\r\n        switch (\$request->get('option')) {\r\n            case '7':\r\n            default:\r\n                // 卡片内容\r\n                \$this->withContent('2.7k', '+5.2%');\r\n\r\n                // 图表数据\r\n                \$this->withChart([\r\n                    [\r\n                        'name' => 'Sessions',\r\n                        'data' => [75, 125, 225, 175, 125, 75, 25],\r\n                    ],\r\n                ]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置图表数据.\r\n     *\r\n     * @param array \$data\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withChart(array \$data)\r\n    {\r\n        return \$this->chart([\r\n            'series' => \$data,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 设置卡片内容.\r\n     *\r\n     * @param string \$title\r\n     * @param string \$value\r\n     * @param string \$style\r\n     *\r\n     * @return \$this\r\n     */\r\n    public function withContent(\$title, \$value, \$style = 'success')\r\n    {\r\n        // 根据选项显示\r\n        \$label = strtolower(\r\n            \$this->dropdown[request()->option] ?? 'last 7 days'\r\n        );\r\n\r\n        \$minHeight = '183px';\r\n\r\n        return \$this->content(\r\n            <<<HTML\r\n<div class=\"d-flex p-1 flex-column justify-content-between\" style=\"padding-top: 0;width: 100%;height: 100%;min-height: {\$minHeight}\">\r\n    <div class=\"text-left\">\r\n        <h1 class=\"font-large-2 mt-2 mb-0\">{\$title}</h1>\r\n        <h5 class=\"font-medium-2\" style=\"margin-top: 10px;\">\r\n            <span class=\"text-{\$style}\">{\$value} </span>\r\n            <span>vs {\$label}</span>\r\n        </h5>\r\n    </div>\r\n\r\n    <a href=\"#\" class=\"btn btn-primary shadow waves-effect waves-light\">View Details <i class=\"feather icon-chevrons-right\"></i></a>\r\n</div>\r\nHTML\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n\r\n## 多环形图卡片 (Round)\r\n\r\n柱状图卡片(`Dcat\\Admin\\Widgets\\Metrics\\Round`)是一个附带了多环形图的数据统计卡片，继承自基础卡片`Dcat\\Admin\\Widgets\\Metrics\\Card`。\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/e693fec57342b8bd387d32ea92d3e07b667bbf352b3a1.png)\r\n\r\n### 示例\r\n\r\n具体示例与上述卡片的示例大同小异，具体可参考内置的`App\\Admin\\Metrics\\Examples\\ProductOrders`类，这里不再贴出。\r\n\r\n## 更多内置卡片\r\n\r\n系统还内置了`Dcat\\Admin\\Widgets\\Metrics\\RadialBar`、`Dcat\\Admin\\Widgets\\Metrics\\SingleRound`等卡片，由于用法与上述卡片雷同，这里不再重复贴出代码。\r\n\r\n[点击我查看所有内置卡片在线演示](http://103.39.211.179:8080/admin/components/metric-cards)\r\n\r\n## 自定义图表卡片\r\n\r\n如需自定义卡片，可参考上述内置图表的代码。", 'order' => 3, 'created_at' => "2024-06-26 15:13:14", 'updated_at' => "2024-06-26 15:13:14", 'slug' => "data-statistics-card"],
            ['id' => 70, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "模态窗（Modal）", 'content' => "# 模态窗 (Modal)\r\n\r\n> Since `v1.7.0`\r\n\r\n基本使用\r\n\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Modal;\r\n\r\n\$modal = Modal::make()\r\n\t->lg()\r\n\t->title('标题')\r\n\t->body(view(...))\r\n\t->button('<button class=\"btn btn-primary\">点击打开弹窗</button>');\r\n\t\r\nreturn view(..., ['modal' => \$modal]);\t\r\n```\r\n\r\n## 功能\r\n\r\n### 标题 (title)\r\n\r\n设置弹窗标题\r\n\r\n```php\r\n\$modal->title('标题');\r\n```\r\n\r\n### 内容 (body)\r\n\r\n设置弹窗内容，此方法接受一个参数，允许传入`string`、`Cloure`、`Illuminate\\Contracts\\Support\\Renderable`以及`Dcat\\Admin\\Contracts\\LazyRenderable`类型值\r\n\r\n```php\r\n// 传入字符串\r\n\$modal->body('字符串');\r\n\r\n// 传入闭包，注意闭包必须返回字符串类型值或空值\r\n\$modal->body(function () {\r\n\treturn view(...)->render();\r\n});\r\n\r\n// 传入 Renderable\r\nuse Dcat\\Admin\\Widgets\\\r\n\r\n\$modal->body(view(...));\r\n\$modal->body(Card::make());\r\n\r\n// 传入 LazyRenderable\r\n\$modal->body(PostTable::make());\r\n```\r\n\r\n### 底部内容 (footer)\r\n设置弹窗底部内容，此方法接受一个参数，允许传入`string`、`Cloure`、`Illuminate\\Contracts\\Support\\Renderable`以及`Dcat\\Admin\\Contracts\\LazyRenderable`类型值，用法同上\r\n\r\n```php\r\n\$modal->footer('字符串');\r\n\r\n\$modal->footer(view(...));\r\n```\r\n\r\n### 尺寸 \r\n\r\n默认 `500px`\r\n\r\n```php\r\n// 800px\r\n\$modal->lg();\r\n\r\n// 1140px\r\n\$modal->xl();\r\n```\r\n\r\n### 按钮 (button)\r\n\r\n设置按钮\r\n\r\n### 事件监听\r\n\r\n支持事件\r\n\r\n - `onShow` 弹窗显示事件\r\n - `onShown` 弹窗已显示事件\r\n - `onHide` 弹窗隐藏事件\r\n - `onHidden` 弹窗已隐藏事件\r\n \r\n用法示例\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n\$modal->onShow(\r\n\t<<<JS\r\nconsole.log('显示弹窗', target, \$(this));\t\r\nJS\r\n);\r\n\r\n\$modal->onHide(\r\n\t<<<JS\r\nconsole.log('隐藏弹窗', target, \$(this));\t\r\nJS\r\n);\r\n``` \r\n \r\n### 垂直居中 (centered)\r\n\r\n设置弹窗垂直居中\r\n\r\n```php\r\n\$modal = Modal::make()\r\n    ->xl()\r\n    ->centered() // 设置弹窗垂直居中\r\n    ->title(...)\r\n    ->body(...);\r\n```\r\n\r\n### 内容可滚动 (scrollable)\r\n\r\n设置弹窗内容可滚动\r\n\r\n```php\r\n\$modal = Modal::make()\r\n    ->xl()\r\n    ->scrollable() // 设置弹窗内容可滚动\r\n    ->title(...)\r\n    ->body(...);\r\n```\r\n\r\n<a name=\"form\"></a>\r\n## 表单弹窗\r\n\r\n参考文档 [工具表单 - 弹窗](https://learnku.com/docs/dcat-admin/1.x/tools-form/8125#modal)", 'order' => 4, 'created_at' => "2024-06-26 15:13:52", 'updated_at' => "2024-06-26 15:13:52", 'slug' => "modal-window"],
            ['id' => 71, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "工具表单", 'content' => "请前往[工具表单](https://learnku.com/docs/dcat-admin/1.x/tools-form/8125)", 'order' => 5, 'created_at' => "2024-06-26 15:14:21", 'updated_at' => "2024-06-26 15:14:21", 'slug' => "tools-form"],
            ['id' => 72, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "下拉菜单", 'content' => "# 下拉菜单\r\n\r\n通过`Dcat\\Admin\\Widgets\\Dropdown`这个类可以快速帮大家构建下拉菜单功能。\r\n\r\n\r\n### 基本用法\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Dropdown;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass MyController\r\n{\r\n    public function index(Content \$content)\r\n    {\r\n        \$options = [\r\n            '名称1',\r\n            '名称2',\r\n            '名称3',\r\n            '名称4',\r\n            '名称5',\r\n        ];\r\n        \r\n        \$dropdown = Dropdown::make(\$options)\r\n            ->button('分类导航') // 设置按钮\r\n            ->buttonClass('btn btn-white  waves-effect') // 设置按钮样式\r\n            ->map(function (\$label, \$key) {\r\n                // 格式化菜单选项\r\n                \$url = admin_url('categories/'.\$key);\r\n\r\n                return \"<a href='\$url'>{\$label}</a>\";\r\n            });\r\n         \r\n        return \$content->body(\$dropdown);\r\n    }\r\n}\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f759a18ee9feb85f18d126cd88332a54667bc03ad969a.png)\r\n\r\n### 点击菜单更换按钮文本\r\n\r\n`click`方法可以让选中的菜单文本显示在按钮中，做到类似下拉选框的效果。\r\n\r\n```php\r\n\$options = [\r\n    ...\r\n];\r\n\r\n\$dropdown = Dropdown::make(\$options)\r\n    ->button('选择') // 设置按钮\r\n    ->click();\r\n```\r\n\r\n### 设置标题\r\n\r\n```php\r\n\$options1 = [\r\n    '名称1',\r\n    '名称2',\r\n];\r\n\r\n\$options2 = [\r\n    '测试1',\r\n    '测试2',\r\n];\r\n\r\n\$dropdown = Dropdown::make()\r\n    ->button('使用标题')\r\n    ->options(\$options1, '标题1')\r\n    ->options(\$options2, '标题2');\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/79efb14a6bee7cb8704f916e737635fb667bc04641069.png)\r\n\r\n### 增加分割线\r\n\r\n```php\r\n\$options = [\r\n    '名称1',\r\n    '名称2',\r\n    Dropdown::DIVIDER,\r\n    '名称3',\r\n    '名称4',\r\n];\r\n\r\n\$dropdown = Dropdown::make()\r\n    ->button('使用分割线')\r\n    ->options(\$options)\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/feceb87fce2ccfb38d58ce6d6e36516b667bc05267f75.png)\r\n\r\n\r\n### 自定义按钮\r\n\r\n```php\r\n    public function index(Content \$content)\r\n    {\r\n        \$options = [\r\n            '名称1',\r\n            '名称2',\r\n            '名称3',\r\n            '名称4',\r\n            '名称5',\r\n        ];\r\n        \r\n        \$dropdown = Dropdown::make(\$options)\r\n            ->map(function (\$label, \$key) {\r\n                // 格式化菜单选项\r\n                \$url = admin_url('categories/'.\$key);\r\n\r\n                return \"<a href='\$url'>{\$label}</a>\";\r\n            });\r\n         \r\n        return \$content->body(\r\n            <<<HTML\r\n<div class='dropdown'>\r\n     <button class='btn btn-primary dropdown-toggle' data-toggle='dropdown'>\r\n        <i class='feather icon-email'></i> 自定义按钮 \r\n     </button>\r\n     {\$dropdown->render()}\r\n</div>            \r\nHTML            \r\n        );\r\n    }\r\n```\r\n\r\n效果\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/b048c2c06842c5a10951b26e08394602667bc064784e8.png)", 'order' => 6, 'created_at' => "2024-06-26 15:16:55", 'updated_at' => "2024-06-26 15:16:55", 'slug' => "drop-down-menu"],
            ['id' => 73, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "单/复选框", 'content' => "# 单/复选框\r\n\r\n## 单选框\r\n\r\n通过 `Dcat\\Admin\\Widgets\\Radio`类可以很方便地快速构建单选框表单。\r\n\r\n### 基本使用\r\n\r\n```php\r\n<?php\r\nuse Dcat\\Admin\\Widgets\\Radio;\r\n\r\n// 表单 name 属性\r\n\$name = 'state';\r\n// 选项\r\n\$options = [\r\n   1 => '未处理',\r\n   2 => '已处理',\r\n   3 => '已拒绝',\r\n];\r\n\r\n\$radio = Radio::make(\$name, \$options)->check(1); // 选中第一个选项\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/e146c7e34f2f58a98b02f436383b2952667bc0a66e46a.png)\r\n\r\n\r\n### 显示在同一行 (inline)\r\n\r\n```php\r\n<?php\r\nuse Dcat\\Admin\\Widgets\\Radio;\r\n\r\n\$name = 'state';\r\n\$options = [\r\n   1 => '未处理',\r\n   2 => '已处理',\r\n   3 => '已拒绝',\r\n];\r\n\r\n\$radio = Radio::make(\$name, \$options)->check(1)->inline();\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/4556f7ad3960f1b46affcd17da857db4667bc0af947c3.png)\r\n\r\n### 设置禁选的选项 (disable)\r\n\r\n\r\n```php\r\n<?php\r\nuse Dcat\\Admin\\Widgets\\Radio;\r\n\r\n\$name = 'state';\r\n\$options = [\r\n   1 => '未处理',\r\n   2 => '已处理',\r\n   3 => '已拒绝',\r\n];\r\n\r\n\$radio = Radio::make(\$name, \$options)->inline()->disable([2, 3]);\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/5856196fcddc2a76bbdac031589dc80c667bc0ba61345.png)\r\n\r\n\r\n### 设置样式 (style)\r\n\r\n通过`style`方法可以设置单选框的样式，支持`primary`、`info`、`success`、`danger`。\r\n\r\n### 设置尺寸\r\n\r\n单选框支持3种尺寸，使用方法如下\r\n\r\n\r\n`small`设置为小尺寸\r\n```php\r\n\$radio->small();\r\n```\r\n\r\n`large`设置为大尺寸\r\n```php\r\n\$radio->large();\r\n```\r\n\r\n\r\n## 复选框\r\n\r\n通过 `Dcat\\Admin\\Widgets\\Checkbox`类可以很方便地快速构建复选框表单，并且复选框类是属于`Radio`的子类，因此用法与`Radio`类基本一致。\r\n\r\n### 基本用法\r\n\r\n```php\r\n<?php\r\nuse Dcat\\Admin\\Widgets\\Checkbox;\r\n\r\n// 表单 name 属性，因为此处是多选，所以需要加上中括号\r\n\$name = 'hobbies[]';\r\n// 选项\r\n\$options = [\r\n   1 => '唱',\r\n   2 => '跳',\r\n   3 => 'RAP',\r\n   4 => '打篮球',\r\n];\r\n\r\n\$checkbox = Checkbox::make(\$name, \$options)\r\n    ->inline()\r\n    ->check([1, 2]); // 这里允许传递数组，默认选中多个选项\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/f252035351006b081f2e0f964a545462667bc0c74f0a1.png)\r\n\r\n\r\n### 全选\r\n\r\n通过`checkAll`方法可以选中全部选项。\r\n\r\n```php\r\n<?php\r\nuse Dcat\\Admin\\Widgets\\Checkbox;\r\n\r\n// 表单 name 属性，因为此处是多选，所以需要加上中括号\r\n\$name = 'hobbies[]';\r\n// 选项\r\n\$options = [\r\n   1 => '唱',\r\n   2 => '跳',\r\n   3 => 'RAP',\r\n   4 => '打篮球',\r\n];\r\n\r\n\$checkbox = Checkbox::make(\$name, \$options)\r\n    ->inline()\r\n    ->checkAll(); // 全部选中\r\n```\r\n\r\n`checkAll`方法也允许全选的同时排除指定选项。\r\n\r\n```php\r\n\$checkbox = Checkbox::make(\$name, \$options)\r\n    ->inline()\r\n    ->checkAll([1, 3]); // 全部选中，但是排除key为1和3的选项\r\n```\r\n\r\n### 更多用法\r\n\r\n更多用法与`Radio`的用法一致，这里不再赘述。", 'order' => 7, 'created_at' => "2024-06-26 15:18:44", 'updated_at' => "2024-06-26 15:18:44", 'slug' => "single-check-box"],
            ['id' => 74, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "选项卡", 'content' => "# 选项卡\r\n\r\n通过`Dcat\\Admin\\Widgets\\Tab`方法可以快速构建`tab`选项卡。\r\n\r\n### 基本用法\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Tab;\r\n\r\n\$tab = Tab::make();\r\n\r\n// 第一个参数是选项卡标题，第二个参数是内容，第三个参数是是否选中\r\n\$tab->add('选项卡1', view('...'), true);\r\n\$tab->add('选项2', 'html');\r\n// 添加选项卡链接\r\n\$tab->addLink('跳转链接', 'http://xxx');\r\n\r\nreturn \$content->body(\$tab->withCard());\r\n```\r\n\r\n### 切换显示模式\r\n\r\n```php\r\n\$tab = Tab::make()->theme();\r\n```\r\n\r\n### 垂直 (vertical)\r\n\r\n通过`vertical`方法可以让选项卡标题栏呈垂直排列。\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Tab;\r\n\r\n\$tab = Tab::make();\r\n\r\n\$tab->add('选项卡1', view('...'));\r\n\$tab->add('选项2', 'html');\r\n\r\nreturn \$content->body(\$tab->withCard()->vertical());\r\n```", 'order' => 8, 'created_at' => "2024-06-26 15:19:07", 'updated_at' => "2024-06-26 15:19:07", 'slug' => "tab"],
            ['id' => 75, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "警告框", 'content' => "# 警告框\r\n\r\n### Alert\r\n基本用法\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Alert;\r\n\r\n\$alert = Alert::make('内容', '标题');\r\n\r\n// 类型\r\n\$alert->success();\r\n\$alert->danger();\r\n\$alert->info();\r\n\$alert->warning();\r\n\r\n// 图标\r\n\$alert->icon('feather icon-x');\r\n\r\n// 可移除按钮\r\n\$alert->removable();\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/edce1ccb7c082e17f9030f2bbcef5160667bc11abab0e.png)\r\n\r\n\r\n### Callout\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Callout;\r\n\r\n\$callout = Callout::make('内容', '标题');\r\n\r\n// 颜色\r\n\$callout->light();\r\n\$callout->primary();\r\n\r\n// 可移除按钮\r\n\$callout->removable();\r\n```\r\n\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/0b3f8ac2c5393ae7afff8a0bb44793ca667bc126b0eef.png)", 'order' => 9, 'created_at' => "2024-06-26 15:20:17", 'updated_at' => "2024-06-26 15:20:17", 'slug' => "warning-box"],
            ['id' => 76, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "提示窗", 'content' => "# 提示窗\r\n\r\n基本用法\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Tooltip;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass MyController\r\n{\r\n    public function index(Content \$content)\r\n    {\r\n        Tooltip::make('.icon-help-circle')->title('我是提示信息');\r\n        \r\n        return \$content->body(new Card(\r\n            <<<HTML\r\n<div class=\"p4\">\r\n    <i class=\"feather icon-help-circle\"></i>\r\n</div>\r\nHTML\r\n        ));\r\n    }\r\n}\r\n```\r\n效果\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/d9827047dcfb793ec782af52dc39d84e667bc1592b4f3.png)", 'order' => 10, 'created_at' => "2024-06-26 15:20:59", 'updated_at' => "2024-06-26 15:20:59", 'slug' => "prompt-window"],
            ['id' => 77, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "Markdown", 'content' => "# Markdown\r\n\r\n基本用法\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Markdown;\r\nuse Dcat\\Admin\\Widgets\\Card;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nclass MyController\r\n{\r\n    public function index(Content \$content)\r\n    {\r\n        return \$content->body(Card::make(\r\n            Markdown::make('你的markdown本文内容')\r\n        ));\r\n    }\r\n}\r\n```", 'order' => 11, 'created_at' => "2024-06-26 15:21:23", 'updated_at' => "2024-06-26 15:21:23", 'slug' => "markdown"],
            ['id' => 78, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 10, 'title' => "卡片", 'content' => "# 卡片\r\n\r\n## Card\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Card;\r\n\r\n// 只填充内容，不需要标题\r\n\$card = Card::make(view('...'));\r\n\r\n// 标题和内容\r\n\$card = Card::make('标题', '内容');\r\n\r\n// 设置间距\r\n\$card->padding('0 15px 0 12px');\r\n\r\n// 设置工具按钮\r\n\$card->tool('<button class=\"btn btn-sm btn-light shadow-none\">按钮</button>');\r\n\r\n// 设置底部内容\r\n\$card->footer(view('...'));\r\n```\r\n\r\n## Box\r\n\r\n```php\r\n<?php\r\n\r\nuse Dcat\\Admin\\Widgets\\Box;\r\n\r\n// 标题和内容\r\n\$box = Box::make('标题', '内容');\r\n\r\n// 设置间距\r\n\$box->padding('0 15px 0 12px');\r\n\r\n// 设置工具按钮\r\n\$box->tool('<button class=\"btn btn-sm btn-light shadow-none\">按钮</button>');\r\n\r\n// 设置收缩按钮\r\n\$box->collapsable();\r\n\r\n// 设置移除按钮\r\n\$box->removable();\r\n```", 'order' => 12, 'created_at' => "2024-06-26 15:21:45", 'updated_at' => "2024-06-26 15:21:45", 'slug' => "card"],
            ['id' => 79, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 11, 'title' => "区块基本使用", 'content' => "# 区块（section）\r\n\r\n## 简介\r\n\r\n`Dcat Admin`提供`section`功能允许开发者在项目运行时更改页面各个部分的内容，而不需要直接去修改模板。\r\n\r\n> {tip} `Dcat Admin`的`section`功能参考了`Blade`模板引擎的`@section`功能和`Wordpress`的`add_filter`功能，如果开发者理解这两者其中之一就能快速上手。\r\n\r\n## 使用\r\n\r\n### admin_section\r\n\r\n输出`section`内容，此函数类似于`Blade`模板中的`@yield`指令以及`WordPress`中的`apply_filters`函数。\r\n\r\n参数：\r\n- `\$section` {string} 区块名称\r\n- `\$default` {string|Closure} 默认值\r\n- `\$options` {array} 参数，需要注意的是`key`值必须使用英文字母开头，否则无法被获取到\r\n\r\n返回值：\r\n- {string}\r\n\r\n```php\r\necho admin_section('navigation', null, ['count' => 4]);\r\n```\r\n\r\n### admin_inject_section\r\n\r\n注入`section`内容，此函数类似`WordPress`中的`add_filter`函数。\r\n\r\n参数：\r\n- `\$section` {string} 区块名称\r\n- `\$content` {string|Illuminate\\Contracts\\Support\\Renderable|Closure} 区块内容\r\n- `\$append` {bool} 默认`true`，是否追加到上一个注入的内容后面，如果传`false`则会替换掉前面注入的内容\r\n- `\$priority` {int} 默认`10`，优先级，值越大排序越靠前\r\n\r\n当第二个参数传入的是匿名函数时，匿名函数接收一个`Illuminate\\Support\\Fluent`对象。匿名函数中接收一个`Illuminate\\Support\\Fluent`对象，此对象包含有前面注入到此区块的内容，通过`previous`属性可以获得；如果此`section`还有其他参数，也可以通过访问属性的方式获得，如下：\r\n\r\n```php\r\nadmin_inject_section('navigation', e(\"<navigation>1</navigation>\"));\r\n\r\nadmin_inject_section('navigation', function (\$options) {\r\n    // 获取上一个注入此区块的内容\r\n    \$previous = \$options->previous;\r\n    \r\n    // 获取自定义参数\r\n    \$count = \$options->count;\r\n\r\n    return e(\"<navigation>count:{\$count}</navigation>\");\r\n}, true, 11);\r\n\r\n// 输出\r\necho admin_section('navigation', null, ['count' => 4]);\r\n// 最终输出结果为\r\n// <navigation>count:4</navigation><navigation>1</navigation>\r\n```\r\n\r\n### admin_inject_default_section\r\n\r\n注入默认内容，如果调用了`admin_inject_section`函数注入内容（无论是在前面还是后面都一样），则此函数不生效。\r\n\r\n参数：\r\n- `\$section` {string} 区块名称\r\n- `\$content` {string|Illuminate\\Contracts\\Support\\Renderable|Closure} 区块内容，与`admin_inject_section`的第二个参数一致\r\n\r\n```php\r\nadmin_inject_default_section('navigation', '暂无数据');\r\n```\r\n\r\n### admin_has_section\r\n\r\n判断是否注入过内容到`section`，此函数返回一个`bool`类型值。\r\n```php\r\nvar_dump(admin_has_section('navigation'));\r\n```\r\n\r\n### admin_has_default_section\r\n\r\n判断是否注入过默认内容到`section`，此函数返回一个`bool`类型值。\r\n```php\r\nvar_dump(admin_has_default_section('navigation'));\r\n```\r\n\r\n## 系统预定义区块\r\n\r\n`Dcat Admin`预定义了一些区块，开发者可以通过这些区块改变页面内容。\r\n\r\n所有的预定义区块名称都定义在`Dcat\\Admin\\Admin::SECTION`这个类常量中，通过类常量的方式访问。\r\n\r\n### 往&lt;head>标签内输入内容\r\n\r\n此通过`Admin::SECTION['HEAD']`区块可以往`<head>`标签内输入内容。\r\n\r\n在`app\\Admin\\bootstrap.php`中加入以下代码：\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nadmin_inject_section(Admin::SECTION['HEAD'], function () {\r\n    return '<script src=\"//oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>';\r\n});\r\n```\r\n\r\n### 往&lt;body>标签内输入内容\r\n\r\n通过`Admin::SECTION['BODY_INNER_BEFORE']`区块可以往`<body>`标签内部的开头位置输入内容。\r\n\r\n通过`Admin::SECTION['BODY_INNER_AFTER']`区块可以往`<body>`标签内部的结束位置输入内容。\r\n\r\n\r\n### 往&lt;div id=\"app\">标签内输入内容\r\n\r\n通过`Admin::SECTION['APP_INNER_BEFORE']`区块可以往`<div id=\"app\">`标签内部的开头位置输入内容。\r\n\r\n通过`Admin::SECTION['APP_INNER_AFTER']`区块可以往`<div id=\"app\">`标签内部的结束位置输入内容。\r\n\r\n### 更改顶部导航栏用户信息面板内容\r\n\r\n通过`Admin::SECTION['NAVBAR_USER_PANEL']`区块可以更改顶部导航栏的用户信息面板内容。\r\n\r\n```php\r\nadmin_inject_section(Admin::SECTION['NAVBAR_USER_PANEL'], view('admin::partials.navbar-user-panel'));\r\n```\r\n\r\n### 更改顶部导航栏用户信息面板后面内容\r\n\r\n通过`Admin::SECTION['NAVBAR_AFTER_USER_PANEL']`区块可以更改顶部导航栏的用户信息面板后面的内容。\r\n\r\n```php\r\nadmin_inject_section(Admin::SECTION['NAVBAR_AFTER_USER_PANEL'], function () {\r\n    return <<<HTML\r\n    <li>\r\n        <a href=\"#\" data-toggle=\"control-sidebar\"><i class=\"fa fa-gears\"></i></a>\r\n    </li>\r\nHTML;    \r\n});\r\n```\r\n\r\n### 更改顶部导航栏前面内容\r\n\r\n```php\r\nadmin_inject_section(Admin::SECTION['NAVBAR_BEFORE'], view('...'));\r\n```\r\n### 更改顶部导航栏后面内容\r\n\r\n```php\r\nadmin_inject_section(Admin::SECTION['NAVBAR_AFTER'], view('...'));\r\n```\r\n\r\n### 更改菜单栏用户信息面板内容\r\n\r\n通过`Admin::SECTION['LEFT_SIDEBAR_USER_PANEL']`区块可以更改菜单栏的用户信息面板的内容。\r\n```php\r\n admin_inject_section(Admin::SECTION['LEFT_SIDEBAR_USER_PANEL'], view('admin::partials.sidebar-user-panel'));\r\n```\r\n\r\n### 更改菜单栏\r\n\r\n通过`Admin::SECTION['LEFT_SIDEBAR_MENU']`可以更改整个菜单栏内容。\r\n> {tip} `Dcat Admin`的菜单是通过注入默认内容到`LEFT_SIDEBAR_MENU`区块构建的，开发者可以替换掉系统默认的菜单渲染逻辑。\r\n\r\n```php\r\nuse Dcat\\Admin\\Support\\Helper;\r\nuse Dcat\\Admin\\Admin;\r\n\r\nadmin_inject_section(Admin::SECTION['LEFT_SIDEBAR_MENU'], function () {\r\n    \$menuModel = config('admin.database.menu_model');\r\n\t\r\n\t\$builder = Admin::menu();\r\n\r\n\t\$html = '';\r\n\tforeach (Helper::buildNestedArray((new \$menuModel())->allNodes()) as \$item) {\r\n\t\t\$html .= view('admin::partials.menu', ['item' => \$item, 'builder' => \$builder])->render();\r\n\t}\r\n\r\n\treturn \$html;\r\n});\r\n```", 'order' => 1, 'created_at' => "2024-06-26 15:22:32", 'updated_at' => "2024-06-26 15:22:32", 'slug' => "basic-use"],
            ['id' => 80, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 12, 'title' => "动作以及表单响应", 'content' => "# 动作以及表单响应\r\n\r\n[动作](https://learnku.com/docs/dcat-admin/2.x/basic-use/8124)、[数据表单](https://learnku.com/docs/dcat-admin/2.x/basic-use/8105)以及[工具表单](https://learnku.com/docs/dcat-admin/2.x/tools-form/8125)的响应方法都是同一套方法。\r\n\r\n在类中可以通过 `\$this->response()` 获取到 `Dcat\\Admin\\Http\\JsonResponse`对象并响应数据到前端\r\n\r\n```php\r\nreturn \$this->response()->success('成功！');\r\n\r\n// 等同于\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Http\\JsonResponse;\r\n\r\nreturn JsonResponse::make()->success('成功！');\r\n\r\nreturn Admin::make()->success('成功！');\r\n```\r\n\r\n### 功能\r\n下面介绍一下 `JsonResponse` 的主要用法\r\n\r\n#### 展示成功信息\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->success('成功！');\r\n```\r\n\r\n#### 展示错误信息\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->error('出错了！');\r\n```\r\n\r\n#### 展示警告信息\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->warning('警告');\r\n```\r\n\r\n#### 跳转\r\n\r\n此方法接收一个`string`类型参数，可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n```php\r\n\$this->response()->redirect('auth/users');\r\n```\r\n\r\n#### 跳转 (location)\r\n\r\n`1`秒后自动跳转（非局部刷新），此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->success('操作成功')->location('auth/users');\r\n```\r\n\r\n如果不传参则刷新当前页面\r\n\r\n```php\r\n\$this->response()->success('操作成功')->location();\r\n```\r\n\r\n#### 刷新当前页面\r\n\r\n此方法可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n```php\r\n\$this->response()->success('xxx')->refresh();\r\n```\r\n\r\n#### 下载\r\n\r\n此方法接收一个`string`类型参数\r\n\r\n```php\r\n\$this->response()->download('auth/users?_export_=1');\r\n```\r\n\r\n#### 展示确认弹窗\r\n\r\n```php\r\n// 成功\r\n\$this->response()->alert(true)->success('...')->detail('详细内容');\r\n\r\n// 错误\r\n\$this->response()->alert(true)->error('...')->detail('详细内容');\r\n\r\n// 警告\r\n\$this->response()->alert(true)->warning('...')->detail('详细内容');\r\n\r\n// 提示\r\n\$this->response()->alert(true)->info('...')->detail('详细内容');\r\n```\r\n\r\n#### 返回HTML\r\n\r\n此方法可接收一个`string`、`Renderable`、`Htmlable`类型参数，可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n> {tip} 响应的`HTML`字符默认会被置入动作按钮元素上，如果需要自己控制，则覆写[handleHtmlResponse](#handleHtmlResponse)方法即可。\r\n\r\n```php\r\n\$this->response()->html('<a>a标签</a>');\r\n\r\n\$this->response()->html(view('...'));\r\n```\r\n\r\n#### 执行JS代码\r\n\r\n此方法接收一个`string`类型参数，可以与`success`、`error`、`warning`等方法同时使用\r\n\r\n```php\r\n\$this->response()->script(\r\n <<<JS\r\n    console.log('response', response, target); \r\nJS \r\n);\r\n```\r\n\r\n### 根据条件判断是否调用\r\n\r\n上面所有功能接口都支持`if`模式，如\r\n\r\n```php\r\n// 如果 \$condition 的值为 真，则调用 refresh 方法\r\n\$this->response()->success(...)->refreshIf(\$condition);\r\n\$this->response()->success(...)->locationIf(\$condition, 'auth/users');\r\n\r\n// \$condition 也可以是闭包\r\n\$this->response()->success(...)->refreshIf(function () {\r\n    return true;\r\n});\r\n```", 'order' => 1, 'created_at' => "2024-06-26 15:23:07", 'updated_at' => "2024-06-26 15:23:07", 'slug' => "action-and-form-response"],
            ['id' => 81, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 13, 'title' => "权限控制", 'content' => "# 权限控制\r\n\r\n`Dcat Admin`已经内置了`RBAC`权限控制模块，展开左侧边栏的`Auth`，下面有用户、角色、权限三项的管理面板，权限控制的使用如下：\r\n\r\n## 路由控制\r\n\r\n在`Dcat Admin`中，权限和路由是绑定在一起的，在编辑权限页面里面设置当前权限能访问的路由，在`HTTP方法`select框中选择访问路由的方法，在`HTTP路径`中填写能访问的路径。\r\n\r\n比如要添加一个权限，该权限可以以`GET`方式访问路径`/admin/users`，那么`HTTP方法`选择`GET`，`HTTP路径`填写`/users`。\r\n\r\n如果要访问前缀是`/admin/users`的所有路径，那么`HTTP路径`填写`/users*`；如果要访问的是编辑页，那么`HTTP路径`填写`/users/*/edit`；如果多个路径中每个路径的方法不同，那么`HTTP路径`填写`GET:users/*`。\r\n\r\n> Since `v1.7.0`\r\n\r\n如果上述的方法不能满足需求，`HTTP路径`还支持填写路由别名，如`admin.users.show`\r\n\r\n\r\n## 禁用权限功能\r\n\r\n>  Since `v1.5.3`\r\n\r\n把`admin.auth.enable`配置参数的值设置为`false`可以完全禁用内置的权限系统。\r\n\r\n## 跳过权限验证\r\n\r\n可以把需要跳过权限验证的接口加入到配置文件`admin.permission.except`参数中\r\n\r\n```php\r\n\t'permission' => [\r\n\t\t// Whether enable permission.\r\n\t\t'enable' => true,\r\n\r\n\t\t// All method to path like: auth/users/*/edit\r\n\t\t// or specific method to path like: get:auth/users.\r\n\t\t'except' => [\r\n\t\t\t'/',\r\n\t\t\t'auth/login',\r\n\t\t\t'auth/logout',\r\n\t\t\t'auth/setting',\r\n\t\t],\r\n\r\n\t],\r\n```\r\n\r\n## 页面控制\r\n\r\n如果你要在页面中控制用户的权限，可以参考下面的例子\r\n\r\n### 场景1\r\n\r\n比如现在有一个场景，对文章发布模块做权限管理，以创建文章为例\r\n\r\n首先创建一项权限，进入`http://localhost/admin/auth/permissions`，权限标识（slug）填写`create-post`，权限名称填写`创建文章`，这样权限就创建好了。\r\n\r\n第二步可以把这个权限直接附加给个人或者角色，在用户编辑页面可以直接把上面创建好的权限附加给当前编辑用户，也可以在编辑角色页面附加给某个角色。\r\n\r\n第三步，在创建文章控制器里面添加控制代码：\r\n```php\r\nuse Dcat\\Admin\\Http\\Auth\\Permission;\r\n\r\nclass PostController extends Controller\r\n{\r\n    public function create()\r\n    {\r\n        // 检查权限，有create-post权限的用户或者角色可以访问创建文章页面\r\n        Permission::check('create-post');\r\n    }\r\n}\r\n```\r\n这样就完成了一个页面的权限控制。\r\n\r\n### 场景2\r\n\r\n如果你要在表格中控制用户对元素的显示，那么需要先定义两个权限，比如权限标示`delete-image`、和`view-title-column`分别用来控制有删除图片的权限和显示某一列的权限，把这两个权限赋给你设置的角色，然后在grid中加入代码：\r\n```php\r\n\$grid->actions(function (\$actions) {\r\n\r\n    // 没有`delete-image`权限的角色不显示删除按钮\r\n    if (!Admin::user()->can('delete-image')) {\r\n        \$actions->disableDelete();\r\n    }\r\n});\r\n\r\n// 只有具有`view-title-column`权限的用户才能显示`title`这一列\r\nif (Admin::user()->can('view-title-column')) {\r\n    \$grid->column('title');\r\n}\r\n```\r\n\r\n## 相关方法\r\n\r\n获取当前用户对象\r\n```php\r\nAdmin::user();\r\n```\r\n\r\n获取当前用户id\r\n```php\r\nAdmin::user()->id;\r\n```\r\n\r\n获取用户角色\r\n```php\r\nAdmin::user()->roles;\r\n```\r\n\r\n获取用户的权限\r\n```php\r\nAdmin::user()->permissions;\r\n```\r\n\r\n用户是否有某个角色\r\n```php\r\nAdmin::user()->isRole('developer');\r\n```\r\n\r\n是否有某个权限\r\n```php\r\nAdmin::user()->can('create-post');\r\n```\r\n\r\n是否没有某个权限\r\n```php\r\nAdmin::user()->cannot('delete-post');\r\n```\r\n\r\n是否是超级管理员\r\n```php\r\nAdmin::user()->isAdministrator();\r\n```\r\n\r\n是否是其中的角色\r\n```php\r\nAdmin::user()->inRoles(['editor', 'developer']);\r\n```\r\n\r\n## 权限中间件\r\n\r\n可以在路由配置上结合权限中间件来控制路由的权限\r\n\r\n```php\r\n\r\n// 允许administrator、editor两个角色访问group里面的路由\r\nRoute::group([\r\n    'middleware' => 'admin.permission:allow,administrator,editor',\r\n], function (\$router) {\r\n\r\n    \$router->resource('users', UserController::class);\r\n    ...\r\n    \r\n});\r\n\r\n// 禁止developer、operator两个角色访问group里面的路由\r\nRoute::group([\r\n    'middleware' => 'admin.permission:deny,developer,operator',\r\n], function (\$router) {\r\n\r\n    \$router->resource('users', UserController::class);\r\n    ...\r\n    \r\n});\r\n\r\n// 有edit-post、create-post、delete-post三个权限的用户可以访问group里面的路由\r\nRoute::group([\r\n    'middleware' => 'admin.permission:check,edit-post,create-post,delete-post',\r\n], function (\$router) {\r\n\r\n    \$router->resource('posts', PostController::class);\r\n    ...\r\n    \r\n});\r\n```\r\n\r\n权限中间件和其它中间件使用方法一致。\r\n\r\n## 为何配置了角色和权限，依然提示无权访问？\r\n\r\n这个原因可能是由于权限的`URL`路径配置错误导致的，正确的包含增删改查功能的`URL`配置应该是`auth/users*`这样的，如果你配置成了`auth/users/*`，那么就会提示无权访问。\r\n\r\n> 另外标签表单填写自定义URL有两种方法：一种是选中后按`删除键`进行更改；另一种是填写后按`空格键` + `回车键`。", 'order' => 1, 'created_at' => "2024-06-26 15:23:48", 'updated_at' => "2024-06-26 15:23:48", 'slug' => "basic-use"],
            ['id' => 82, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 14, 'title' => "菜单基本使用", 'content' => "# 菜单\r\n\r\n`Dcat Admin`的菜单是保存在数据表`admin_menu`上的，开发者可以在后台菜单管理页面对菜单进行管理。\r\n\r\n### 菜单权限\r\n每个菜单都可以与权限或角色进行绑定，如果不设置则为公共菜单，所有账号都能看到。\r\n\r\n通过`admin.menu.bind_permission`配置参数可以设置是否允许绑定权限。\r\n\r\n\r\n### 菜单翻译\r\n在您的语言文件的menu_titles索引中追加菜单标题。 例如“工作单位”标题：\r\n\r\n在`resources/lang/{当前语言}/menu.php`中\r\n```php\r\n...\r\n'titles' => [\r\n    'work_units' => 'Unidades de trabajo'\r\n],\r\n```\r\n\r\n### 菜单缓存\r\n通过`admin.menu.cache.enable`配置参数可以开启或关闭菜单缓存，建议开启。\r\n\r\n### 通过Menu::add接口动态添加菜单\r\n`Dcat Admin`还提供了通过数组的方式在代码中即时添加菜单。\r\n\r\n在`app\\Admin\\bootstrap.php`中添加如下代码：\r\n```php\r\n<?php\r\nuse Dcat\\Admin\\Admin;\r\nuse Dcat\\Admin\\Layout\\Menu;\r\n\r\nAdmin::menu(function (Menu \$menu) {\r\n    \$menu->add([\r\n        [\r\n            'id'            => '1', // 此id只要保证当前的数组中是唯一的即可\r\n            'title'         => '测试菜单',\r\n            'icon'          => 'fa-file-text-o',\r\n            'uri'           => '',\r\n            'parent_id'     => 0, \r\n            'permission_id' => 'test', // 与权限绑定\r\n            'roles'         => 'test-roles', // 与角色绑定\r\n        ],  \r\n        [\r\n            'id'            => '2', // 此id只要保证当前的数组中是唯一的即可\r\n            'title'         => '测试菜单2',\r\n            'icon'          => 'fa-file-text-o',\r\n            'uri'           => 'test-menu2',\r\n            'parent_id'     => '1', \r\n        ],  \r\n    ]);\r\n});\r\n\r\n```\r\n### 为何没有权限的菜单不会自动隐藏？\r\n\r\n这个问题是因为你没有给菜单绑定权限或者角色，给你想要无权不显示的菜单绑定权限或者角色即可。", 'order' => 1, 'created_at' => "2024-06-26 15:24:21", 'updated_at' => "2024-06-26 15:24:21", 'slug' => "basic-use"],
            ['id' => 83, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 15, 'title' => "帮助函数", 'content' => "# 帮助函数\r\n\r\n### admin_redirect\r\n> Since `v2.1.7-beta`\r\n\r\n跳转到指定`url`，此函数可用于代替`redirect`函数，支持`pjax`以及`ajax`请求\r\n\r\n```php\r\n// 不需要添加admin前缀\r\nreturn admin_redirect('auth/users');\r\n\r\n// 如果想要跳转到非admin前缀的链接，需要传递完整url链接\r\nreturn admin_redirect(url('users'));\r\n```\r\n\r\n\r\n### admin_exit\r\n\r\n`admin_exit` 用于中断程序执行，并响应数据到浏览器进行显示，用于代替 `exit` 和 `die`，下面简单介绍下用法\r\n\r\n\r\n用法1，返回 `Content` 布局对象，此用法可用于返回错误信息显示到前端\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Alert;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\n// 中断程序，并显示自定义页面到前端\r\nadmin_exit(\r\n    Content::make()\r\n        ->title('标题')\r\n        ->description('描述')\r\n        ->body('页面内容1')\r\n        ->body(Alert::make('服务器出错了~', 'Error')->danger())\r\n);\r\n```\r\n\r\n效果如下\r\n\r\n![](http://docs.oneself.icu:10010/storage/markdown/images/8545dfca9aa2a5714290761c71b20ee6667bc25b05cff.png)\r\n\r\n用法2，返回 `json` 格式数据，此用法经常用于表单提交数据的`api`请求拦截，或`Action`的`api`请求拦截\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nadmin_exit(\r\n    Admin::json()\r\n        ->success('成功了')\r\n        ->refresh()\r\n        ->data([\r\n            ...\r\n        ])\r\n);\r\n\r\n// 当然也可以直接响应数组\r\nadmin_exit([\r\n   ...\r\n]);\r\n```\r\n\r\n用法3，直接响应`Response`对象或字符串\r\n\r\n```php\r\nadmin_exit('Hello world');\r\n\r\nadmin_exit(response('Hello world', 500));\r\n```\r\n\r\n### admin_color\r\n\r\n获取内置颜色，关于主题颜色更多用法请参考[主题 - 颜色](theme.md#color)章节\r\n\r\n```php\r\n// 获取主题色的三种方式\r\n\$primary = admin_color('primary');\r\n\$primary = admin_color()->get('primary');\r\n\$primary = admin_color()->primary();\r\n\r\n\$color = admin_color();\r\n\$color->lighten('primary', 10);\r\n```\r\n\r\n### admin_js\r\n\r\n可以在任意位置引入`js`文件，更多用法参考[静态资源](assets.md)章节\r\n\r\n```php\r\nadmin_js(['@admin/xxx.js']);\r\n```\r\n\r\n### admin_css\r\n\r\n可以在任意位置引入`css`文件，更多用法参考[静态资源](assets.md)章节\r\n\r\n```php\r\nadmin_css(['@admin/xxx.css']);\r\n```\r\n\r\n### admin_require_assets\r\n\r\n可以在任意位置引入静态资源组件，更多用法参考[静态资源](assets.md)章节\r\n\r\n```php\r\nadmin_require_assets(['@datime']);\r\n```\r\n\r\n\r\n### admin_path\r\n\r\n获取`Dcat Admin`安装的应用路径，默认目录是`app/Admin`：\r\n\r\n```php\r\n\$bootstrap = admin_path('bootstrap.php');\r\n```\r\n\r\n### admin_url\r\n\r\n获取`Dcat Admin`应用的路由完整url：\r\n\r\n```php\r\n// 返回： http://localhost/admin/auth/users\r\n\$url = admin_url('auth/users');\r\n```\r\n\r\n### admin_route\r\n\r\n根据别名获取URL\r\n\r\n`app/Admin/routes.php`路由注册如下\r\n```php\r\nRoute::group([\r\n    'prefix'        => config('admin.route.prefix'),\r\n    'namespace'     => config('admin.route.namespace'),\r\n    'middleware'    => config('admin.route.middleware'),\r\n], function (Router \$router) {\r\n\t// 设置别名\r\n\t\$router->resource('users', 'UserController', [\r\n\t    'names' => ['index' => 'my-users'],\r\n\t]);\r\n\r\n});\r\n```\r\n\r\n根据别名获取URL\r\n\r\n```php\r\n// 获取url\r\n\$url = admin_route('users');\r\n\r\n// 获取url并附带请求参数\r\n\$url = admin_route('users',['id'=>1]);\r\n\r\n// 判断路由\r\n\$isUsers = request()->routeIs(admin_route_name('users'));\r\n```\r\n\r\n### admin_base_path\r\n\r\n获取`Dcat Admin`应用的路由路径：\r\n```php\r\n// 返回： /admin/auth/users\r\n\$path = admin_base_path('auth/users');\r\n```\r\n\r\n### admin_toastr\r\n\r\n在页面刷新后弹出一个`toastr`提示窗，参数：\r\n\r\n- `\$message` 提示窗内容\r\n- `\$type` 提示窗类型，默认`success`，支持`success`、`info`、`warning`、`error`\r\n- `\$options` toastr配置参数\r\n\r\n```php\r\nadmin_toastr('更新成功', 'success');\r\n```\r\n\r\n### admin_success\r\n\r\n在页面刷新后在页面顶部显示一个成功消息：\r\n```php\r\nadmin_success('标题', '成功了');\r\n```\r\n\r\n### admin_error\r\n\r\n在页面刷新后在页面顶部显示一个错误消息：\r\n```php\r\nadmin_error('标题', '失败了');\r\n```\r\n\r\n### admin_warning\r\n\r\n在页面刷新后在页面顶部显示一个警告消息：\r\n```php\r\nadmin_warning('标题', '警告');\r\n```\r\n\r\n### admin_info\r\n\r\n在页面刷新后在页面顶部显示一个提示消息：\r\n```php\r\nadmin_info('标题', '内容');\r\n```\r\n\r\n### admin_asset\r\n\r\n获取静态资源的完整链接：\r\n\r\n> {tip} 此函数支持别名.\r\n\r\n```html\r\n// 引入css\r\n<link rel=\"stylesheet\" href=\"{{ admin_asset(\"@admin/dcat-admin/main.min.css\") }}\">\r\n\r\n// 引入js\r\n<script src=\"{{ admin_asset('@admin/dcat-admin/main.min.js')}}\"></script>\r\n```\r\n\r\n### admin_trans_field\r\n\r\n翻译当前控制器的字段，控制器名称去除`Controller`后缀之后再转化为小写中划线就是语言包的名称，如：控制器名称为`UserProfileController`，则对应的语言包名称为`user-profile.php`。\r\n\r\n> {tip} 如果当前控制器对应的语言包中不存在该字段翻译，则会去公共翻译文件`global.php`中查找。\r\n\r\n```php\r\n\$name = admin_trans_field('name');\r\n\$createdAt = admin_trans_field('created_at');\r\n```\r\n语言包内容如下：\r\n```php\r\nreturn [\r\n    'fields' => [\r\n        'name' => '名称',\r\n        'created_at' => '创建时间',\r\n    ],\r\n];\r\n```\r\n\r\n\r\n### admin_trans_label\r\n\r\n翻译当前控制器的自定义内容，控制器名称去除`Controller`后缀之后再转化为小写中划线就是语言包的名称，如：控制器名称为`UserProfileController`，则对应的语言包名称为`user-profile.php`。\r\n\r\n> {tip} 如果当前控制器对应的语言包中不存在该字段翻译，则会去公共翻译文件`global.php`中查找。\r\n\r\n```php\r\n\$user = admin_trans_label('User');\r\n```\r\n语言包内容如下：\r\n```php\r\nreturn [\r\n    'labels' => [\r\n        'User' => '管理员',\r\n    ],\r\n];\r\n```\r\n\r\n### admin_trans_option\r\n\r\n翻译当前控制器的字段选项值，控制器名称去除`Controller`后缀之后再转化为小写中划线就是语言包的名称，如：控制器名称为`UserProfileController`，则对应的语言包名称为`user-profile.php`。\r\n\r\n> 如果当前控制器对应的语言包中不存在该字段翻译，则会去公共翻译文件`global.php`中查找。\r\n\r\n```php\r\n\$status = admin_trans_option(1, 'status');\r\n```\r\n语言包内容如下：\r\n```php\r\nreturn [\r\n    'options' => [\r\n        'status' => [\r\n            1 => '启用',\r\n            0 => '禁用'\r\n        ],\r\n    ],\r\n];\r\n```", 'order' => 1, 'created_at' => "2024-06-26 15:25:22", 'updated_at' => "2024-06-26 15:25:22", 'slug' => "basic-use"],
            ['id' => 84, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 16, 'title' => "基本使用", 'content' => "# 开发工具\r\n\r\n`Dcat Admin`提供了一些开发工具以帮助开发者提升开发效率。\r\n如果需要禁用开发工具，则把配置文件中的`app.debug`或`admin.helpers.enable`的参数值设置为`false`即可。\r\n\r\n\r\n### 代码生成器\r\n\r\n代码生成器可以通过界面一键生成增删改查代码，支持根据已有数据表生成增删改查代码，打开浏览器访问`http://localhost:8000/admin/helpers/scaffold`即可使用。\r\n\r\n> 如果你的开发环境不是`windows`系统，请给整个项目`777`权限，否则可能无法生成文件。\r\n\r\n\r\n### 扩展包管理\r\n`Dcat Admin`支持可视化管理扩展包，只要通过`composer`安装进来的扩展包都能在管理界面中看到，支持通过界面启用和导入扩展包，打开浏览器访问`http://localhost:8000/admin/helpers/extensions`即可使用。\r\n\r\n### IDE自动补全\r\n通过`php artisan admin:ide-helper`命令可以生成IDE自动补全文件，可以生成`Grid`、`Form`、`Show`等功能的IDE自动补全提示文件。\r\n\r\n### 图标\r\n访问`http://localhost:8000/admin/helpers/icons`可以查看已支持的图标列表。", 'order' => 1, 'created_at' => "2024-06-26 15:26:04", 'updated_at' => "2024-06-26 15:26:04", 'slug' => "basic-use"],
            ['id' => 85, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 17, 'title' => "自定义登录", 'content' => "# 自定义登录\r\n### 重写登录页面和登录逻辑\r\n\r\n方式一，重写登录控制器方法：\r\n\r\n默认的登录控制器用的是`App\\Admin\\AuthController`这个类，可以通过配置参数`admin.auth.controller`进行修改\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Controllers;\r\n\r\nuse Dcat\\Admin\\Controllers\\AuthController as BaseAuthController;\r\n\r\nclass AuthController extends BaseAuthController\r\n{\r\n    // 自定义登录view模板\r\n    protected \$view = 'admin.login';\r\n\t\r\n\t// 重写你的登录页面逻辑\r\n\tpublic function getLogin(Content \$content)\r\n    {\r\n        ...\r\n    }\r\n\r\n    ...\r\n}\r\n\r\n```\r\n\r\n\r\n方式二，覆写路由：\r\n\r\n在路由文件`app/Admin/routes.php`中，覆盖掉登录页面和登录逻辑的路由，即可实现自定义的功能\r\n\r\n```php\r\nRoute::group([\r\n    'prefix'        => config('admin.prefix'),\r\n    'namespace'     => Admin::controllerNamespace(),\r\n    'middleware'    => ['web', 'admin'],\r\n], function (Router \$router) {\r\n\r\n    \$router->get('auth/login', 'AuthController@getLogin');\r\n    \$router->post('auth/login', 'AuthController@postLogin');\r\n    \r\n});\r\n```\r\n\r\n在自定义的路由器AuthController中的`getLogin`、`postLogin`方法里分别实现自己的登录页面和登录逻辑。\r\n\r\n\r\n### 重写laravel认证\r\n\r\n如果不使用`Dcat Admin`内置的认证登录逻辑，可以参考下面的方式自定义登录认证逻辑\r\n\r\n首先要先定义一个`user provider`，用来获取用户身份, 比如`app/Providers/CustomUserProvider.php`：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Providers;\r\n\r\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\r\nuse Illuminate\\Contracts\\Auth\\UserProvider;\r\n\r\nclass CustomUserProvider implements UserProvider\r\n{\r\n    public function retrieveById(\$identifier)\r\n    {}\r\n\r\n    public function retrieveByToken(\$identifier, \$token)\r\n    {}\r\n\r\n    public function updateRememberToken(Authenticatable \$user, \$token)\r\n    {}\r\n\r\n    public function retrieveByCredentials(array \$credentials)\r\n    {\r\n        // 用\$credentials里面的用户名密码去获取用户信息，然后返回Illuminate\\Contracts\\Auth\\Authenticatable对象\r\n    }\r\n\r\n    public function validateCredentials(Authenticatable \$user, array \$credentials)\r\n    {\r\n        // 用\$credentials里面的用户名密码校验用户，返回true或false\r\n    }\r\n}\r\n\r\n```\r\n\r\n在方法`retrieveByCredentials`和`validateCredentials`中, 传入的`\$credentials`就是登录页面提交的用户名和密码数组，然后你可以使用`\$credentials`去实现自己的登录逻辑\r\n\r\nInterface `Illuminate\\Contracts\\Auth\\Authenticatable`的定义如下：\r\n```php\r\n<?php\r\n\r\nnamespace Illuminate\\Contracts\\Auth;\r\n\r\ninterface Authenticatable {\r\n\r\n    public function getAuthIdentifierName();\r\n    public function getAuthIdentifier();\r\n    public function getAuthPassword();\r\n    public function getRememberToken();\r\n    public function setRememberToken(\$value);\r\n    public function getRememberTokenName();\r\n\r\n}\r\n```\r\n\r\n上面interface每个方法的解释参考[adding-custom-user-providers](https://laravel.com/docs/5.5/authentication#adding-custom-user-providers)\r\n\r\n定义好了`User provider`之后，打开`app/Providers/AuthServiceProvider.php`注册它：\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Providers;\r\n\r\nuse Illuminate\\Support\\Facades\\Auth;\r\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\r\n\r\nclass AuthServiceProvider extends ServiceProvider\r\n{\r\n    /**\r\n     * Register any application authentication / authorization services.\r\n     *\r\n     * @return void\r\n     */\r\n    public function boot()\r\n    {\r\n        \$this->registerPolicies();\r\n\r\n        Auth::provider('custom', function (\$app, array \$config) {\r\n            \r\n            // Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...\r\n            return new CustomUserProvider();\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n最后修改一下配置,打开`config/admin.php`，找到`auth`部分修改:\r\n\r\n```php\r\n    'auth' => [\r\n        'guards' => [\r\n            'admin' => [\r\n                'driver' => 'session',\r\n                'provider' => 'admin',\r\n            ]\r\n        ],\r\n\r\n        // 修改下面\r\n        'providers' => [\r\n            'admin' => [\r\n                'driver' => 'custom',\r\n            ]\r\n        ],\r\n    ],\r\n```\r\n这样就完成了自定义登录认证的逻辑，自定义登陆算是laravel中比较复杂的部分，需要开发者有耐心的一步步调试完成。", 'order' => 1, 'created_at' => "2024-06-26 15:26:42", 'updated_at' => "2024-06-26 15:26:42", 'slug' => "basic-use"],
            ['id' => 86, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 18, 'title' => "自定义头部导航条", 'content' => "# 自定义头部导航条\r\n\r\n如果要在顶部导航条上添加html元素,  打开`app/Admin/bootstrap.php`：\r\n```php\r\nuse Dcat\\Admin\\Layout\\Navbar;\r\nuse Dcat\\Admin\\Admin;\r\n\r\nAdmin::navbar(function (Navbar \$navbar) {\r\n\r\n    \$navbar->left('html...');\r\n\r\n    \$navbar->right('html...');\r\n\r\n});\r\n```\r\n\r\n`left`和`right`方法分别用来在头部的左右两边添加内容，方法参数可以是任何可以渲染的对象(实现了`Htmlable`、`Renderable`接口或者包含`__toString()`方法的对象)或字符串\r\n\r\n\r\n\r\n## 添加下拉面板\r\n\r\n在模板文件中加上\r\n```html\r\n<ul class=\"nav navbar-nav\">\r\n    <li class=\"dropdown dropdown-notification nav-item\">\r\n        <a class=\"nav-link nav-link-label\" href=\"#\" data-toggle=\"dropdown\" aria-expanded=\"true\"><i class=\"ficon feather icon-bell\"></i><span class=\"badge badge-pill badge-primary badge-up\">5</span></a>\r\n        <ul class=\"dropdown-menu dropdown-menu-media dropdown-menu-right \">\r\n            <li class=\"dropdown-menu-header\">\r\n                <div class=\"dropdown-header m-0 p-2\">\r\n                    <h3 class=\"white\">5 New</h3><span class=\"grey darken-2\">App Notifications</span>\r\n                </div>\r\n            </li>\r\n            <li class=\"scrollable-container media-list ps ps--active-y\">\r\n                <a class=\"d-flex justify-content-between\" href=\"javascript:void(0)\">\r\n                    <div class=\"media d-flex align-items-start\">\r\n                        <div class=\"media-left\"><i class=\"feather icon-plus-square font-medium-5 primary\"></i></div>\r\n                        <div class=\"media-body\">\r\n                            <h6 class=\"primary media-heading\">You have new order!</h6><small class=\"notification-text\"> Are\r\n                                your going to meet me\r\n                                tonight?</small>\r\n                        </div><small>\r\n                            <time class=\"media-meta\" datetime=\"2015-06-11T18:29:20+08:00\">9 hours\r\n                                ago</time></small>\r\n                    </div>\r\n                </a><a class=\"d-flex justify-content-between\" href=\"javascript:void(0)\">\r\n                    <div class=\"media d-flex align-items-start\">\r\n                        <div class=\"media-left\"><i class=\"feather icon-download-cloud font-medium-5 success\"></i></div>\r\n                        <div class=\"media-body\">\r\n                            <h6 class=\"success media-heading red darken-1\">99% Server load</h6>\r\n                            <small class=\"notification-text\">You got new order of goods.</small>\r\n                        </div><small>\r\n                            <time class=\"media-meta\" datetime=\"2015-06-11T18:29:20+08:00\">5 hour\r\n                                ago</time></small>\r\n                    </div>\r\n                </a><a class=\"d-flex justify-content-between\" href=\"javascript:void(0)\">\r\n                    <div class=\"media d-flex align-items-start\">\r\n                        <div class=\"media-left\"><i class=\"feather icon-alert-triangle font-medium-5 danger\"></i></div>\r\n                        <div class=\"media-body\">\r\n                            <h6 class=\"danger media-heading yellow darken-3\">Warning notifixation\r\n                            </h6><small class=\"notification-text\">Server have 99% CPU usage.</small>\r\n                        </div><small>\r\n                            <time class=\"media-meta\" datetime=\"2015-06-11T18:29:20+08:00\">Today</time></small>\r\n                    </div>\r\n                </a>\r\n                <div class=\"ps__rail-x\" style=\"left: 0px; bottom: 0px;\"><div class=\"ps__thumb-x\" tabindex=\"0\" style=\"left: 0px; width: 0px;\"></div></div><div class=\"ps__rail-y\" style=\"top: 0px; right: 0px; height: 254px;\"><div class=\"ps__thumb-y\" tabindex=\"0\" style=\"top: 0px; height: 184px;\"></div></div></li>\r\n            <li class=\"dropdown-menu-footer\"><a class=\"dropdown-item p-1 text-center\" href=\"javascript:void(0)\">Read\r\n                    all notifications</a></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n```\r\n\r\n使用\r\n\r\n```php\r\n\$navbar->right(view('...'));\r\n```\r\n\r\n## 添加下拉菜单\r\n\r\n```html\r\n<ul class=\"nav navbar-nav\">\r\n    <li class=\"dropdown dropdown-language nav-item\">\r\n        <a class=\"dropdown-toggle nav-link\" href=\"#\" id=\"dropdown-flag\" data-toggle=\"dropdown\">\r\n            <i class=\"flag-icon flag-icon-us\"></i>\r\n            <span class=\"selected-language\">English</span>\r\n        </a>\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"dropdown-flag\">\r\n            <li class=\"dropdown-item\" href=\"#\" data-language=\"en\">\r\n                <a><i class=\"flag-icon flag-icon-us\"></i> English</a>\r\n            </li>\r\n            <li class=\"dropdown-item\" href=\"#\" data-language=\"fr\">\r\n                <a><i class=\"flag-icon flag-icon-fr\"></i> French</a>\r\n            </li>\r\n            <lia class=\"dropdown-item\" href=\"#\" data-language=\"de\">\r\n                <a><i class=\"flag-icon flag-icon-de\"></i>  German</a>\r\n            </lia>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n```\r\n使用\r\n\r\n```php\r\n\$navbar->right(view('...'));\r\n```\r\n\r\n更多的组件可以参考[AdminLTE3](https://github.com/ColorlibHQ/AdminLTE)。\r\n\r\n## 修改默认用户面板\r\n\r\n打开`app/Admin/bootstrap.php`，写入\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nadmin_inject_section(Admin::SECTION['NAVBAR_USER_PANEL'], function () {\r\n\treturn view('admin.partials.navbar-user-panel', ['user' => Admin::user()]);\r\n});\r\n```\r\n\r\n`navbar-user-panel.blade.php`视图内容\r\n```php\r\n@if(\$user)\r\n<li class=\"dropdown dropdown-user nav-item\">\r\n    <a class=\"dropdown-toggle nav-link dropdown-user-link\" href=\"#\" data-toggle=\"dropdown\">\r\n        <div class=\"user-nav d-sm-flex d-none\">\r\n            <span class=\"user-name text-bold-600\">{{ \$user->name }}</span>\r\n            <span class=\"user-status\"><i class=\"fa fa-circle text-success\"></i> {{ trans('admin.online') }}</span>\r\n        </div>\r\n        <span>\r\n            <img class=\"round\" src=\"{{ \$user->getAvatar() }}\" alt=\"avatar\" height=\"40\" width=\"40\" />\r\n        </span>\r\n    </a>\r\n    <div class=\"dropdown-menu dropdown-menu-right\">\r\n        <a href=\"{{ admin_url('auth/setting') }}\" class=\"dropdown-item\">\r\n            <i class=\"feather icon-user\"></i> {{ trans('admin.setting') }}\r\n        </a>\r\n\r\n        <div class=\"dropdown-divider\"></div>\r\n\r\n        <a class=\"dropdown-item\" href=\"{{ admin_url('auth/logout') }}\">\r\n            <i class=\"feather icon-power\"></i> {{ trans('admin.logout') }}\r\n        </a>\r\n    </div>\r\n</li>\r\n@endif\r\n```", 'order' => 1, 'created_at' => "2024-06-26 15:27:14", 'updated_at' => "2024-06-26 15:27:14", 'slug' => "basic-use"],
            ['id' => 87, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 19, 'title' => "BETA版本更新日志", 'content' => "# BETA版本更新日志\r\n\r\n## v2.2.2-beta\r\n\r\n发布时间 2022/6/27\r\n\r\n\r\n### 升级版本\r\n\r\n逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.2.2-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### BUG 修复\r\n\r\n1. 修复 Grid 表格当字段值为`0`时无法显示问题\r\n\r\n\r\n\r\n\r\n## v2.2.1-beta\r\n\r\n发布时间 2022/6/26\r\n\r\n\r\n### 升级版本\r\n\r\n逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.2.1-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 新增功能\r\n\r\n**1. 日夜模式切换支持多开场景 ([#1672 by @ReedSun](https://github.com/jqhph/dcat-admin/pull/1672))**\r\n\r\n**2. 表单增加 `override` 方法实现文件覆盖 ([#1706 by @laradocs](https://github.com/jqhph/dcat-admin/pull/1706))**\r\n\r\n```php\r\n\$form->file('file')->override();\r\n\r\n\$form->image('img')->override();\r\n```\r\n\r\n**3. 支持嵌套资源型控制器 ([#1725 by @lddtime](https://github.com/jqhph/dcat-admin/pull/1725))**\r\n\r\n**4. 支持在array/hasMany表单中使用when控制表单显示功能 （[#1776 by @rainhon](https://github.com/jqhph/dcat-admin/pull/1776))**\r\n\r\n```php\r\n\$form->array(\$column, function (\$form) {\r\n    \$form->radio('radio')\r\n        ->when([1, 4], function (Form \$form) {\r\n            \$form->text('text1');\r\n            \$form->text('text2');\r\n            \$form->text('text3');\r\n        })\r\n        ->when(2, function (Form \$form) {\r\n            \$form->editor('editor');\r\n        })\r\n        ->when(3, function (Form \$form) {\r\n            \$form->image('image');\r\n        })\r\n        ->options([...])\r\n        ->default(1);\r\n});\r\n```\r\n\r\n**5. 页面组件 `tab` 刷新后可选中对应选项 ([#1689 by @iljalukin](https://github.com/jqhph/dcat-admin/pull/1689))**\r\n\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Tab;\r\n\r\n\$tab = new Tab();\r\n\r\n\$tab->add('tab1', ..., 'id1');\r\n\$tab->add('tab2', ..., 'id2');\r\n```\r\n\r\n**6. 页面组件 `table` 没有数据时显示 `No data.` ([#1678 by @shacky](https://github.com/jqhph/dcat-admin/pull/1678))**\r\n\r\n\r\n### BUG 修复\r\n\r\n1. 修复 laravel9 中代码生成器报错问题\r\n2. 修复  Laravel9 发布语言文件路径错误 ([#1688 by @laradocs](https://github.com/jqhph/dcat-admin/pull/1688))\r\n3. 修复 `tab` 选项卡重复加载后不选中错误 ([#1689 by @iljalukin](https://github.com/jqhph/dcat-admin/pull/1689))\r\n\r\n4. 修复代码生成器提交失败保存状态 ([#1690 @by laradocs](https://github.com/jqhph/dcat-admin/pull/1690))\r\n\r\n5. 修复 `HasMany`表单中使用 `map` 字段错误问题 ([#1701 by @mojiajuzi](https://github.com/jqhph/dcat-admin/pull/1701))\r\n\r\n6. 修复代码生成器生成 Laravel9 语言文件路径错误 ([#1711 by @laradocs](https://github.com/jqhph/dcat-admin/pull/1711))\r\n\r\n7. 修复上传文件 `options` 被覆盖错误 ([#1747 by @laradocs](https://github.com/jqhph/dcat-admin/pull/1747))\r\n\r\n8. 修复 Grid 中 `editable` 方法触发 `xss` 错误 ([#1755 by @laradocs](https://github.com/jqhph/dcat-admin/pull/1755))\r\n\r\n9. 修复 Form 中 `number` 调用 `disable` 方法对自增减按钮失效 ([#1771 @by @laradocs](https://github.com/jqhph/dcat-admin/pull/1771))\r\n\r\n10. 修复 Form 中使用 `layout` 布局后 `HasMany` 字段删除子字段后验证规则依然生效问题([#1781 @by laradocs](https://github.com/jqhph/dcat-admin/pull/1781))\r\n\r\n11. 修复 PHP8.1 中触发 `ltrim` 和 `htmlentities` 方法异常 ([#1783 by @laradocs](https://github.com/jqhph/dcat-admin/pull/1783))\r\n\r\n12. 修复 Grid 使用`\$grid->column('xxx.xxx')`无法导出关联模型字段值问题 ([#1740 by @xyzzxy123](https://github.com/jqhph/dcat-admin/pull/1740))\r\n\r\n13. 修复项目路径中含有`Admin`造成代码生成器无法正常解析命名空间的问题  ([#1778 by @GMD170629](https://github.com/jqhph/dcat-admin/pull/1778))\r\n\r\n14. 修复 `embeds` 字段无法上传文件问题 ([#1770 by @pianzhou2021](https://github.com/jqhph/dcat-admin/pull/1770))\r\n\r\n\r\n## v2.2.0-beta\r\n\r\n发布时间 2022/2/20\r\n\r\n升级方法，逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.2.0-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加对Laravel9.x版本的支持**\r\n\r\n\r\n**2.支持在`hasMany`以及`array`表单中使用`table`表单**\r\n\r\n用法如下\r\n\r\n```php\r\n\$form->array(\$field, function (\$form) {\r\n    \$form->table('table_json', function (\$form) {\r\n        \$form->text('title');\r\n        \r\n        ...\r\n    });\r\n});\r\n```\r\n\r\n**3.数据表格过滤器增加findInSet方法**\r\n\r\n[#1639 @guanguans](https://github.com/jqhph/dcat-admin/pull/1639) sql: ` ... WHERE FIND_IN_SET(\"\$input\", \$column)`，示例\r\n\r\n```php\r\n\$grid->filter(function (\$filter) {\r\n    \$filter->findInSet(\$field);\r\n});\r\n```\r\n\r\n\r\n**4.调整代码生成器选择默认目录逻辑**\r\n\r\n[#1627 @Edwin](https://github.com/jqhph/dcat-admin/pull/1514) 新版本将会根据配置参数`admin.directory`设置的目录作为默认目录，默认为`Admin`。\r\n\r\n\r\n### BUG修复\r\n\r\n1. 修复`table`表单不支持`help`方法问题 [#1616 @jcbt](https://github.com/jqhph/dcat-admin/pull/1616)\r\n2. 修复启用多应用后注册扩展路由会导致默认应用首页无法访问问题\r\n3. 修复无法隐藏弹窗表单重置按钮问题 [#1631 @Sparkinzy](https://github.com/jqhph/dcat-admin/pull/1631)\r\n4. 修复`autocomplete`当字段值为数字时js组件报错问题 [#1661 @Sparkinzy](https://github.com/jqhph/dcat-admin/pull/1661)\r\n5. 修复设置路由前缀为\"/\"时权限管理表单无法读取路由信息问题\r\n\r\n\r\n## v2.1.7-beta\r\n\r\n发布时间 2021/12/25\r\n\r\n升级方法，逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.7-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加`admin_redirect`函数**\r\n\r\n跳转到指定`url`，此函数可用于代替`redirect`函数，支持`pjax`以及`ajax`请求\r\n\r\n```php\r\n// 不需要添加admin前缀\r\nreturn admin_redirect('auth/users');\r\n\r\n// 如果想要跳转到非admin前缀的链接，需要传递完整url链接\r\nreturn admin_redirect(url('users'));\r\n```\r\n\r\n### BUG修复\r\n\r\n1. 修复使用文件(file)上传表单删除文件时会报`destroyThumbnail`问题\r\n2. 修复当`hasMany`/`array`/`table`表单字段名与子表单字段名一样时无法删除行数据问题\r\n\r\n\r\n\r\n## v2.1.6-beta\r\n\r\n发布时间 2021/12/12\r\n\r\n升级方法，逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.6-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加`Form::autocomplete()`表单**\r\n\r\n[#1514 @Edwin](https://github.com/jqhph/dcat-admin/pull/1514) 此表单可以在填写表单时进行对表单值进行搜索，并把结果展示在下拉列表中，用法如下\r\n\r\n```php\r\n\$form->autocomplete(\$column[, \$label])->options(['foo', 'bar', ...]);\r\n```\r\n\r\n效果如下\r\n![](https://cdn.learnku.com/uploads/images/202112/12/38389/ArVNSvChag.png!large)\r\n\r\n也可以从远程API中获取数据\r\n```php\r\n// ajax 函数的第一个参数为 ajax url, 第二个参数为 valueField（可选）, 第三个参数为 groupField（可选）\r\n\$form->autocomplete(\$column[, \$label])->ajax('/countries', 'name', 'region');\r\n```\r\n\r\n远程API 服务端的请求参数为query，示例代码如下：\r\n```php\r\nclass CountryController extends AdminController\r\n{\r\n    public function search()\r\n    {\r\n        \$countries = Country::when(request('query'), function (\$query, \$value) {\r\n            \$query->where('name', 'like', \"%{\$value}%\");\r\n        })->get();\r\n\r\n        return Admin::json(\$countries->toArray());\r\n    }\r\n}\r\n```\r\n\r\n更多用法参考文档[数据表单 - 字段使用 - autocomplete](https://learnku.com/docs/dcat-admin/2.x/use-of-fields/8107#autocomplete)\r\n\r\n\r\n**2.图片/文件上传支持`arttribute`方法**\r\n[#1510 @iwzh](https://github.com/jqhph/dcat-admin/pull/1510) 通过`attribute`方法可以给文件上传的隐藏域表单设置属性，用法如下\r\n\r\n```php\r\n\$form->file(\$column)->attribute(['foo' => 'bar', ...]);\r\n```\r\n\r\n**3.数据表格增加`between`表头过滤器**\r\n[#1510 @iwzh](https://github.com/jqhph/dcat-admin/pull/1510) 用法如下\r\n\r\n```php\r\n\$grid->column('created_at')->filter(\r\n    Grid\\Column\\Filter\\Between::make()->datetime()\r\n);\r\n```\r\n\r\n**4.模型树增加`depthColumn`用于保存当前层级**\r\n\r\n[#1549 @weiwait](https://github.com/jqhph/dcat-admin/pull/1510)\r\n\r\n用法如下\r\n```php\r\nclass Category extends Model\r\n{\r\n    use ModelTree;\r\n    \r\n    // 定义depthColumn属性后，将会在数据表保存当前行的层级\r\n    protected \$depthColumn = 'depth';\r\n}\r\n```\r\n\r\n**5.表单`Row`布局可独立设置宽度**\r\n[#1530 @iwzh](https://github.com/jqhph/dcat-admin/pull/1530) 用法如下\r\n\r\n```php\r\n\$form->row(function (\$row) {\r\n    // 给所有字段设置默认宽度\r\n    \$row->defaultWidth(3);\r\n    \r\n    // 每个字段独立设置宽度\r\n    \$row->width(4)->text(...);\r\n});\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.调整数据表格导出数据时rows方法回调函数接受的参数类型为Collection**\r\n[#1584 @jourdon](https://github.com/jqhph/dcat-admin/pull/1584) 用法如下\r\n\r\n```php\r\nuse Illuminate\\Support\\Collection;\r\n\r\n\$grid->export()->rows(function (Collection \$rows) {\r\n    foreach (\$rows as \$index => &\$row) {\r\n       // \$row 的格式为模型\r\n       dd(\$row);\r\n    }\r\n\r\n    return \$rows;\r\n});\r\n```\r\n\r\n\r\n### BUG修复\r\n\r\n1. 修复使用OSS上传图片缩略图报错问题 [#1499 @jorry2008](https://github.com/jqhph/dcat-admin/pull/1499)\r\n2. 修复数据表格筛选默认项不能设置为`0`问题 [#1506 @liushoukun](https://github.com/jqhph/dcat-admin/pull/1506)\r\n3. 修复一对一关联关系表单验证规则异常问题 [#1516](https://github.com/jqhph/dcat-admin/issues/1516)\r\n4. 修复表单文件上传时，若已添加过文件则无法继续拖拽上传问题 [#1541 @hmilyfyj](https://github.com/jqhph/dcat-admin/pull/1541)\r\n5. 修复分页器在`LazyRenderable`下切换时导致样式丢失的问题 [#1539 @jyiL](https://github.com/jqhph/dcat-admin/pull/1539)\r\n6. 修复数据表格使用MongoDB时分页`perPage`数据类型错误问题 [#1555 @SmallRuralDog](https://github.com/jqhph/dcat-admin/pull/1555)\r\n7. 修复页面使用`pjax`渲染后`pjax`无法再次初始化`a`标签问题 [#1576 @xyzzxy123](https://github.com/jqhph/dcat-admin/pull/1576)\r\n8. 修复数据表格`Column::switch()`方法`refresh`参数无效问题 [#1595 @wxfjamdc](https://github.com/jqhph/dcat-admin/pull/1595)\r\n9. 修复多图片上传上传多个图片会导致旧图片缩略图被删除问题 [#1556](https://github.com/jqhph/dcat-admin/issues/1556)\r\n\r\n\r\n## v2.1.5-beta\r\n\r\n发布时间 2021/9/17\r\n\r\n升级方法，逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.5-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### BUG修复\r\n\r\n- 修复`v2.1.4`版本更新后不兼容`php v7.3`以下版本问题\r\n\r\n\r\n## v2.1.4-beta\r\n\r\n发布时间 2021/9/16\r\n\r\n升级方法，逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.4-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### BUG修复\r\n\r\n1. 修复管理员列表点击查看权限弹窗展示为空问题\r\n2. 修复数据表格关联关系表字段`非equal`查询均不生效问题\r\n3. 修复数据表格`column`使用`if`方法后无法在`displayer`中取得原始字段值问题\r\n\r\n## v2.1.3-beta\r\n\r\n发布时间 2021/9/14\r\n\r\n升级方法，逐步执行以下命令，最后清除**浏览器缓存**\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.3-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.重构数据表格行内编辑功能**\r\n\r\n当前版本重构了`editable`、`checkbox`和`radio`等三种行内编辑表单的`UI`样式，改为在弹窗中展示表单。并且增加了新的行内编辑表单`textarea`，效果如下：\r\n\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/mX4Za4nj1y.png!large)\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/9A2GdY3nSx.png!large)\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/6Bo4phkB3f.png!large)\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/wViO5EoPBg.png!large)\r\n\r\n\r\n**2.配置文件增加`favicon`参数**\r\n\r\n从当前版本开始可以在`config/admin.php`中配置`favicon`链接，参数名为`favicon`\r\n\r\n**3.数据表单提交时支持展示被抛出异常的`message`**\r\n\r\n从当前版本开始，假如提交表单时抛出异常如下\r\n```php\r\n\$form->submitted(function (\$form) {\r\n    throw new \\Exception('禁止访问');\r\n});\r\n```\r\n\r\n那么将可以在页面中看到如下提示\r\n\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/S0KtwNRYGK.png!large)\r\n\r\n\r\n**5.优化`array`、`table`表单在工具表单中的使用**\r\n\r\n在旧版本`Widgtet/Form`中如果使用了`array`、`table`表单，并且在`array`、`table`表单中使用了文件上传表单时，需要自定义文件上传地址才能正常上传，所以此次版本对这个功能做了优化，更新版本之后将不需要再自定义上传地址\r\n```php\r\n\$this->array('...', function (\$form) {\r\n    // 无需自定义上传地址\r\n    \$form->image('img');\r\n});\r\n```\r\n\r\n**4.增加数据表单`html`对`addElementClass`方法的支持**\r\n\r\n在旧版本中，`addElementClass`设置的`class`无法对`html`方法生效，所以新版中对此做了改进\r\n```php\r\n\$form->html(...)->addElementClass(['class1', ...]);\r\n```\r\n\r\n**5.数据表单图片上传表单访问缩略图时不检查图片是否存在**\r\n\r\n[@zhaiyuxin103](https://github.com/jqhph/dcat-admin/pull/1455)\r\n\r\n\r\n### BUG修复\r\n\r\n1. 修复数据表单使用闭包验证规则时无法正确合并问题 [#1429 @Edwin](https://github.com/jqhph/dcat-admin/pull/1429)\r\n2. 修复文件上传启用`sequenceName`方法后生成的文件名带有重复后缀问题\r\n3. 修复文件上传表单上传一对一字段设置`required`验证规则后无法上传文件问题\r\n4. 修复某些操作下出现空白筛选边栏的问题 [#1445 @Abbotton](https://github.com/jqhph/dcat-admin/pull/1445)\r\n5. 修复`selectTable`、`multipleSelectTable`等字段的`model`方法指定第二个参数无效问题 [#1460 @hhniao](https://github.com/jqhph/dcat-admin/pull/1460)\r\n6. 修复无法翻译图片上传表单`dimensions`验证失败提示文案问题\r\n7. 修复当在`array`、`table`以及`hasMany`表单中使用图片上传表单，并且设置`dimensions`验证规则后无法提交问题\r\n8. 修复多图上传只能预览第一个图片问题\r\n9. 修复表单动态展示如果字段值带小数点时不生效问题\r\n\r\n\r\n\r\n## v2.1.2-beta\r\n\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/mX4Za4nj1y.png!large)\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/6Bo4phkB3f.png!large)\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/wViO5EoPBg.png!large)\r\n![](https://cdn.learnku.com/uploads/images/202109/14/38389/S0KtwNRYGK.png!large)\r\n发布时间 2021/8/1\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.2-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n\r\n\r\n### 功能改进\r\n\r\n**1.增加 Grid\\Model::apply() 方法**\r\n\r\n此方法可以应用数据表格的快捷搜索和筛选过滤的查询条件，用法示例如下\r\n\r\n在旧版本中，使用快捷搜索和筛选过滤的查询条件非常的麻烦\r\n```php\r\n\$grid->header(function (\$collection) use (\$grid) {\r\n    \$query = Model::query();\r\n\r\n    // 拿到表格筛选 where 条件数组进行遍历\r\n    \$grid->model()->getQueries()->unique()->each(function (\$value) use (&\$query) {\r\n        if (in_array(\$value['method'], ['paginate', 'get', 'orderBy', 'orderByDesc'], true)) {\r\n            return;\r\n        }\r\n\r\n        \$query = call_user_func_array([\$query, \$value['method']], \$value['arguments'] ?? []);\r\n    });\r\n\r\n    // 查出统计数据\r\n    \$data = \$query->get();\r\n\r\n    // 自定义组件\r\n    return new Card(\$data);\r\n});\r\n```\r\n\r\n从当前版本开始可以使用`apply`方法简化上面的代码\r\n```php\r\n\$grid->header(function (\$collection) use (\$grid) {\r\n    \$query = Model::query();\r\n\r\n    // 拿到表格筛选 where 条件数组进行遍历\r\n    \$grid->model()->apply(\$query);\r\n\r\n    // 查出统计数据\r\n    \$data = \$query->get();\r\n\r\n    // 自定义组件\r\n    return new Card(\$data);\r\n});\r\n```\r\n\r\n\r\n\r\n### BUG修复\r\n\r\n1. 修复数据表格无法禁用批量删除按钮问题\r\n2. 修复高德地图表单有坐标时没有缩放问题  [#1377 @gzxy-0102](https://github.com/jqhph/dcat-admin/pull/1377)\r\n3. 修复文件上传表单下载按钮不显示问题 [#1405](https://github.com/jqhph/dcat-admin/issues/1405)\r\n4. 修复数据表格使用了`simplePaginate`后数据筛选参数不生效问题 [#1405](https://github.com/jqhph/dcat-admin/issues/1405)\r\n\r\n\r\n## v2.1.1-beta\r\n\r\n发布时间 2021/7/12\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.1-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加模型树expand方法控制是否展开所有子节点数据**\r\n\r\n默认展开所有子节点数据\r\n\r\n```php\r\n// 展开子节点数据\r\n\$tree->expand();\r\n\r\n// 收起所有子节点数据\r\n\$tree->expand(false);\r\n```\r\n\r\n**2.增加文件上传表单下载功能**\r\n\r\n```php\r\n\$form->file('...')->downloadable();\r\n```\r\n\r\n\r\n**3.增加高德地图表单**\r\n\r\n在配置文件`config/admin.php`中设置 [#1331 @gaizhixin](https://github.com/jqhph/dcat-admin/pull/1331)\r\n```php\r\n    'map' => [\r\n        'provider' => 'amap',\r\n        'keys' => [\r\n            // 配置高德地图的key\r\n            'amap' => 'key',\r\n        ],\r\n    ],\r\n```\r\n\r\n\r\n**4.新增addElementClass方法用于给表单字段设置自定义class**\r\n\r\n```php\r\n// 如果不希望添加前缀，则第二个参数设置为false\r\n\$form->text(...)->addElementClass(['class1', 'class2'], false);\r\n```\r\n\r\n**5.增加表格批量操作设置下拉菜单分割线功能**\r\n\r\n支持以下两种方式\r\n\r\n```php\r\n// 方式1\r\n\$grid->batchActions(function (\$batch) {\r\n    \$batch->add(...);\r\n    \r\n    // 显示分割线\r\n    \$batch->divider();\r\n    \r\n    ...\r\n});\r\n\r\n// 方式2\r\nuse Dcat\\Admin\\Grid\\Tools\\ActionDivider;\r\n\r\n\$grid->batchActions([\r\n    new Action1(),\r\n    ...\r\n    new ActionDivider(),\r\n    ...\r\n]);\r\n```\r\n\r\n### 功能改进\r\n\r\n\r\n**1.table表单支持自定义view**\r\n\r\n```php\r\n\$this->table(...)->setView('...');\r\n```\r\n\r\n**2.优化菜单收缩后的操作体验以及UI**\r\n\r\n当菜单收缩后，光标移动上去后自动展开如果点击了菜单，跳转后会自动收缩回去；并且修复了`mini-logo`显示异常的问题\r\n\r\n\r\n**3.数据表格行操作列当没有任何操作按钮时不再显示空的下拉菜单**\r\n\r\n数据表格行操作列当没有任何操作按钮时不再显示空的下拉菜单 [#1327 @jiangyuntao](https://github.com/jqhph/dcat-admin/pull/1331)\r\n\r\n**4.优化图片上传表单图片的显示效果**\r\n\r\n[#1366 @ShermanTsang](https://github.com/jqhph/dcat-admin/pull/1366)\r\n\r\n### BUG修复\r\n\r\n1. 修复树形表格(`tree`)展开子节点时如果无数据`Grid::__toString()`会报错问题\r\n2. 修复启用数据表格异步渲染功能后减少筛选条件无效问题\r\n3. 修复表格异步渲染筛选项数量显示异常问题\r\n4. 修复设置表单字段`class`会覆盖默认`class`问题\r\n5. 修复关闭`debug`模式后访问无权限页面会显示异常报文问题\r\n6. 修复配置文件自定义批量删除按钮后 `Grid::disableBatchDelete` 失效问题\r\n7. 修复菜单缩进后三级菜单无法隐藏问题\r\n8. 修复当设置为无路由前缀时，内置的权限系统点击`新增权限`报错的问题 \r\n9. 修复当禁用内置权限系统时没有禁用掉权限中间件无效问题\r\n10. 修复`select`以及`selectTable`的`model`传递了第二个参数为非`id`时无法显示编辑数据的问题\r\n11. 修复部分表单设置大小样式未生效的问题 [#1361 @Abbotton](https://github.com/jqhph/dcat-admin/pull/1361)\r\n12. 修复表格排序功能无法兼容`Grid\\Model::latest`以及`oldest`方法问题\r\n\r\n\r\n## v2.1.0-beta\r\n\r\n发布时间 2021/5/23\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.1.0-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加表格异步渲染功能**\r\n\r\n当页面的表格展示的数据特别多（列多行多），并且加载的组件也较多时，可能会出现卡顿的现象，此时可以使用表格异步渲染功能，可以有效地减轻页面卡顿的情况：\r\n\r\n```php\r\n// 启用表格异步渲染功能\r\n\$grid->async();\r\n```\r\n\r\n需要注意的是，如果页面没有出现明显的卡顿现象，则无需启用此功能，并且如果页面中存在多个数据表格，那么也无法使用此功能！详细用法参考https://learnku.com/docs/dcat-admin/2.x/asynchronous-rendering/11051\r\n\r\n### 功能改进\r\n\r\n**1.支持`Laravel Octane 1.x`版本**\r\n\r\n此次版本适配了`Laravel Octane 1.x`版本的相关变动，具体用法参考[Laravel Octane](laravel-octane.md)。\r\n\r\n**2.调用`expand(false)`可以禁止自动弹出过滤器侧栏**\r\n\r\n```php\r\n// 禁止自动弹出过滤器侧边栏\r\n\$grid->filter(function (\$filter) {\r\n    \$filter->expand(false);\r\n});\r\n```\r\n\r\n**3.升级`tinymce`至`v5.8.0`版本**\r\n\r\n[@yiming0](https://github.com/jqhph/dcat-admin/pull/1263)\r\n\r\n**4.权限以及角色页面绑定菜单后自动清除菜单缓存**\r\n\r\n### BUG修复\r\n\r\n1\\. 修复`withConstraints`方法对详情页`url`无效问题 [#1232](https://github.com/jqhph/dcat-admin/issues/1232)\r\n2\\. 修复多图/文件上传表单删除图片时表单值会转化成关联数组问题\r\n3\\. 修复百度地图组件在启用`https`后无法使用问题 [#1162](https://github.com/jqhph/dcat-admin/issues/1162)\r\n\r\n## v2.0.24-beta\r\n\r\n发布时间 2021/4/30\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.24-beta\"\r\nphp artisan admin:update # 不会覆盖翻译文件 menu.php 以及 global.php\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加创建或编辑角色以及权限时可直接绑定菜单功能**\r\n\r\n在角色和权限的创建以及编辑页面可以直接绑定菜单，此功能默认开启，可以通过配置参数`admin.menu.role_bind_menu`以及`admin.menu.permission_bind_menu`进行关闭，效果如下\r\n\r\n![](https://cdn.learnku.com/uploads/images/202104/30/38389/OUgvZVSA5l.jpg!large)\r\n\r\n**2.新增`Form\\Tree::treeStatus()`方法，允许单独选择父节点**\r\n\r\n用法\r\n```php\r\n\$form->tree('xxx')\r\n    ->treeState(false) # 允许单独选择父节点\r\n    ->setTitleColumn('title')\r\n    ->nodes(...);\r\n```\r\n\r\n效果\r\n![](https://cdn.learnku.com/uploads/images/202104/30/38389/oChwzky2BT.gif!large)\r\n\r\n### BUG修复\r\n\r\n1. 修复多应用情况下无法使用域名区分应用问题\r\n2. 修复`Admin::pjax()`方法未声明为`static`问题\r\n3. 修复`grid filter checkbox`只能选中多个选项后只有单个选项生效问题 [@outer199](https://github.com/jqhph/dcat-admin/pull/1174)\r\n4. 修复菜单默认图标设置无效问题\r\n5. 修复`php7.4`或以上版本中使用`embeds`表单时报错问题 [#1204](https://github.com/jqhph/dcat-admin/issues/1204)\r\n6. 修复分步表单下使用`\$form->list(...)->limit(...);`参数校验不通过后刷新页面报错问题 [#1206](https://github.com/jqhph/dcat-admin/issues/1206)\r\n7. 修复禁用`pjax`后编辑和创建完成后无法进行跳转问题 [#1208](https://github.com/jqhph/dcat-admin/issues/1208)\r\n8. 修复使用固定列功能时列表会多出一列`ActionsClass`问题\r\n\r\n\r\n## v2.0.23-beta\r\n\r\n发布时间 2021/4/18\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.23-beta\"\r\n# 不会覆盖翻译文件 menu.php 以及 global.php\r\nphp artisan admin:update\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加对`Laravel Octane`的支持**\r\n\r\n[Laravel Octane](https://github.com/laravel/octane) 是一个基于 `Swoole/RoadRunner` 驱动的可以提升 `Laravel` 框架性能的项目，安装后可以大幅提升`Laravel`项目的性能，`Dcat Admin`也兼容了`Laravel Octane`环境，只需在配置文件`config/octane.php`中加入如下配置即可：\r\n\r\n```php\r\n\r\n    'listeners' => [\r\n        ...,\r\n\r\n        RequestReceived::class => [\r\n            ...Octane::prepareApplicationForNextOperation(),\r\n            ...Octane::prepareApplicationForNextRequest(),\r\n            \r\n            // 开启对 Dcat Admin 的支持\r\n            Dcat\\Admin\\Octane\\Listeners\\FlushAdminState::class,\r\n        ],\r\n        \r\n        ...\r\n    ],    \r\n```\r\n\r\n> [Laravel Octane](https://github.com/laravel/octane)目前仍处于`beta`版本阶段，关于[Laravel Octane](https://github.com/laravel/octane)的安装与更多介绍请前往文档 https://github.com/laravel/octane 查看。\r\n\r\n\r\n\r\n**2.增加表格简化分页（`simplePaginate`）功能**\r\n\r\n启用 `simplePaginate` 功能后会使用`Laravel`的[simplePaginate](https://laravel.com/docs/8.x/pagination#simple-pagination)功能进行分页，当数据量较大时可以大幅提升页面的响应速度，但需要注意的是，使用此功能后将不会查询数据表的**总行数**。\r\n\r\n```php\r\n// 启用\r\n\$grid->simplePaginate();\r\n\r\n// 禁用\r\n\$grid->simplePaginate(false);\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.重构翻译功能**\r\n\r\n在过去版本中，当使用[异步表单](lazy.md)以及[异步表格](lazy.md)功能时无法自动对字段名称进行翻译，从当前版本开始可以通过`translation`属性指定翻译文件的路径进行自动翻译，用法如下\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Admin\\Forms;\r\n\r\nuse Dcat\\Admin\\Traits\\LazyWidget;\r\nuse Dcat\\Admin\\Widgets\\Form;\r\nuse Dcat\\Admin\\Contracts\\LazyRenderable;\r\n\r\nclass MyForm extends Form implements LazyRenderable\r\n{\r\n    use LazyWidget;\r\n    \r\n    /**\r\n     * 指定翻译文件名称\r\n     * \r\n     * @var string \r\n     */\r\n    protected \$translation = 'my-form';\r\n    \r\n    public function form()\r\n    {\r\n        \$this->text('field1');\r\n        \$this->text('field2');\r\n        \r\n        ...\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n语言包`resources/lang/{locale}/my-form.php`内容如下\r\n```php\r\n<?php\r\n\r\nreturn [\r\n    'fields' => [\r\n        'field1' => '字段1',\r\n        'field2' => '字段2',\r\n        \r\n        ...\r\n    ],\r\n];\r\n```\r\n\r\n并且在控制器中也可以指定当前翻译文件的路径\r\n\r\n```php\r\nuse Dcat\\Admin\\Http\\Controllers\\AdminController;\r\n\r\nclass UserController extends AdminController\r\n{\r\n    /**\r\n     * 指定翻译文件名称\r\n     * \r\n     * @var string \r\n     */\r\n    protected \$translation = 'user1';\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n当然也可以通过`Admin::translation()`方法指定\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nAdmin::translation('user');\r\n```\r\n\r\n\r\n**2.增加表格相关配置参数**\r\n\r\n增加数个表格相关的配置文件参数`admin.grid.*`:\r\n\r\n```php\r\n    'grid' => [\r\n\r\n        // 表格行操作类\r\n        'grid_action_class' => Dcat\\Admin\\Grid\\Displayers\\DropdownActions::class,\r\n\r\n        // 表格批量操作类\r\n        'batch_action_class' => Dcat\\Admin\\Grid\\Tools\\BatchActions::class,\r\n\r\n        // 表格分页类\r\n        'paginator_class' => Dcat\\Admin\\Grid\\Tools\\Paginator::class,\r\n\r\n        // 表格行默认的几个操作类配置\r\n        'actions' => [\r\n            'view' => Dcat\\Admin\\Grid\\Actions\\Show::class,\r\n            'edit' => Dcat\\Admin\\Grid\\Actions\\Edit::class,\r\n            'quick_edit' => Dcat\\Admin\\Grid\\Actions\\QuickEdit::class,\r\n            'delete' => Dcat\\Admin\\Grid\\Actions\\Delete::class,\r\n            'batch_delete' => Dcat\\Admin\\Grid\\Tools\\BatchDelete::class,\r\n        ],\r\n\r\n        ...\r\n    ],\r\n```\r\n\r\n\r\n**3.移除禁用表格分页后显示表格页脚信息**\r\n\r\n从当前版本开始，如果禁用了表格的分页功能，将不会再显示表格的页脚信息。\r\n\r\n**4.优化 `Filter::panel()` 布局间距**\r\n\r\n\r\n**5.优化文件发布功能，发布语言包文件时将不再覆盖`menu.php`以及`global.php`文件**\r\n\r\n从当前版本开始，当使用`admin:update`以及`admin:publish --force`命令文件时，将不再覆盖`menu.php`以及`global.php`文件。\r\n\r\n**6.更新`Tinymce`版本至`5.6.2`**\r\n\r\n[@wk1025](https://github.com/jqhph/dcat-admin/pull/1154)\r\n\r\n### BUG修复\r\n\r\n1. 修复数据表格中字段类型为`Object`时报错问题 [@xiaohuilam](https://github.com/jqhph/dcat-admin/pull/1154)\r\n2. 修复文件上传失败仍然提示上传成功问题\r\n3. 修复权限判断中间件匹配时没有使用传入的`\$request`对象问题 [@asmodai1985](https://github.com/jqhph/dcat-admin/pull/1157)\r\n4. 修复表单`rules`方法第二个参数设置`message`无效问题\r\n5. 修复`Helper::array()`会把`0`转为空数组问题\r\n6. 修复行选择器无法选中树形表格子级行问题\r\n7. 修复`KeyValue::setValueLabel()`方法无效问题\r\n8. 修复`hasmany`以及`table`表单删除选项时会重置表单问题\r\n9. 修复表格行操作编辑按钮文本显示错误问题 [@GemaDynamic](https://github.com/jqhph/dcat-admin/pull/1174)\r\n10. 修复树形表格子级行无法正常使用表单弹窗问题 [#813](https://github.com/jqhph/dcat-admin/issues/1174)\r\n\r\n\r\n\r\n## v2.0.22-beta\r\n\r\n发布时间 2021/4/1\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.22-beta\"\r\nphp artisan admin:update\r\n```\r\n\r\n### BUG修复\r\n\r\n1. 修复部分功能缺失`CSRF_TOKEN`报错问题\r\n2. 修复菜单自动适应高度功能报错问题\r\n\r\n\r\n\r\n## v2.0.21-beta\r\n\r\n发布时间 2021/3/30\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.21-beta\"\r\nphp artisan admin:update\r\n```\r\n\r\n### 新增功能\r\n\r\n**1.增加表格列选择器`ColumnSelector`支持持久化存储功能**\r\n\r\n在配置文件`config/admin.php`可以配置存储列选择器状态的方式，支持的存储方式如下\r\n\r\n- `Dcat\\Admin\\Grid\\ColumnSelector\\SessionStore` 列选择器状态数据保存在`session`中，仅在登陆中有效\r\n- `Dcat\\Admin\\Grid\\ColumnSelector\\CacheStore`  列选择器状态数据保存在[Laravel Cache](https://laravel.com/docs/8.x/cache#driver-prerequisites)缓存系统中，最长可保存`300`天，并可以通过`admin.grid.column_selector.store_params.driver`可以配置缓存驱动，默认为`file`\r\n\r\n```php\r\n    'grid' => [\r\n\r\n        ...\r\n\r\n        'column_selector' => [\r\n            'store' => Dcat\\Admin\\Grid\\ColumnSelector\\SessionStore::class,\r\n            'store_params' => [\r\n                'driver' => 'file',\r\n            ],\r\n        ],\r\n    ],\r\n```\r\n\r\n**2.增加表格条件判断(`if`)的终结方法(`end`)**\r\n\r\n```php\r\n\$grid->column('status')\r\n    ->if(...) // 条件1\r\n    ->display(...)\r\n    ->display(...)\r\n    \r\n    ->if(...) // 条件2\r\n    ->display(...)\r\n    ->display(...)\r\n    \r\n    ->end() // 终结前面的条件判断\r\n    ->display(...); // 所有条件都能生效\r\n```\r\n\r\n**3.增加表格行选择器默认选中(`check`)以及禁止更改选中状态(`disable`)功能**\r\n\r\n\r\n通过`check`方法可以设置默认选中的行，此方法接受一个`array`类型或`匿名函数`参数\r\n\r\n```php\r\n// 设置默认选中第 1/3/5 行\r\n\$grid->rowSelector()->check([0, 2, 4]);\r\n\r\n// 传递闭包\r\n\$grid->rowSelector()->check(function () {\r\n    // 设置默认选中第 1/3/5 行\r\n    return in_array(\$this->_index, [0, 2, 4]);\r\n});\r\n\r\n// 在闭包中使用当前行其他字段\r\n\$grid->rowSelector()->check(function () {\r\n    // 设置默认选中 id > 10 的行\r\n    return \$this->id > 10;\r\n});\r\n```\r\n\r\n通过`disable`方法可以设置禁止更改选中状态的行，此方法接受一个`array`类型或`匿名函数`参数\r\n\r\n```php\r\n// 禁止第 1/3/5 行更改选中状态\r\n\$grid->rowSelector()->disable([0, 2, 4]);\r\n\r\n// 传递闭包\r\n\$grid->rowSelector()->disable(function () {\r\n    // 禁止第 1/3/5 行更改选中状态\r\n    return in_array(\$this->_index, [0, 2, 4]);\r\n});\r\n\r\n// 在闭包中使用当前行其他字段\r\n\$grid->rowSelector()->disable(function () {\r\n    // 禁止 id > 10 的行更改选中状态\r\n    return \$this->id > 10;\r\n});\r\n\r\n// disable 可以和 check 方法一起使用\r\n\$grid->rowSelector()->check([2, 4])->disable([0, 2, 4]);\r\n```\r\n\r\n**4.增加`KeyValue`表单自定义标题翻译功能**\r\n\r\n```php\r\n\$form->keyValue(...)->setKeyLabel('键名')->setValueLabel('键值');\r\n```\r\n\r\n\r\n**5.增加`Grid::scrollbarX`显示表格横向滚动条方法**\r\n\r\n显示表格横向滚动条，默认不显示\r\n\r\n```php\r\n// 启用\r\n\$grid->scrollbarX();\r\n\r\n// 禁用\r\n\$grid->scrollbarX(false);\r\n```\r\n\r\n\r\n**6.增加`admin:update`命令**\r\n从当前版本开始，升级后可以直接运行 `admin:update`，相当于运行\r\n\r\n```\r\nphp artisan admin:publish --assets --migrations --lang --force\r\nphp artisan migrate\r\n``` \r\n\r\n### 功能改进\r\n\r\n**1.表单显示编辑数据时兼容驼峰风格的关联关系名称**\r\n\r\n在旧版本中，如果需要编辑模型关联关系字段，且模型的关联关系名称为驼峰风格时，需要把名称更改为下划线风格才能正常显示，这对开发者非常不友好。从当前版本开始，可以直接使用驼峰风格的关联关系名称，不需要做任何特殊处理\r\n```php\r\nreturn Form::make(User::with(['myProfile']), function (Form \$form) {\r\n    // 直接使用驼峰风格命名，不需做其他处理\r\n    \$form->text('myProfile.full_name');\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n\r\n**2.调整工具表单数据设置逻辑，可在`form`方法中获取`default`方法数据**\r\n\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Form;\r\n\r\nclass Setting extends Form\r\n{\r\n    public function form()\r\n    {\r\n        // 获取 default 方法设置的数据\r\n        \$id = \$this->data()->id;\r\n        \$name = \$this->data()->name;\r\n    \r\n        \$this->text('name');\r\n        \r\n        ...\r\n    }\r\n    \r\n    public function default()\r\n    {\r\n        return [\r\n            'id' => 1,\r\n            'name' => 'abc',\r\n            ...\r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n**3.`hasMany`以及`array`表单支持整体使用`rules`验证规则校验**\r\n\r\n```php\r\n\$form->hasMany(...)->rules('size:2');\r\n```\r\n\r\n**4.调整`selectTable`默认占位符为`选择 ...`**\r\n\r\n**5.优化表单row布局间距**\r\n\r\n[#1092](https://github.com/jqhph/dcat-admin/issues/1092)\r\n\r\n\r\n### BUG修复\r\n\r\n1. 修复 `ModelTree` 删除节点时无法删除间隔一个层级以上的子节点问题\r\n2. 修复导出功能在部分环境可能会出现异常问题\r\n3. 修复表单联动(`load`)加载后初始值丢失的问题 [@xqbumu](https://github.com/jqhph/dcat-admin/pull/1103)\r\n4. 修复文件上传失败后显示提示信息异常问题\r\n5. 修复数据详情`Show`实例化函数如果传递模型，主键赋值错误的问题  [@jisuye](https://github.com/jqhph/dcat-admin/pull/1112)\r\n6. 修复表格`setConstraints`方法对快速编辑无效问题 [#1119](https://github.com/jqhph/dcat-admin/issues/1119)\r\n7. 修复在`iframe`页面中预览图片功能异常问题\r\n8. 修复`hasMany`以及`array`表单下删除使用`required`验证规则的字段后导致无法提交表单问题\r\n9. 修复表格`dialogTree`当顶级ID为字符串`0`时加载异常问题 [#1122](https://github.com/jqhph/dcat-admin/issues/1122)\r\n\r\n\r\n\r\n## v2.0.20-beta\r\n\r\n发布时间 2021/3/8\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.20-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.`selectTable`表单表格刷新时保留前页的数据状态**\r\n\r\n`selectTable`表单表格刷新或翻页后会保留前页选中或取消的数据状态\r\n\r\n**2.`selectTable`表单设置显示字段名称功能优化**\r\n\r\n在旧版本中，如果想要设置`selectTable`表单选中的字段或显示的字段，需要在`Renderable`对象中设置，非常的麻烦和不便，从当前版本开始，开发者可以直接通过下面的方法设置选中的字段或显示的字段\r\n\r\n```php\r\n\$form->selectTable('user_id')\r\n\t->from(UserTable::make())\r\n\t->pluck('full_name', 'id'); // 第一个参数为显示的字段，第二个参数为选中后将保存到表单的字段\r\n\r\n// 也可以直接使用下面的方法\r\n\$form->selectTable('user_id')\r\n\t->from(UserTable::make())\r\n\t->model(UserModel::class, 'id', 'full_name');\r\n```\r\n\r\n\r\n**3.`selectTable`、`multipleSelectTable`、`radio`、`checkbox`表单增加`load`方法**\r\n\r\n从当前版本开始，`selectTable`、`multipleSelectTable`、`radio`、`checkbox`也可以使用`load`方法联动`select`和`multipleSelect`表单\r\n\r\n```php\r\n\$form->radio('type')->options([...])->load('category', 'categories/options');\r\n\r\n\$form->select('categories');\r\n```\r\n\r\n接口`categories/options`返回格式如下\r\n\r\n```json\r\n[\r\n    {\r\n        \"id\": 9,\r\n        \"text\": \"xxx\"\r\n    },\r\n    {\r\n        \"id\": 21,\r\n        \"text\": \"xxx\"\r\n    },\r\n    ...\r\n]\r\n```\r\n\r\n\r\n**4.增加菜单水平布局自动适应页面以及菜单高度变化功能**\r\n\r\n启用菜单水平布局功能后，当页面高度或菜单高度发生变动时，页面会自适应、自行调整内容间距\r\n\r\n****\r\n\r\n\r\n**5.增加表格`Grid::dropColumn()`方法用于删除设置的列**\r\n\r\n```php\r\n\$nameColumn = \$grid->column('name');\r\n\r\n// 删除名称为 `name` 的列\r\n\$grid->dropColumn('name');\r\n// 等同于\r\n\$grid->dropColumn(\$nameColumn);\r\n```\r\n\r\n**6.增加`admin_javascript`函数**\r\n\r\n此函数可用于往`php`的配置`array`中添加`JS`代码，用法如下\r\n\r\n```php\r\n\$form->text('number')->inputmask([\r\n\t'oncomplete' => admin_javascript('function () {\r\n\t\t// 这里是js代码\r\n\t    alert('inputmask complete');\r\n\t}'),\r\n]);\r\n```\r\n\r\n**6.`Form`表单底部可默认勾选`查看`、`继续编辑`、`继续创建`等选项功能**\r\n\r\n用法如下 [#1073](https://github.com/jqhph/dcat-admin/pull/1073)\r\n\r\n```php\r\n\$form->footer(function (Footer \$footer) {\r\n    // 设置`查看`默认选中\r\n    \$footer->defaultViewChecked();\r\n\r\n    // 设置`继续编辑`默认选中\r\n    \$footer->defaultEditingChecked();\r\n    \r\n    // 设置`继续创建`默认选中\r\n    \$footer->defaultCreatingChecked();\r\n});\r\n\r\n// 设置`查看`默认选中\r\n\$form->defaultViewChecked();\r\n\r\n// 设置`继续编辑`默认选中\r\n\$form->defaultEditingChecked();\r\n\r\n// 设置`继续创建`默认选中\r\n\$form->defaultCreatingChecked();\r\n```\r\n\r\n\r\n### BUG\r\n\r\n1. 修复表格使用关联关系字段排序时必须先`with`问题\r\n2. 修复同个页面无法同时渲染多个异步组件问题\r\n3. 修复树形表格下删除子节点数据后跳转异常问题 [#1071](https://github.com/jqhph/dcat-admin/issues/1071)\r\n4. 修复表格导出字段中存在空数组时导出异常问题\r\n5. 修复表单多图上传使用`sortable`功能进行排序会导致页面的图片元素消失不见问题\r\n6. 修复表单字段`disable`方法设置`false`无效问题\r\n7. 修复`multipleSelect`表单使用`load`联动加载时无法把所有选中选项传入接口问题 [#1076](https://github.com/jqhph/dcat-admin/issues/1076)\r\n8. 修复表格规格选择器存在多个0开头选项时选中功能异常问题\r\n\r\n### BUG\r\n\r\n1\\. 修复表格使用关联关系字段排序时必须先`with`问题\r\n2\\. 修复同个页面无法同时渲染多个异步组件问题\r\n3\\. 修复树形表格下删除子节点数据后跳转异常问题 [#1071](https://github.com/jqhph/dcat-admin/issues/1071)\r\n4\\. 修复表格导出字段中存在空数组时导出异常问题\r\n5\\. 修复表单多图上传使用`sortable`功能进行排序会导致页面的图片元素消失不见问题\r\n6\\. 修复表单字段`disable`方法设置`false`无效问题\r\n7\\. 修复`multipleSelect`表单使用`load`联动加载时无法把所有选中选项传入接口问题 [#1076](https://github.com/jqhph/dcat-admin/issues/1076)\r\n8\\. 修复表格规格选择器存在多个0开头选项时选中功能异常问题\r\n\r\n## v2.0.19-beta\r\n\r\n发布时间 2021/2/21\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.19-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### BUG修复\r\n\r\n1\\. 修复非超管角色下请求 `内置api` 时提示 `无权访问` 问题\r\n2\\. 修复在弹窗中使用时间范围表单报错问题\r\n\r\n## v2.0.18-beta\r\n\r\n发布时间 2021/2/20\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.18-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### 功能改进\r\n\r\n\r\n**1.增加菜单顶部横向布局 (Horizontal)**\r\n\r\n设置配置参数 `admin.layout.horizontal_menu` 的值为 `true` 开启此功能，效果如下\r\n\r\n![](https://cdn.learnku.com/uploads/images/202102/20/38389/SpmXMujJ3D.png!large)\r\n\r\n**2.权限中间件以及跳过登陆判断时可以填写路由别名并且无需增加前缀**\r\n\r\n配置文件以及权限设置路由别名时无需填写路由前缀\r\n\r\n```php\r\n    'permission' => [\r\n        ...\r\n    \r\n        // 跳过权限判断\r\n        'except' => [\r\n            // 可以直接填写路由别名，并且无需写路由前缀\r\n            'custom.users',\r\n        ],\r\n\r\n    ],\r\n```\r\n\r\n**3.数据表格行数据增加 `_index` 字段用于保存行序号**\r\n\r\n数据表格行数据增加 `_index` 字段用于保存行序号，从 `0` 开始，用法如下\r\n\r\n```php\r\n// 在 display 回调中使用\r\n\$grid->column('序号')->display(function () {\r\n    return \$this->_index + 1;\r\n});\r\n\r\n\r\n// 在行操作 action 中使用\r\n\$grid->actions(function (\$actions) {\r\n    \$index = \$this->_index;\r\n    \r\n    ...\r\n});\r\n```\r\n\r\n\r\n**4.重命名 markdown 组件静态资源别名，避免与自定义 blade 标签产生冲突**\r\n\r\n**5.增加配置参数 `admin.menu.default_icon` 用于设置默认菜单图标**\r\n\r\n`admin.menu.default_icon` 用于设置菜单默认图标，默认值为 `feather icon-circle`\r\n\r\n**6.增加新的区块位置 `NAVBAR_BEFORE` 以及 `NAVBAR_AFTER`**\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n// 往顶部导航栏前输出内容\r\nadmin_inject_section(Admin::SECTION['NAVBAR_BEFORE'], view('...'));\r\n\r\n// 往顶部导航栏后输出内容\r\nadmin_inject_section(Admin::SECTION['NAVBAR_AFTER'], view('...'));\r\n```\r\n\r\n**6.优化表格字段选择器代码**\r\n\r\n\r\n### BUG修复\r\n\r\n1. 修复扩展管理页面`new`标签显示异常问题 [#1044](https://github.com/jqhph/dcat-admin/issues/1044)\r\n2. 修复文件上传成功后直接删除报错问题 [#1058](https://github.com/jqhph/dcat-admin/issues/1058)\r\n3. 修复 `Form::number` 表单在使用 `min` 和 `max` 方法后输入值异常问题\r\n\r\n\r\n## v2.0.17-beta\r\n\r\n发布时间 2021/2/5\r\n\r\n升级方法，逐步执行以下命令，并清除浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.17-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### 破坏性变动\r\n\r\n**1.路由别名调整**\r\n所有后台的路由别名都会自动增加前缀，需要通过 `admin_route` 函数获取路由URL，`admin_route` 可以完全代替 Laravel 内建的 `route` 方法，且支持单一方法请求的路由别名，以下是一些合法范例：\r\n\r\n`admin_route('records')`，资源路由和方法路由的别名。\r\n\r\n`admin_route('records',['id' => 1])`，附带请求参数。\r\n\r\n\r\n### 功能改进\r\n\r\n**1.优化表格排序功能**\r\n\r\n支持`orderBy`直接使用关联关系表字段进行排序，注意这里仅支持`一对一`以及`一对多`关联关系\r\n\r\n```php\r\n\$grid->model()->orderBy('profile.age');\r\n```\r\n\r\n**2.增加模型树以及树形表格自定义顶级`parent_id`值功能**\r\n\r\n模型树以及树形表格可以在`model`中自定义顶级`parent_id`值，默认值为`0`\r\n```php\r\nclass Category extends Model\r\n{\r\n\tuse ModelTree;\r\n\r\n\t// 设置默认 parent_id 为 A\r\n\tprotected \$defaultParentId = 'A';\r\n}\r\n```\r\n\r\n**3.数据详情 `file` 支持展示多文件**\r\n\r\n[#985](https://github.com/jqhph/dcat-admin/pull/985)\r\n\r\n```php\r\n\$show->field('...')->files();\r\n```\r\n\r\n效果\r\n\r\n![](https://cdn.learnku.com/uploads/images/202102/02/38389/B0a2qZEBUL.png!large)\r\n\r\n\r\n**4.`Form::input`支持数组批量设置**\r\n\r\n```php\r\n\$form->submitted(function (\$form) {\r\n    \$form->input(['k1' => 'v1', 'k2' => 'v2' ...]);\r\n});\r\n```\r\n\r\n**5.扩展管理支持`logo`以及`别名展示`**\r\n\r\n详细用法参考文档 [扩展](extension-dev.md#logo)\r\n\r\n\r\n**6.增加admin_route方法根据别名获取URL**\r\n\r\n`app/Admin/routes.php`路由注册如下\r\n```php\r\nRoute::group([\r\n    'prefix'        => config('admin.route.prefix'),\r\n    'namespace'     => config('admin.route.namespace'),\r\n    'middleware'    => config('admin.route.middleware'),\r\n], function (Router \$router) {\r\n\t// 设置别名\r\n\t\$router->resource('users', 'UserController', [\r\n\t    'names' => ['index' => 'my-users'],\r\n\t]);\r\n\r\n});\r\n```\r\n\r\n根据别名获取URL\r\n\r\n```php\r\n// 获取url\r\n\$url = admin_route('my-users');\r\n\r\n// 判断路由\r\n\$isUsers = request()->routeIs(admin_route_name('users'));\r\n```\r\n\r\n**8.JsonResponse::location 允许不传参**\r\n\r\n如果不传参会在`1`秒之后自动刷新当前页面\r\n\r\n```php\r\nreturn Admin::json()->success('操作成功')->location();\r\n```\r\n\r\n**9.页面布局Layout\\Column支持等宽布局**\r\n\r\n当列宽度设置为`0`时会使用等宽布局 [#1018](https://github.com/jqhph/dcat-admin/pull/1018)\r\n\r\n```php\r\nuse Dcat\\Admin\\Layout\\Row;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\nreturn Content::make()\r\n\t->body(function (Row \$row) {\r\n\t    \$row->column(0, view('...'));\r\n\t});\r\n```\r\n\r\n**10.页面布局Layout\\Row支持no-gutters属性**\r\n\r\n`.row`上带有`margin-left: -15px;margin-right: -15px;`属性，你可以在`.row`上上定义`.no-gutters`属性，从而消除这个属性，使页面不会额外宽出`30px`，即`<div class=\"row no-gutters\"...`\r\n```php\r\n\$content->row(function (Row \$row) {\r\n\t// 启用 no-gutters\r\n\t\$row->noGutters();\r\n\r\n\t\$row->column(9, function (Column \$column) {\r\n\t\t\$column->row(\$this->card(['col-md-12', 20], '#4DB6AC'));\r\n\t\t\r\n\t\t\$column->row(function (Row \$row) {\r\n\t\t\t// 启用 no-gutters\r\n\t\t\t\$row->noGutters();\r\n\r\n\t\t\t\$row->column(4, \$this->card(['col-md-4', 30], '#80CBC4'));\r\n\t\t\t\$row->column(4, \$this->card(['col-md-4', 30], '#4DB6AC'));\r\n\t\t\t\$row->column(4, function (Column \$column) {\r\n\t\t\t\t\$column->row(function (Row \$row) {\r\n\t\t\t\t\t// 启用 no-gutters\r\n\t\t\t\t\t\$row->noGutters();\r\n\r\n\t\t\t\t\t\$row->column(6, \$this->card(['col-md-6', 30], '#26A69A'));\r\n\t\t\t\t\t\$row->column(6, \$this->card(['col-md-6', 30], '#26A69A'));\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n});\r\n```\r\n\r\n效果如下\r\n\r\n![](https://cdn.learnku.com/uploads/images/202102/05/38389/4YlO8aOPCW.jpg!large)\r\n\r\n**11.表格删除数据后保留URL的get参数**\r\n\r\n在之前的版本中，删除数据后会丢失`URL`的`get`参数，导致跳转回表格第一页，这个版本对这个功能进行了优化，删除后依然会保留`URL`的`get`参数 [#961](https://github.com/jqhph/dcat-admin/issues/961)\r\n\r\n\r\n**12.重构文件上传前端代码**\r\n\r\n此功能为技术性优化，这个版本对文件上传前端代码进行了重构、拆分代码，使其更易阅读和维护\r\n\r\n### BUG修复\r\n\r\n1. 修复`MultipleSelect`表单样式异常问题 [#967](https://github.com/jqhph/dcat-admin/issues/967)\r\n2. 修复加载`markdown`组件后使用`select2`表单异常问题 [#990](https://github.com/jqhph/dcat-admin/issues/990)\r\n3. 修复文件上传在`Linux`服务器下保存繁体中文文件名丢失问题 [#993](https://github.com/jqhph/dcat-admin/issues/993)\r\n4. 修复 `Widgets\\Dropdown::click` 无法显示默认选项问题\r\n5. 修复`form`表单中的`number`组件文本内容为空时点击加减按钮出现`NaN`问题  [#995](https://github.com/jqhph/dcat-admin/issues/995)\r\n6. 修复图片预览失败提示无法使用翻译文件问题\r\n7. 修复一对一关联关系`Range`表单使用验证规则判断异常问题\r\n8. 修复多应用情况下路由别名冲突的问题\r\n\r\n\r\n\r\n\r\n## v2.0.16-beta\r\n\r\n发布时间 2021/1/11\r\n\r\n升级方法，逐步执行以下命令，并清理浏览器缓存\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.16-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n\r\n### 破坏性变动\r\n\r\n**1.表单字段的 `disableHorizontal` 调整为 `horizontal` **\r\n\r\n更改表单字段布局方式为`horizontal`，此功能默认启用，用法如下\r\n\r\n```php\r\n// 禁用 horizontal 布局\r\n\$form->text('...')->horizontal(false);\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.增强表格字段排序(sortable)功能**\r\n\r\n使表格字段支持关联关系表字段以及`json`字段的排序\r\n\r\n> 注意，关联关系仅支持`hasOne`以及`belongsTo`两种类型的字段排序，并且不支持多层级嵌套！\r\n\r\n```php\r\n// 关联关系表字段排序\r\n\$grid->column('profile.age')->sortable();\r\n\r\n// 指定需要排序的字段名称\r\n\$grid->column('my_age')->sortable('profile.age');\r\n\r\n// json字段排序\r\n\$grid->column('options.price')->sortable('options->price');\r\n// 关联关系表的 json 字段排序\r\n\$grid->column('profile.options.price')->sortable('profile.options->price');\r\n```\r\n\r\n支持`MySql`的```order by cast(`{field}` as {type})```用法\r\n\r\n```php\r\n\$grid->column('profile.age')->sortable(null, 'SIGNED');\r\n\r\n\$grid->column('profile.options.price')->sortable('profile.options->price', 'SIGNED');\r\n```\r\n\r\n\r\n**2.增加 admin_exit 函数，用于代替 exit**\r\n\r\n`admin_exit` 用于中断程序执行，并响应数据到浏览器进行显示，用于代替 `exit` 和 `die`，下面简单介绍下用法\r\n\r\n\r\n用法1，返回 `Content` 布局对象，此用法可用于返回错误信息显示到前端\r\n```php\r\nuse Dcat\\Admin\\Widgets\\Alert;\r\nuse Dcat\\Admin\\Layout\\Content;\r\n\r\n// 中断程序，并显示自定义页面到前端\r\nadmin_exit(\r\n    Content::make()\r\n        ->title('标题')\r\n        ->description('描述')\r\n        ->body('页面内容1')\r\n        ->body(Alert::make('服务器出错了~', 'Error')->danger())\r\n);\r\n```\r\n\r\n效果如下\r\n\r\n![](https://cdn.learnku.com/uploads/images/202101/11/38389/FLg6C7kwRq.png!large)\r\n\r\n用法2，返回 `json` 格式数据，此用法经常用于表单提交数据的`api`请求拦截，或`Action`的`api`请求拦截\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\nadmin_exit(\r\n    Admin::json()\r\n        ->success('成功了')\r\n        ->refresh()\r\n        ->data([\r\n            ...\r\n        ])\r\n);\r\n\r\n// 当然也可以直接响应数组\r\nadmin_exit([\r\n   ...\r\n]);\r\n```\r\n\r\n用法3，直接相应`Response`对象或字符串\r\n\r\n```php\r\nadmin_exit('Hello world');\r\n\r\nadmin_exit(response('Hello world', 500));\r\n```\r\n\r\n\r\n**3.增加 Show\\Field::bool() 和 Show\\Field::bold() 方法**\r\n\r\n字段值为真显示 `✓`, 否则显示 `✗` [#940](https://github.com/jqhph/dcat-admin/pull/940)\r\n\r\n```php\r\n\$show->field('...')->bool();\r\n```\r\n\r\n字段值加粗显示\r\n\r\n```php\r\n\$show->field('...')->bold();\r\n\r\n// 指定颜色\r\n\$show->field('...')->bold(admin_color()->primary());\r\n```\r\n\r\n\r\n**4.增加 Form\\Footer::view()  方法**\r\n \r\n通过 `Form\\Footer::view()` 方法可以自定义数据表单的底部视图 [#957](https://github.com/jqhph/dcat-admin/pull/957)\r\n\r\n```php\r\n\$form->footer(function (\$footer) {\r\n    \$footer->view('...', [...]);\r\n});\r\n```\r\n\r\n\r\n**5.增加表单默认显示指定 Tab 功能**\r\n\r\n```php\r\n// 默认显示标题为 标题2 的 Tab\r\n\$form->getTab()->active('标题2');\r\n// 也可以指定偏移量\r\n\$form->getTab()->activeByIndex(1);\r\n\r\n\$form->tab('标题1', function (\$form) {\r\n    ...\r\n});\r\n\r\n\$form->tab('标题2', function (\$form) {\r\n    ...\r\n});\r\n```\r\n\r\n**6.增加表单 Form\\Row::horizontal() 方法**\r\n\r\n设置布局为 `horizontal`\r\n\r\n```php\r\n\$form->row(function (Form\\Row \$form) {\r\n\t\$form->horizontal();\r\n\r\n\t...\r\n});\r\n```\r\n\r\n**7.表格 Modal 增加自定义图标功能**\r\n\r\n\r\n```php\r\n\$grid->column('...')->modal(function (\$modal) {\r\n    // 自定义图标\r\n    \$modal->icon('feather icon-x');\r\n    \r\n    return ...;\r\n});\r\n```\r\n\r\n**8.增加路由域名限制配置**\r\n\r\n通过配置参数`admin.route.domain`可以限制路由的域名, 打开配置文件 `config/admin.php`\r\n\r\n```php\r\n    'route' => [\r\n        'domain' => env('ADMIN_ROUTE_DOMAIN'),\r\n\r\n        'prefix' => env('ADMIN_ROUTE_PREFIX', 'admin'),\r\n\r\n        'namespace' => 'App\\\\Admin\\\\Controllers',\r\n\r\n        'middleware' => ['web', 'admin'],\r\n    ],\r\n```\r\n\r\n\r\n**9.增加 admin.session 中间件的启用或禁用配置**\r\n\r\n从`2.0`的版本之后 `admin.session` 中间件不再默认启用，如果您的应用同时有前台和后台，则需要开启 `admin.session` 中间件，否则会造成前后台 `session` 冲突问题。\r\n\r\n把配置参数 `admin.route.enable_session_middleware` 的值设置为 `true` 即可开启\r\n```php\r\n    'route' => [\r\n        'domain' => env('ADMIN_ROUTE_DOMAIN'),\r\n\r\n        'prefix' => env('ADMIN_ROUTE_PREFIX', 'admin'),\r\n\r\n        'namespace' => 'App\\\\Admin\\\\Controllers',\r\n\r\n        'middleware' => ['web', 'admin'],\r\n        \r\n        // 开启 admin.session 中间件\r\n        'enable_session_middleware' => true,\r\n    ],\r\n```\r\n\r\n### BUG修复\r\n\r\n1. 修复数据表格`Grid::header`以及`Grid::footer`回调的第一个参数中`Model`被转化为`array`格式问题\r\n2. 修复切换主题时文件上传按钮颜色无法跟着改变问题 [#938](https://github.com/jqhph/dcat-admin/issues/938)\r\n3. 修复 `Widgets\\Table` 构造方法第三个参数设置无效问题\r\n4. 修复 `app/Admin/bootstrap.php` 中使用 `config(['admin.layout.color' => '...'])` 覆盖主题色可能无效问题\r\n5. 修复数据表格过滤器重置关联关系表单字段无效问题 [#949](https://github.com/jqhph/dcat-admin/issues/949)\r\n6. 修复表格过滤器 `group` 功能显示异常问题 [#929](https://github.com/jqhph/dcat-admin/issues/929)\r\n7. 修复当页面存在多个 `selectTable` 表单时所有弹窗都只显示第一个设置的 `title` 问题 [#926](https://github.com/jqhph/dcat-admin/issues/926)\r\n\r\n\r\n\r\n## v2.0.15-beta\r\n\r\n发布时间 2021/1/3\r\n\r\n升级方法，逐步执行以下命令\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.15-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.升级select2到v4.1.x-beta版本**\r\n\r\n\r\n`select`组件升级至`v4.1.x-beta`，使`tags`表单体验更好，并支持了多国语言翻译。\r\n\r\n**2.Widgets/Modal增加弹窗垂直居中以及可滚动功能**\r\n\r\n用法如下 [#901](https://github.com/jqhph/dcat-admin/pull/901)\r\n\r\n```php\r\n\$modal = Modal::make()\r\n    ->xl()\r\n    ->centered() // 设置弹窗垂直居中\r\n    ->scrollable() // 设置弹窗内容可滚动\r\n    ->title(...)\r\n    ->body(...);\r\n```\r\n\r\n**3.`Admin::requiredAssets`支持传递动态参数**\r\n\r\n```php\r\nuse Dcat\\Admin\\Admin;\r\n\r\n// 注册前端组件别名\r\n// {lang} 为动态参数\r\nAdmin::asset()->alias('@test', [\r\n    'js' => ['/vendor/test/js/{lang}.min.js'],\r\n]);\r\n\r\n// {lang} 会被替换为 zh_CN\r\nAdmin::requireAssets('@test', ['lang' => 'zh_CN']);\r\n// 也可以这样使用\r\nAdmin::requireAssets('@test?lang=zh_CN');\r\n```\r\n\r\n\r\n### Bug修复\r\n\r\n1. 修复表单`block`布局无法保存数据问题 [#883](https://github.com/jqhph/dcat-admin/issues/883)\r\n2. 修复`hasMany`表单下使用`currency`失效问题 [#886](https://github.com/jqhph/dcat-admin/issues/886)\r\n3. 修复数据表单保存后自动跳转到详情页问题 [#893](https://github.com/jqhph/dcat-admin/issues/893)\r\n4. 修复`editor`表单无法清空数据问题 [#895](https://github.com/jqhph/dcat-admin/issues/895)\r\n5. 修复`hasMany`表单下使用`tags`的`required`验证异常问题 [#905](https://github.com/jqhph/dcat-admin/issues/905)\r\n6. 修复多文件上传表单删除单个文件时会导致全部文件被清空问题 [#914](https://github.com/jqhph/dcat-admin/issues/914)\r\n7. 修复表格字段无法使用模型访问器问题\r\n\r\n\r\n## v2.0.14-beta\r\n\r\n发布时间 2020/12/24\r\n\r\n升级方法，逐步执行以下命令\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.14-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.优化文件上传失败错误信息提示**\r\n\r\n在旧版本中，文件上传失败的错误提示信息不太明确，导致难以定义错误原因，所以在这个版本中对错误提示进行了优化，一旦文件上传失败会显示具体原因。\r\n\r\n### Bug修复\r\n\r\n1\\. 修复表格字段与模型`casts`属性产生冲突，以及`display`闭包中使用字符串拼接显示异常问题 [#876](https://github.com/jqhph/dcat-admin/issues/876)\r\n2\\. 修复表单动态显示功能无法使用问题 [#879](https://github.com/jqhph/dcat-admin/issues/879)\r\n3\\. 修复表单使用`Block`布局时无法显示编辑数据问题 [#877](https://github.com/jqhph/dcat-admin/issues/877)\r\n\r\n## v2.0.13-beta\r\n\r\n发布时间 2020/12/23\r\n\r\n升级方法，逐步执行以下命令\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.13-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### Bug修复\r\n\r\n1\\. 修复表格展示关联关系字段当关联数据不存在时有可能报错问题 [#867](https://github.com/jqhph/dcat-admin/issues/867)\r\n2\\. 修复当表格使用数据仓库返回数组或非模型`collection`时`display`方法无效问题 [#869](https://github.com/jqhph/dcat-admin/issues/869)\r\n\r\n\r\n## v2.0.12-beta\r\n\r\n发布时间 2020/12/22\r\n\r\n升级方法，逐步执行以下命令\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.12-beta\"\r\nphp artisan admin:publish --assets --migrations --force\r\nphp artisan migrate\r\n```\r\n\r\n### 破坏性变动\r\n\r\n**1.图片/文件上传表单`removeable`重命名为`removable`**\r\n\r\n```php\r\n\$form->file('...')->removable();\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.支持PHP8.0**\r\n\r\n**2.图片/文件上传表单支持监听WebUploader事件**\r\n\r\n通过 `on` 方法可以监听 [WebUploader文件上传相关事件](http://fex.baidu.com/webuploader/doc/index.html#WebUploader_Uploader_events)\r\n\r\n```php\r\n\$form->file('...')\r\n\t->on('startUpload', <<<JS\r\n\t\tfunction () {\r\n\t\t\tconsole.log('文件开始上传...', this);\r\n\t\t\t\r\n\t\t\t// 上传文件前附加自定义参数到文件上传接口\r\n\t\t\tthis.uploader.options.formData['custom_field'] = '...';\r\n\t\t}\r\nJS\r\n    )\r\n\t->on('uploadFinished', <<<JS\r\n    \tfunction () {\r\n    \t\tconsole.log('文件上传完毕');\r\n    \t}\r\nJS\r\n    );\r\n    \r\n//         \r\n```\r\n\r\n**3.监听文件上传成功或文件被删除时产生的变动**\r\n\r\n通过以下方法可以监听文件**上传成功**或文件**被删除**时产生的变动\r\n\r\n```php\r\n\$file = \$form->file('...');\r\n\r\nAdmin::script(\r\n\t<<<JS\r\n\$('{\$file->getElementClassSelector()} .file-input').on('change', function () {\r\n\tconsole.log('文件发生变动', this.value);\r\n});\r\nJS\r\n);\r\n```\r\n\r\n**4.允许在uploading事件中拦截并响应错误信息**\r\n\r\n从这个版本开始支持在表单的 `uploading` 事件中拦截文件上传并支持响应错误信息到前端\r\n\r\n```php\r\n\$form->uploading(function (Form \$form) {\r\n    return \$form->response()->error('文件上传失败，请重试！');\r\n});\r\n```\r\n\r\n**5.监听selectTable选中值变动**\r\n\r\n```php\r\n\$selectTable = \$form->selectTable('...')->from(...);\r\n\r\nAdmin::script(\r\n\t<<<JS\r\n\$('{\$selectTable->getElementClassSelector()} input[type=\"hidden\"]').on('change', function () {\r\n\tconsole.log('选中值发生变化', this.value);\r\n});\r\nJS\r\n);\r\n```\r\n\r\n**6.调整树状表格无数据返回，取消返回404状态码**\r\n\r\n**7.调整表格displayer类的row属性值类型为model**\r\n\r\n**8.暗黑模式细节优化**\r\n\r\n```php\r\n\$grid->column(...)->modal(function () {\r\n    // \$this 指向 model 对象\r\n    dd(\$this);\r\n});\r\n\r\n\$grid->actions(function () {\r\n    // \$this 指向 model 对象\r\n    dd(\$this);\r\n});\r\n```\r\n\r\n**9.优化卡片中图表显示溢出的问题**\r\n\r\n[#822](https://github.com/jqhph/dcat-admin/pull/822)\r\n\r\n**10.widget组件增加when方法**\r\n\r\n```php\r\n\$modal = Dcat\\Admin\\Widgets\\Modal::make()\r\n\t->when(\$condition, function (\$modal) {\r\n\t\t// 当 \$condition 的值为 真 时，会执行闭包里面的逻辑\r\n\t    \$modal->xl();\r\n\t})\r\n\t->body(...)\r\n\t->render();\r\n```\r\n\r\n### Bug修复\r\n\r\n1\\. 修复 `Grid\\Filter::group` 无法保持选择状态问题 [#739](https://github.com/jqhph/dcat-admin/pull/793)\r\n2\\. 修复 `Form::hasMany` 表单条目删除后仍然验证 `required` 问题 [#795](https://github.com/jqhph/dcat-admin/pull/795)\r\n3\\. 修复 地图 表单无法使用问题\r\n4\\. 修复当生成 `composer` 类映射文件且类文件被删除的情况下使用 `guessClassFileName` 会报错问题\r\n5\\. 修复数据导出使用 `Fetched` 事件报错问题 [#815](https://github.com/jqhph/dcat-admin/issues/815)\r\n6\\. 修复设置 `Grid name` 之后无法重置 `filter` 问题\r\n7\\. 修复 `select2` 无法自动使用中文语言包问题 [#839](https://github.com/jqhph/dcat-admin/issues/839)\r\n8\\. 修复表单勾选 `继续创建` 以及 `继续编辑` 跳转路由错误问题 [#814](https://github.com/jqhph/dcat-admin/issues/814)\r\n9\\. 修复一对一关联关系 `range` 表单设置 `rules` 无效问题\r\n10\\. 修复当启用 `fixColumns` 时，时间筛选下拉会被遮挡问题 [#833](https://github.com/jqhph/dcat-admin/issues/833)\r\n11\\. 修复菜单使用`fa`图标无法自动对齐问题 [#758](https://github.com/jqhph/dcat-admin/pull/758)\r\n12\\. 修复表单 `row` 布局下使用 `hasMany` 提交报错问题 [#801](https://github.com/jqhph/dcat-admin/issues/801)\r\n13\\. 修复表单 `hasMany` 无法使用 `select` 联动问题 [#769](https://github.com/jqhph/dcat-admin/issues/769)\r\n\r\n\r\n## v2.0.11-beta\r\n\r\n发布时间 2020/12/06\r\n\r\n升级方法，逐步执行以下命令\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.11-beta\"\r\nphp artisan admin:publish --assets --force\r\nphp artisan admin:publish --migrations --force # 表结构有变动\r\nphp artisan migrate\r\n```\r\n\r\n### Bug修复\r\n\r\n1\\. 修复使用 `pjax` 重复刷新页面可能导致 `Dcat.init` 监听失效问题\r\n2\\. 修复 `admin:export-seed --users` 会生成多余代码问题\r\n3\\. 修复表单编辑页面保存后跳转异常问题\r\n4\\. 修复表单页面选择继续编辑会导致 `hasMany` 重复添加数据问题\r\n5\\. 修复 `select` 表单联动后原 `select2 config` 丢失问题 [#779](https://github.com/jqhph/dcat-admin/issues/779)\r\n6\\. 修复 `map` 表单加载异常问题 [#764](https://github.com/jqhph/dcat-admin/issues/764)\r\n7\\. 修复批量删除功能删除数据后无法自动刷新页面问题\r\n8\\. 修复 `hasMany` 表单编辑页面无法正常展示 `row` 以及 `column` 布局问题\r\n9\\. 修复 `Dcat.init` 监听会被异步弹窗解绑问题\r\n10\\. 修复表格工具栏下拉菜单会被固定列表格遮挡问题 [#728](https://github.com/jqhph/dcat-admin/issues/728)\r\n11\\. 修复禁用 `showColumnSelector` 时仍然会读取缓存内容问题\r\n\r\n### 功能改进\r\n\r\n**1.Form::divider 增加 title 参数**\r\n\r\n增加 `title` 参数用于在分割线中间显示标题功能，用法\r\n\r\n```php\r\n\$form->divider('标题');\r\n```\r\n\r\n**2.Grid::footer以及Grid::header调整为支持多次回调**\r\n\r\n```php\r\n\$grid->header(...);\r\n\r\n\$grid->header(...);\r\n\r\n\$grid->header(...);\r\n```\r\n\r\n**3.优化表格规格筛选器以及select表单样式**\r\n## v2.0.10-beta\r\n\r\n发布时间 2020/11/29\r\n\r\n升级方法，逐步执行以下命令\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.10-beta\"\r\nphp artisan admin:publish --assets --force\r\nphp artisan admin:publish --migrations --force # 表结构有变动\r\nphp artisan migrate\r\n```\r\n\r\n### 功能改进\r\n\r\n**1.增加表单右上角提示窗展示字段验证错误信息**\r\n\r\n此功能默认开启，可以通过`validationErrorToastr`方法禁用\r\n\r\n```php\r\n\$form->validationErrorToastr(false);\r\n```\r\n\r\n**2.增加 Tree::maxDepth 方法用于限制模型树最大层级**\r\n\r\n```php\r\n\$tree->maxDepth(5);\r\n```\r\n\r\n**3.优化导出功能，支持标题设置关联关系字段以及自动读取grid表格列的标题**\r\n\r\n在当前版本中导出列默认与`column`列一致，不再需要手动设置导出的列名称以及翻译，并且支持关联关系字段\r\n\r\n```php\r\n\$grid->column('id');\r\n\$grid->column('name');\r\n...\r\n\r\n// 默认与上面的列相同\r\n\$grid->export();\r\n```\r\n\r\n**4.工具表单增加resetButton与submitButton方法**\r\n\r\n```php\r\n// 禁用重置和提交按钮\r\n\$form->resetButton(false);\r\n\$form->submitButton(false);\r\n```\r\n\r\n**5.表单字段的`disable`以及`readOnly`方法增加参数控制是否启用**\r\n\r\n```php\r\n// 传 false 则不启用\r\n\$form->text(...)->disable(false);\r\n```\r\n\r\n**6.文件上传增加`withDeleteData`允许用户设置请求参数，并在上传接口以及删除接口中增加主键字段**\r\n\r\n通过 `withDeleteData` 方法可以传递自定义参数到文件删除接口\r\n\r\n```php\r\n\$form->file(...)->withDeleteData(['key' => 'value]);\r\n```\r\n\r\n**7.增加`embeds`表单禁止显示标题功能`**\r\n第二个参数传 `false` 则不显示标题\r\n\r\n```php\r\n\$form->embeds('field', false, function (\$form) {\r\n    ...\r\n});\r\n```\r\n\r\n**8.重新编写部分单元测试用例，以支持2.x用法**\r\n\r\n### Bug修复\r\n\r\n1. 修复管理员详情页无法选中已有权限问题 \r\n2. 修复 `admin:export-seed` 命令导出 `seeder` 类名异常问题\r\n3. 修复表单删除跳转异常问题\r\n4. 修复表单继续编辑跳转异常问题\r\n5. 修复父表与 `hasMany` 存在同样字段名称时无法保存父表字段问题\r\n6. 修复暗黑模式下选中子菜单样式异常问题 [#712](https://github.com/jqhph/dcat-admin/issues/712)\r\n7. 修复表单 `block` 布局下表单动态显示功能无效问题 [#723](https://github.com/jqhph/dcat-admin/issues/723)\r\n8. 优化 `selectOptions` 层级结构显示，解决前缀呈现随层级深度指数增加问题 [#618](https://github.com/jqhph/dcat-admin/issues/618)\r\n9. 修复 `admin_view` 没有返回数据问题\r\n10. 修复 `select` 表单 `ajax` 以及 `load` 设置的链接不能带参数问题 [#745](https://github.com/jqhph/dcat-admin/issues/745)\r\n11. 修复表格行操作 `action` 的 `handle` 方法只能获取最后一行数据的 `id` 问题\r\n12. 修复 `list` 表单编辑页无法删除已有数据问题 [#759](https://github.com/jqhph/dcat-admin/issues/723)\r\n13. 修复 `embeds` 范围表单 `name` 属性错误问题\r\n\r\n\r\n**功能改进**\r\n\r\n1.引入[jquery.initialize](https://github.com/pie6k/jquery.initialize)组件，用于监听动态生成的页面元素并设置一个回调，下面来举一个简单的例子来演示用法：\r\n\r\n在旧版本中，假如一个元素是`JS`动态生成的，如果我们需要对这个元素绑定一个点击事件的话，那么我们通常需要这么做\r\n\r\n```html\r\n<div class=\"selector\">test</div>\r\n\r\n<script>\r\nDcat.ready(function () {\r\n    // 需要先 off 再 on 否则页面刷新后会造成重复绑定问题\r\n    \$(document).off('click', '.selector').on('click', '.selector', function () {\r\n        ...\r\n    })\r\n});\r\n</script>\r\n```\r\n\r\n上面这种做法一来比较麻烦，需要先`off`再`on`；二来无法对动态生成的元素做一些特殊处理，例如你想在`.selector`生成后改变背景颜色，这个操作就没办法做到。\r\n\r\n在这个版本中我们可以使用`Dcat.init`方法来监听元素动态生成，可以很方便的解决上面两个问题\r\n\r\n```html\r\n<div class=\"selector\">test</div>\r\n\r\n<script>\r\nDcat.ready(function () {\r\n    // \$this 是当前元素的jquery dom对象\r\n    // id 是当前元素的id属性，如果当前元素没有id则会自动生成一个随机id\r\n    Dcat.init('.selector', function (\$this, id) {\r\n        // 修改元素的背景色\r\n        \$this.css({background: \"#fff\"});\r\n        \r\n        // 这里不需要 off 再重新 on，因为这个匿名函数只会执行一次\r\n        \$this.on('click', function () {\r\n            ...\r\n        });\r\n    });\r\n});\r\n</script>\r\n```\r\n\r\n得益于这个[jquery.initialize](https://github.com/pie6k/jquery.initialize)组件的引入，在当前这个版本中我们对表单组件的前端代码也进行了优化，使其更容易支持`HasMany`这种动态生成的表单类型，大大降低了代码的复杂性。\r\n\r\n\r\n2.Form::hasMany以及Form::array表单支持column和row布局\r\n\r\n如果字段比较多，可以用`column`和`row`布局以节省空间\r\n\r\n```php\r\n\$form->array('field', function (NestedForm \$form) {\r\n    \$form->column(6, function (NestedForm \$form) {\r\n        \$form->text('...');\r\n        \r\n        ...\r\n    });\r\n    \r\n    \$form->column(6, function (NestedForm \$form) {\r\n        ...\r\n    });\r\n});\r\n```\r\n\r\n3.配置过admin.auth.except参数的路由不需要验证权限 [#673](https://github.com/jqhph/dcat-admin/issues/673)\r\n\r\n\r\n4.Form、Grid以及Show字段类增加when方法\r\n\r\n用法示例，类似`Laravel QueryBuilder`的`when`方法\r\n\r\n在表格中\r\n```php\r\n// 当第一个参数的值为 真 时才会执行闭包的代码\r\n\$grid->column('title')->when(true, function (Grid\\Column \$column, \$value) {\r\n    \$column->label();\r\n});\r\n```\r\n\r\n表单\r\n```php\r\n// 当第一个参数的值为 真 时才会执行闭包的代码\r\n\$form->text('email')->when(true, function (Form\\Field\\Text \$text, \$value) {\r\n    \$text->type('email');\r\n});\r\n```\r\n\r\n5.管理员模型增加canSeeMenu方法控制是否可见菜单\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse Dcat\\Admin\\Models\\Administrator as Model;\r\n\r\nclass Administrator extends Model\r\n{\r\n    /**\r\n     * 控制菜单是否可见，默认返回true\r\n     * \r\n     * @param array|\\Illuminate\\Database\\Eloquent\\Model \$menu 菜单节点\r\n     * @return bool\r\n     */\r\n    public function canSeeMenu(\$menu)\r\n    {\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n6.增加 admin_script、admin_style、admin_js、admin_css以及admin_require_assets函数\r\n\r\n```php\r\n// 相当于 Admin::script\r\nadmin_script('console.log(xxx)');\r\n\r\n// 相当于 Admin::style\r\nadmin_style('.my-class {color: red}');\r\n\r\n// 相当于 Admin::js() \r\nadmin_js(['@admin/xxx.js']);\r\n\r\n// 相当于 Admin::css() \r\nadmin_css(['@admin/xxx.css']);\r\n\r\n// 相当于 Admin::requireAssets() \r\nadmin_require_assets(['@select2']);\r\n```\r\n\r\n7.简化动作(Action)的`JS`代码逻辑，去除记住`selector`功能\r\n\r\n**BUG修复**\r\n\r\n1. 修复表格 orderable 功能异常问题 [#674](https://github.com/jqhph/dcat-admin/issues/674)\r\n2. 修复 JsonResponse methodIf 用法报错问题\r\n3. 修复表格、表单以及数据详情指定 `label`  [#684](https://github.com/jqhph/dcat-admin/issues/684)\r\n4. 修复表格 `Grid::rows` 回调无法正常使用问题\r\n5. 修复widget添加`JS`代码异常导致部分类型的统计卡片异步加载功失效问题\r\n6. 修复表格行操作 getKey 方法异常问题 [#691](https://github.com/jqhph/dcat-admin/issues/691)\r\n7. 修复当页面存在多个 select 表单时无法使用联动功能问题\r\n8. 修复表格删除数据后无法自动刷新页面问题\r\n\r\n\r\n## v2.0.6-beta\r\n\r\n发布时间 2020/11/7\r\n\r\n升级方法，逐步执行以下命令\r\n```bash\r\ncomposer remove dcat/laravel-admin\r\ncomposer require dcat/laravel-admin:\"2.0.6-beta\"\r\nphp artisan admin:publish --assets --force\r\nphp artisan admin:publish --migrations --force # 表结构有变动\r\nphp artisan migrate\r\n```\r\n\r\n**功能接口破坏性变动**\r\n\r\n1.`Form::tags`表单默认保存为`array`类型\r\n```php\r\n// 需要自己转换保存到数据库的格式\r\n\$form->tags('tag')->saveAsJson();\r\n```\r\n\r\n2.默认禁用 session 中间件\r\n\r\n3.`Form\\Tree::disableFilterParents` 重命名为 `Form\\Tree::exceptParentNode`\r\n```php\r\n\$form->tree('cate')->exceptParentNode(false);\r\n```\r\n\r\n4.文件上传表单部分方法名称调整\r\n```php\r\n// 启用分块上传功能 disableChunked 更改为 chunked\$form->image('avatar')->chunked(true);\r\n\r\n// 启用自动保存字段值功能 disableAutoSave 更改为 autoSave\$form->image('avatar')->autoSave(false);\r\n\r\n// 启用删除文件功能 disableRemove 更改为 removeable\$form->image('avatar')->removeable(false);\r\n```\r\n\r\n**功能改进**\r\n\r\n1.代码生成器增加字段拖动排序功能，此方法由小伙伴[@codingyu](https://github.com/codingyu)贡献\r\n\r\n2.菜单表增加`show`和`extension`字段，`show`字段用于控制是否显示菜单；`extension`字段用于标记是否为扩展菜单\r\n\r\n3.`Form::table`、`Form::array`、`Form::embeds`表单支持关联关系字段\r\n```php\r\n\$form->table('profile.options', function (\$form) {\r\n ...});\r\n```\r\n\r\n4.增加 `Form::checkbox` 以及 `Form::radio` 表单选项竖排显示功能\r\n```php\r\n\$form->checkbox('xxx')->inline(false)->options([...]);\r\n```\r\n\r\n5.配置文件跳过登录以及权限验证功能允许配置路由别名\r\n```php\r\n'auth' => [\r\n 'except' => [ ... 'user.login', ],],\r\n```\r\n\r\n6.`Form\\Row` 增加 `getKey` 以及 `model` 方法\r\n\r\n7.优化表格过滤器select表单选中效果，默认不选中\r\n\r\n8.表单tab布局优化\r\n\r\n**BUG修复**\r\n1\\. 修复 `Form::checkbox` 选中/取消选中全部选项时动态显示表单功能无效问题\r\n2\\. 修复台湾繁体无法翻译默认菜单标题问题 \r\n3\\. 修复 `NestedForm` 中的 `number` 字段输入值为 0 时会被过滤问题 [#634](https://github.com/jqhph/dcat-admin/issues/634)\r\n4\\. 修复模型树`RowAction`异步处理接口时获取主键报错问题\r\n5\\. 修复表格过滤器无法重置关联表字段搜索值问题 [#650](https://github.com/jqhph/dcat-admin/issues/650)\r\n6\\. 修复表格过滤器multipleSelect表单异常问题\r\n\r\n## v2.0.5-beta \r\n\r\n发布时间 2020/10/29\r\n\r\nBUG修复\r\n1. 修复表格搜索多个关联表字段sql错误问题 [I232T7](https://gitee.com/jqhph/dcat-admin/issues/I232T7)\r\n2. 修复`Form::datetimeRange`表单无法选择日志问题\r\n3. 修复无法添加多个`Form::table`表单字段问题 [#627](https://github.com/jqhph/dcat-admin/issues/627)\r\n4. 修复表格过滤器 MultipleSelectTable 中报错问题\r\n5. 修复表格规格筛选器样式异常问题\r\n\r\n\r\n## v2.0.4-beta \r\n\r\n发布时间 2020/10/27\r\n\r\nBUG修复\r\n1\\. 修复 admin_javascript_json 函数会自动空滤数组空值问题\r\n2\\. 修复数据表单使用 tab 布局报错问题 [#620](https://github.com/jqhph/dcat-admin/issues/620)\r\n3\\. 修复扩展本地安装生成临时目录权限异常问题 [#625](https://github.com/jqhph/dcat-admin/issues/625)\r\n4\\. 修复表单使用 html 方法设置视图存在 script 标签时报错问题 [#624](https://github.com/jqhph/dcat-admin/issues/624)\r\n5\\. 修复数据详情使用关联关系（一对多）显示报错问题 [#623](https://github.com/jqhph/dcat-admin/issues/623)\r\n6\\. 修复 dropdown 下拉菜单计算显示位置异常问题 [#I22S2N](https://gitee.com/jqhph/dcat-admin/issues/I22S2N)\r\n\r\n## v2.0.3-beta \r\n\r\n发布时间 2020/10/27\r\n\r\nBUG修复\r\n1\\. 修复表单行内编辑显示返回信息异常问题\r\n2\\. 修复`admin.auth.remember`设置无效问题 [#613](https://github.com/jqhph/dcat-admin/issues/613)\r\n3\\. 修复`editor`表单中文翻译异常问题 [#611](https://github.com/jqhph/dcat-admin/issues/611)\r\n4\\. 修复`Filter::scope`选择筛选项不会过滤分页参数问题\r\n5\\. 修复表单事件拦截相关问题\r\n6\\. 修复树形表单使用异常问题 [#619](https://github.com/jqhph/dcat-admin/issues/619)\r\n\r\n功能改进\r\n1\\. 增加跳过权限和登录验证的配置方式\r\n2\\. 扩展service provider增加middleware和路由排查注册功能\r\n3\\. 批量操作change事件监听优化\r\n4\\. 增加`RowSelector`健壮性, 以避免遇到`json`数组类型字段无法处理而报错 [#609](https://github.com/jqhph/dcat-admin/pull/609)\r\n\r\n## v2.0.2-beta \r\n\r\n发布时间 2020/10/21\r\n\r\nBUG修复\r\n1\\. 修复代码生成器生成控制器文件命名空间异常问题 #600 \r\n2\\. 修复配置文件logo路径错误问题\r\n3\\. 修复表格关联字段搜索无效问题\r\n4\\. 修复模型树行操作生成选择器重复问题\r\n5\\. 修复访问无权限页面报错问题\r\n6\\. 修复表格过滤器multipleSelect无法选中关联表字段值问题 #603 \r\n7\\. 修复表单tab布局无效问题 #605 \r\n\r\n功能改进\r\n1\\. Auth\\Permission移至Http目录\r\n2\\. 数据表json字段改成text\r\n3\\. 增加登录账号密码错误翻译\r\n4\\. 增加 admin_javascript_json 函数，使大部分组件配置支持传递JS代码\r\n5\\. Admin::color 增加暗黑模式颜色\r\n\r\n## v2.0.1-beta \r\n\r\n发布时间 2020/10/20\r\n\r\nBUG修复\r\n- 修复数据表格过滤搜索BUG #599 \r\n- 修复代码生成器生成控制器基类命名空间错误问题 #600 \r\n\r\n功能改进\r\n\r\n- 代码生成器增加页面标题以及面包屑翻译功能\r\n- 异常处理优化\r\n- 增加 admin_setting_array 函数", 'order' => 1, 'created_at' => "2024-06-26 15:32:41", 'updated_at' => "2024-06-26 15:32:41", 'slug' => "beta-version-update-log"],
            ['id' => 88, 'document_id' => 1, 'version_id' => 2, 'chapter_id' => 19, 'title' => "更新日志", 'content' => "# 更新日志", 'order' => 2, 'created_at' => "2024-06-26 15:33:48", 'updated_at' => "2024-06-26 15:33:48", 'slug' => "update-log"]
        ]);
    }
}
